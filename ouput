// Sample output for our program, obviously ignored tokens won't show up 
// in whatever we hand in.

In: 
 `This function adds up all elements in a list`
Out:
  class lexing.node.TComment: `This function adds up all elements in a list` 

In:
  ?sumList(list) := =(list, []) : @ 0; @ +(h(list), sumList(t(list)))
Out:
  class lexing.node.TQuestion: ? 
  class lexing.node.TIdentifier: sumList 
  class lexing.node.TLPar: ( 
  class lexing.node.TIdentifier: list 
  class lexing.node.TRPar: ) 
  class lexing.node.TSpace:   
  class lexing.node.TAssign: := 
  class lexing.node.TSpace:   
  class lexing.node.TEqual: = 
  class lexing.node.TLPar: ( 
  class lexing.node.TIdentifier: list 
  class lexing.node.TComma: , 
  class lexing.node.TSpace:   
  class lexing.node.TLBracket: [ 
  class lexing.node.TRBracket: ] 
  class lexing.node.TRPar: ) 
  class lexing.node.TSpace:   
  class lexing.node.TColon: : 
  class lexing.node.TSpace:   
  class lexing.node.TAt: @ 
  class lexing.node.TSpace:   
  class lexing.node.TIntNumber: 0 
  class lexing.node.TSemi: ; 
  class lexing.node.TSpace:   
  class lexing.node.TAt: @ 
  class lexing.node.TSpace:   
  class lexing.node.TPlus: + 
  class lexing.node.TLPar: ( 
  class lexing.node.TH: h 
  class lexing.node.TLPar: ( 
  class lexing.node.TIdentifier: list 
  class lexing.node.TRPar: ) 
  class lexing.node.TComma: , 
  class lexing.node.TSpace:   
  class lexing.node.TIdentifier: sumList 
  class lexing.node.TLPar: ( 
  class lexing.node.TT: t 
  class lexing.node.TLPar: ( 
  class lexing.node.TIdentifier: list 
  class lexing.node.TRPar: ) 
  class lexing.node.TRPar: ) 
  class lexing.node.TRPar: ) 
    
  
  
In:
  `This function gets the product
  of all elements in a list`
  
Out:
  class lexing.node.TComment: `This function gets the product
    of all elements in a list` 

In:
  ?prodList(list) := =(list, []) : return 1; return *(h(list), prodList(t(list)))

Out:
  class lexing.node.TQuestion: ? 
  class lexing.node.TIdentifier: prodList 
  class lexing.node.TLPar: ( 
  class lexing.node.TIdentifier: list 
  class lexing.node.TRPar: ) 
  class lexing.node.TSpace:   
  class lexing.node.TAssign: := 
  class lexing.node.TSpace:   
  class lexing.node.TEqual: = 
  class lexing.node.TLPar: ( 
  class lexing.node.TIdentifier: list 
  class lexing.node.TComma: , 
  class lexing.node.TSpace:   
  class lexing.node.TLBracket: [ 
  class lexing.node.TRBracket: ] 
  class lexing.node.TRPar: ) 
  class lexing.node.TSpace:   
  class lexing.node.TColon: : 
  class lexing.node.TSpace:   
  class lexing.node.TReturn: return 
  class lexing.node.TSpace:   
  class lexing.node.TIntNumber: 1 
  class lexing.node.TSemi: ; 
  class lexing.node.TSpace:   
  class lexing.node.TReturn: return 
  class lexing.node.TSpace:   
  class lexing.node.TMult: * 
  class lexing.node.TLPar: ( 
  class lexing.node.TH: h 
  class lexing.node.TLPar: ( 
  class lexing.node.TIdentifier: list 
  class lexing.node.TRPar: ) 
  class lexing.node.TComma: , 
  class lexing.node.TSpace:   
  class lexing.node.TIdentifier: prodList 
  class lexing.node.TLPar: ( 
  class lexing.node.TT: t 
  class lexing.node.TLPar: ( 
  class lexing.node.TIdentifier: list 
  class lexing.node.TRPar: ) 
  class lexing.node.TRPar: ) 
  class lexing.node.TRPar: )
  
In:
  `
  returns 76
  I'm a comment
  `
  
Out:
  class lexing.node.TComment: `
  returns 76
  I'm a comment
  ` 

In:
  ?sumList([prodList([1,2,3]), prodList([5,7,2]), prodList([0,127,9]))
Out:
  class lexing.node.TQuestion: ? 
  class lexing.node.TIdentifier: sumList 
  class lexing.node.TLPar: ( 
  class lexing.node.TLBracket: [ 
  class lexing.node.TIdentifier: prodList 
  class lexing.node.TLPar: ( 
  class lexing.node.TLBracket: [ 
  class lexing.node.TIntNumber: 1 
  class lexing.node.TComma: , 
  class lexing.node.TIntNumber: 2 
  class lexing.node.TComma: , 
  class lexing.node.TIntNumber: 3 
  class lexing.node.TRBracket: ] 
  class lexing.node.TRPar: ) 
  class lexing.node.TComma: , 
  class lexing.node.TSpace:   
  class lexing.node.TIdentifier: prodList 
  class lexing.node.TLPar: ( 
  class lexing.node.TLBracket: [ 
  class lexing.node.TIntNumber: 5 
  class lexing.node.TComma: , 
  class lexing.node.TIntNumber: 7 
  class lexing.node.TComma: , 
  class lexing.node.TIntNumber: 2 
  class lexing.node.TRBracket: ] 
  class lexing.node.TRPar: ) 
  class lexing.node.TComma: , 
  class lexing.node.TSpace:   
  class lexing.node.TIdentifier: prodList 
  class lexing.node.TLPar: ( 
  class lexing.node.TLBracket: [ 
  class lexing.node.TIntNumber: 0 
  class lexing.node.TComma: , 
  class lexing.node.TIntNumber: 127 
  class lexing.node.TComma: , 
  class lexing.node.TIntNumber: 9 
  class lexing.node.TRBracket: ] 
  class lexing.node.TRPar: ) 
  class lexing.node.TRPar: ) 

  
  
  






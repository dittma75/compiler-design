// Lexing.grammar for our unnamed language.

Package lexing;

Helpers
letter = ['a'..'z'] | ['A'..'Z'];
digit = ['0'..'9'];
digits = digit+;        // one or more digits
exp = ['e'+'E'] ['+'+'-']? digits;
newline = [10 + 13];
single_quote = ''';
back_tick = '`';
underscore = '_';

Tokens
// keywords and characters
s = 's';
n = 'n';
u = 'u';
h = 'h';
t = 't';
r = 'r';
x = 'x';
true = 'T';
false = 'F';
print = 'print';
def = 'def';
return = 'return';
at = '@';
question = '?';
dollar = '$';
caret = '^';
colon = ':';
tilde  = '~';


comment = back_tick [[0..0xffff] - back_tick]* back_tick ;
space = ' ' | 9 | newline;

assign = ':=';
equal = '=';
lt = '<';
gt = '>';
not_equal = '!=';
lte = '<=';
gte = '>=';
and = '&';
or = '|';
not = '!';

plus = '+';
minus = '-';
mult = '*';
div = '/';
mod = '%';

l_par = '(';
r_par = ')';
l_brace = '{';
r_brace = '}';
l_bracket = '[';
r_bracket = ']';
dot = '.';
comma = ',';
semi = ';';

string = single_quote [[[0..0xffff] - single_quote] - newline]* single_quote;
identifier = (letter|underscore)+;
int_number = digits;
float_number = (digits '.'? digits? | '.' digits)exp?;
misc = [0..0xffff]; // catch all for any garbage.

Ignored Tokens
comment, space;

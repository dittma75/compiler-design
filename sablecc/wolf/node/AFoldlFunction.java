/* This file was generated by SableCC (http://www.sablecc.org/). */

package wolf.node;

import wolf.analysis.*;

@SuppressWarnings("nls")
public final class AFoldlFunction extends PFunction
{
    private TFoldl _foldl_;
    private PFoldBody _foldBody_;

    public AFoldlFunction()
    {
        // Constructor
    }

    public AFoldlFunction(
        @SuppressWarnings("hiding") TFoldl _foldl_,
        @SuppressWarnings("hiding") PFoldBody _foldBody_)
    {
        // Constructor
        setFoldl(_foldl_);

        setFoldBody(_foldBody_);

    }

    @Override
    public Object clone()
    {
        return new AFoldlFunction(
            cloneNode(this._foldl_),
            cloneNode(this._foldBody_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAFoldlFunction(this);
    }

    public TFoldl getFoldl()
    {
        return this._foldl_;
    }

    public void setFoldl(TFoldl node)
    {
        if(this._foldl_ != null)
        {
            this._foldl_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._foldl_ = node;
    }

    public PFoldBody getFoldBody()
    {
        return this._foldBody_;
    }

    public void setFoldBody(PFoldBody node)
    {
        if(this._foldBody_ != null)
        {
            this._foldBody_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._foldBody_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._foldl_)
            + toString(this._foldBody_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._foldl_ == child)
        {
            this._foldl_ = null;
            return;
        }

        if(this._foldBody_ == child)
        {
            this._foldBody_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._foldl_ == oldChild)
        {
            setFoldl((TFoldl) newChild);
            return;
        }

        if(this._foldBody_ == oldChild)
        {
            setFoldBody((PFoldBody) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}

/* This file was generated by SableCC (http://www.sablecc.org/). */

package wolf.node;

import wolf.analysis.*;

@SuppressWarnings("nls")
public final class AMoreArgs extends PArgs
{
    private PArgs _args_;
    private PArgRest _argRest_;

    public AMoreArgs()
    {
        // Constructor
    }

    public AMoreArgs(
        @SuppressWarnings("hiding") PArgs _args_,
        @SuppressWarnings("hiding") PArgRest _argRest_)
    {
        // Constructor
        setArgs(_args_);

        setArgRest(_argRest_);

    }

    @Override
    public Object clone()
    {
        return new AMoreArgs(
            cloneNode(this._args_),
            cloneNode(this._argRest_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAMoreArgs(this);
    }

    public PArgs getArgs()
    {
        return this._args_;
    }

    public void setArgs(PArgs node)
    {
        if(this._args_ != null)
        {
            this._args_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._args_ = node;
    }

    public PArgRest getArgRest()
    {
        return this._argRest_;
    }

    public void setArgRest(PArgRest node)
    {
        if(this._argRest_ != null)
        {
            this._argRest_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._argRest_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._args_)
            + toString(this._argRest_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._args_ == child)
        {
            this._args_ = null;
            return;
        }

        if(this._argRest_ == child)
        {
            this._argRest_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._args_ == oldChild)
        {
            setArgs((PArgs) newChild);
            return;
        }

        if(this._argRest_ == oldChild)
        {
            setArgRest((PArgRest) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}

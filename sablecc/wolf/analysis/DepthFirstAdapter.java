/* This file was generated by SableCC (http://www.sablecc.org/). */

package wolf.analysis;

import java.util.*;
import wolf.node.*;

public class DepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getPProgram().apply(this);
        node.getEOF().apply(this);
        outStart(node);
    }

    public void inADefsProgram(ADefsProgram node)
    {
        defaultIn(node);
    }

    public void outADefsProgram(ADefsProgram node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADefsProgram(ADefsProgram node)
    {
        inADefsProgram(node);
        if(node.getDefList() != null)
        {
            node.getDefList().apply(this);
        }
        if(node.getFunc() != null)
        {
            node.getFunc().apply(this);
        }
        outADefsProgram(node);
    }

    public void inANoDefsProgram(ANoDefsProgram node)
    {
        defaultIn(node);
    }

    public void outANoDefsProgram(ANoDefsProgram node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANoDefsProgram(ANoDefsProgram node)
    {
        inANoDefsProgram(node);
        if(node.getFunc() != null)
        {
            node.getFunc().apply(this);
        }
        outANoDefsProgram(node);
    }

    public void inAMultiDefDefList(AMultiDefDefList node)
    {
        defaultIn(node);
    }

    public void outAMultiDefDefList(AMultiDefDefList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultiDefDefList(AMultiDefDefList node)
    {
        inAMultiDefDefList(node);
        if(node.getDefList() != null)
        {
            node.getDefList().apply(this);
        }
        if(node.getDefHeader() != null)
        {
            node.getDefHeader().apply(this);
        }
        outAMultiDefDefList(node);
    }

    public void inASingleDefDefList(ASingleDefDefList node)
    {
        defaultIn(node);
    }

    public void outASingleDefDefList(ASingleDefDefList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASingleDefDefList(ASingleDefDefList node)
    {
        inASingleDefDefList(node);
        if(node.getDefHeader() != null)
        {
            node.getDefHeader().apply(this);
        }
        outASingleDefDefList(node);
    }

    public void inADefHeader(ADefHeader node)
    {
        defaultIn(node);
    }

    public void outADefHeader(ADefHeader node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADefHeader(ADefHeader node)
    {
        inADefHeader(node);
        if(node.getDef() != null)
        {
            node.getDef().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getSig() != null)
        {
            node.getSig().apply(this);
        }
        if(node.getAssign() != null)
        {
            node.getAssign().apply(this);
        }
        if(node.getFunc() != null)
        {
            node.getFunc().apply(this);
        }
        outADefHeader(node);
    }

    public void inAEmptySig(AEmptySig node)
    {
        defaultIn(node);
    }

    public void outAEmptySig(AEmptySig node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEmptySig(AEmptySig node)
    {
        inAEmptySig(node);
        if(node.getLParen() != null)
        {
            node.getLParen().apply(this);
        }
        if(node.getRParen() != null)
        {
            node.getRParen().apply(this);
        }
        outAEmptySig(node);
    }

    public void inAFullSig(AFullSig node)
    {
        defaultIn(node);
    }

    public void outAFullSig(AFullSig node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFullSig(AFullSig node)
    {
        inAFullSig(node);
        if(node.getLParen() != null)
        {
            node.getLParen().apply(this);
        }
        if(node.getSigArgs() != null)
        {
            node.getSigArgs().apply(this);
        }
        if(node.getRParen() != null)
        {
            node.getRParen().apply(this);
        }
        outAFullSig(node);
    }

    public void inAMoreSigArgs(AMoreSigArgs node)
    {
        defaultIn(node);
    }

    public void outAMoreSigArgs(AMoreSigArgs node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMoreSigArgs(AMoreSigArgs node)
    {
        inAMoreSigArgs(node);
        if(node.getSigArgs() != null)
        {
            node.getSigArgs().apply(this);
        }
        if(node.getSigArgRest() != null)
        {
            node.getSigArgRest().apply(this);
        }
        outAMoreSigArgs(node);
    }

    public void inADoneSigArgs(ADoneSigArgs node)
    {
        defaultIn(node);
    }

    public void outADoneSigArgs(ADoneSigArgs node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADoneSigArgs(ADoneSigArgs node)
    {
        inADoneSigArgs(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outADoneSigArgs(node);
    }

    public void inASigArgRest(ASigArgRest node)
    {
        defaultIn(node);
    }

    public void outASigArgRest(ASigArgRest node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASigArgRest(ASigArgRest node)
    {
        inASigArgRest(node);
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outASigArgRest(node);
    }

    public void inAFuncFunc(AFuncFunc node)
    {
        defaultIn(node);
    }

    public void outAFuncFunc(AFuncFunc node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFuncFunc(AFuncFunc node)
    {
        inAFuncFunc(node);
        if(node.getFuncName() != null)
        {
            node.getFuncName().apply(this);
        }
        if(node.getArgList() != null)
        {
            node.getArgList().apply(this);
        }
        outAFuncFunc(node);
    }

    public void inABranchFunc(ABranchFunc node)
    {
        defaultIn(node);
    }

    public void outABranchFunc(ABranchFunc node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABranchFunc(ABranchFunc node)
    {
        inABranchFunc(node);
        if(node.getBranch() != null)
        {
            node.getBranch().apply(this);
        }
        outABranchFunc(node);
    }

    public void inAIdFuncName(AIdFuncName node)
    {
        defaultIn(node);
    }

    public void outAIdFuncName(AIdFuncName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdFuncName(AIdFuncName node)
    {
        inAIdFuncName(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAIdFuncName(node);
    }

    public void inAHeadFuncName(AHeadFuncName node)
    {
        defaultIn(node);
    }

    public void outAHeadFuncName(AHeadFuncName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAHeadFuncName(AHeadFuncName node)
    {
        inAHeadFuncName(node);
        if(node.getHead() != null)
        {
            node.getHead().apply(this);
        }
        outAHeadFuncName(node);
    }

    public void inATailFuncName(ATailFuncName node)
    {
        defaultIn(node);
    }

    public void outATailFuncName(ATailFuncName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATailFuncName(ATailFuncName node)
    {
        inATailFuncName(node);
        if(node.getTail() != null)
        {
            node.getTail().apply(this);
        }
        outATailFuncName(node);
    }

    public void inAReverseFuncName(AReverseFuncName node)
    {
        defaultIn(node);
    }

    public void outAReverseFuncName(AReverseFuncName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAReverseFuncName(AReverseFuncName node)
    {
        inAReverseFuncName(node);
        if(node.getReverse() != null)
        {
            node.getReverse().apply(this);
        }
        outAReverseFuncName(node);
    }

    public void inAPrependFuncName(APrependFuncName node)
    {
        defaultIn(node);
    }

    public void outAPrependFuncName(APrependFuncName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrependFuncName(APrependFuncName node)
    {
        inAPrependFuncName(node);
        if(node.getPrepend() != null)
        {
            node.getPrepend().apply(this);
        }
        outAPrependFuncName(node);
    }

    public void inAAppendFuncName(AAppendFuncName node)
    {
        defaultIn(node);
    }

    public void outAAppendFuncName(AAppendFuncName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAppendFuncName(AAppendFuncName node)
    {
        inAAppendFuncName(node);
        if(node.getAppend() != null)
        {
            node.getAppend().apply(this);
        }
        outAAppendFuncName(node);
    }

    public void inAMapFuncName(AMapFuncName node)
    {
        defaultIn(node);
    }

    public void outAMapFuncName(AMapFuncName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMapFuncName(AMapFuncName node)
    {
        inAMapFuncName(node);
        if(node.getMap() != null)
        {
            node.getMap().apply(this);
        }
        outAMapFuncName(node);
    }

    public void inALengthFuncName(ALengthFuncName node)
    {
        defaultIn(node);
    }

    public void outALengthFuncName(ALengthFuncName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALengthFuncName(ALengthFuncName node)
    {
        inALengthFuncName(node);
        if(node.getLength() != null)
        {
            node.getLength().apply(this);
        }
        outALengthFuncName(node);
    }

    public void inAFoldlFuncName(AFoldlFuncName node)
    {
        defaultIn(node);
    }

    public void outAFoldlFuncName(AFoldlFuncName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFoldlFuncName(AFoldlFuncName node)
    {
        inAFoldlFuncName(node);
        if(node.getFoldl() != null)
        {
            node.getFoldl().apply(this);
        }
        outAFoldlFuncName(node);
    }

    public void inAFoldrFuncName(AFoldrFuncName node)
    {
        defaultIn(node);
    }

    public void outAFoldrFuncName(AFoldrFuncName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFoldrFuncName(AFoldrFuncName node)
    {
        inAFoldrFuncName(node);
        if(node.getFoldr() != null)
        {
            node.getFoldr().apply(this);
        }
        outAFoldrFuncName(node);
    }

    public void inAFlattenFuncName(AFlattenFuncName node)
    {
        defaultIn(node);
    }

    public void outAFlattenFuncName(AFlattenFuncName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFlattenFuncName(AFlattenFuncName node)
    {
        inAFlattenFuncName(node);
        if(node.getFlatten() != null)
        {
            node.getFlatten().apply(this);
        }
        outAFlattenFuncName(node);
    }

    public void inAIdentityFuncName(AIdentityFuncName node)
    {
        defaultIn(node);
    }

    public void outAIdentityFuncName(AIdentityFuncName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdentityFuncName(AIdentityFuncName node)
    {
        inAIdentityFuncName(node);
        if(node.getIdentity() != null)
        {
            node.getIdentity().apply(this);
        }
        outAIdentityFuncName(node);
    }

    public void inAPrintFuncName(APrintFuncName node)
    {
        defaultIn(node);
    }

    public void outAPrintFuncName(APrintFuncName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrintFuncName(APrintFuncName node)
    {
        inAPrintFuncName(node);
        if(node.getPrint() != null)
        {
            node.getPrint().apply(this);
        }
        outAPrintFuncName(node);
    }

    public void inALambdaFuncName(ALambdaFuncName node)
    {
        defaultIn(node);
    }

    public void outALambdaFuncName(ALambdaFuncName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALambdaFuncName(ALambdaFuncName node)
    {
        inALambdaFuncName(node);
        if(node.getLambdaStart() != null)
        {
            node.getLambdaStart().apply(this);
        }
        outALambdaFuncName(node);
    }

    public void inANegFuncName(ANegFuncName node)
    {
        defaultIn(node);
    }

    public void outANegFuncName(ANegFuncName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANegFuncName(ANegFuncName node)
    {
        inANegFuncName(node);
        if(node.getNeg() != null)
        {
            node.getNeg().apply(this);
        }
        outANegFuncName(node);
    }

    public void inANotFuncName(ANotFuncName node)
    {
        defaultIn(node);
    }

    public void outANotFuncName(ANotFuncName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANotFuncName(ANotFuncName node)
    {
        inANotFuncName(node);
        if(node.getLogicalNot() != null)
        {
            node.getLogicalNot().apply(this);
        }
        outANotFuncName(node);
    }

    public void inAPlusFuncName(APlusFuncName node)
    {
        defaultIn(node);
    }

    public void outAPlusFuncName(APlusFuncName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPlusFuncName(APlusFuncName node)
    {
        inAPlusFuncName(node);
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        outAPlusFuncName(node);
    }

    public void inAMinusFuncName(AMinusFuncName node)
    {
        defaultIn(node);
    }

    public void outAMinusFuncName(AMinusFuncName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMinusFuncName(AMinusFuncName node)
    {
        inAMinusFuncName(node);
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        outAMinusFuncName(node);
    }

    public void inAMultFuncName(AMultFuncName node)
    {
        defaultIn(node);
    }

    public void outAMultFuncName(AMultFuncName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultFuncName(AMultFuncName node)
    {
        inAMultFuncName(node);
        if(node.getMult() != null)
        {
            node.getMult().apply(this);
        }
        outAMultFuncName(node);
    }

    public void inADivFuncName(ADivFuncName node)
    {
        defaultIn(node);
    }

    public void outADivFuncName(ADivFuncName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivFuncName(ADivFuncName node)
    {
        inADivFuncName(node);
        if(node.getDiv() != null)
        {
            node.getDiv().apply(this);
        }
        outADivFuncName(node);
    }

    public void inAModFuncName(AModFuncName node)
    {
        defaultIn(node);
    }

    public void outAModFuncName(AModFuncName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAModFuncName(AModFuncName node)
    {
        inAModFuncName(node);
        if(node.getMod() != null)
        {
            node.getMod().apply(this);
        }
        outAModFuncName(node);
    }

    public void inALtFuncName(ALtFuncName node)
    {
        defaultIn(node);
    }

    public void outALtFuncName(ALtFuncName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALtFuncName(ALtFuncName node)
    {
        inALtFuncName(node);
        if(node.getLt() != null)
        {
            node.getLt().apply(this);
        }
        outALtFuncName(node);
    }

    public void inAGtFuncName(AGtFuncName node)
    {
        defaultIn(node);
    }

    public void outAGtFuncName(AGtFuncName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGtFuncName(AGtFuncName node)
    {
        inAGtFuncName(node);
        if(node.getGt() != null)
        {
            node.getGt().apply(this);
        }
        outAGtFuncName(node);
    }

    public void inALteFuncName(ALteFuncName node)
    {
        defaultIn(node);
    }

    public void outALteFuncName(ALteFuncName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALteFuncName(ALteFuncName node)
    {
        inALteFuncName(node);
        if(node.getLte() != null)
        {
            node.getLte().apply(this);
        }
        outALteFuncName(node);
    }

    public void inAGteFuncName(AGteFuncName node)
    {
        defaultIn(node);
    }

    public void outAGteFuncName(AGteFuncName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGteFuncName(AGteFuncName node)
    {
        inAGteFuncName(node);
        if(node.getGte() != null)
        {
            node.getGte().apply(this);
        }
        outAGteFuncName(node);
    }

    public void inAEqualFuncName(AEqualFuncName node)
    {
        defaultIn(node);
    }

    public void outAEqualFuncName(AEqualFuncName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEqualFuncName(AEqualFuncName node)
    {
        inAEqualFuncName(node);
        if(node.getEqual() != null)
        {
            node.getEqual().apply(this);
        }
        outAEqualFuncName(node);
    }

    public void inANotEqualFuncName(ANotEqualFuncName node)
    {
        defaultIn(node);
    }

    public void outANotEqualFuncName(ANotEqualFuncName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANotEqualFuncName(ANotEqualFuncName node)
    {
        inANotEqualFuncName(node);
        if(node.getNotEqual() != null)
        {
            node.getNotEqual().apply(this);
        }
        outANotEqualFuncName(node);
    }

    public void inAAndFuncName(AAndFuncName node)
    {
        defaultIn(node);
    }

    public void outAAndFuncName(AAndFuncName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAndFuncName(AAndFuncName node)
    {
        inAAndFuncName(node);
        if(node.getAnd() != null)
        {
            node.getAnd().apply(this);
        }
        outAAndFuncName(node);
    }

    public void inAOrFuncName(AOrFuncName node)
    {
        defaultIn(node);
    }

    public void outAOrFuncName(AOrFuncName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOrFuncName(AOrFuncName node)
    {
        inAOrFuncName(node);
        if(node.getOr() != null)
        {
            node.getOr().apply(this);
        }
        outAOrFuncName(node);
    }

    public void inAXorFuncName(AXorFuncName node)
    {
        defaultIn(node);
    }

    public void outAXorFuncName(AXorFuncName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAXorFuncName(AXorFuncName node)
    {
        inAXorFuncName(node);
        if(node.getXor() != null)
        {
            node.getXor().apply(this);
        }
        outAXorFuncName(node);
    }

    public void inAEmptyArgList(AEmptyArgList node)
    {
        defaultIn(node);
    }

    public void outAEmptyArgList(AEmptyArgList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEmptyArgList(AEmptyArgList node)
    {
        inAEmptyArgList(node);
        if(node.getLParen() != null)
        {
            node.getLParen().apply(this);
        }
        if(node.getRParen() != null)
        {
            node.getRParen().apply(this);
        }
        outAEmptyArgList(node);
    }

    public void inAFullArgList(AFullArgList node)
    {
        defaultIn(node);
    }

    public void outAFullArgList(AFullArgList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFullArgList(AFullArgList node)
    {
        inAFullArgList(node);
        if(node.getLParen() != null)
        {
            node.getLParen().apply(this);
        }
        if(node.getArgs() != null)
        {
            node.getArgs().apply(this);
        }
        if(node.getRParen() != null)
        {
            node.getRParen().apply(this);
        }
        outAFullArgList(node);
    }

    public void inADoneArgs(ADoneArgs node)
    {
        defaultIn(node);
    }

    public void outADoneArgs(ADoneArgs node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADoneArgs(ADoneArgs node)
    {
        inADoneArgs(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outADoneArgs(node);
    }

    public void inAMoreArgs(AMoreArgs node)
    {
        defaultIn(node);
    }

    public void outAMoreArgs(AMoreArgs node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMoreArgs(AMoreArgs node)
    {
        inAMoreArgs(node);
        if(node.getArgs() != null)
        {
            node.getArgs().apply(this);
        }
        if(node.getArgRest() != null)
        {
            node.getArgRest().apply(this);
        }
        outAMoreArgs(node);
    }

    public void inAArgRest(AArgRest node)
    {
        defaultIn(node);
    }

    public void outAArgRest(AArgRest node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArgRest(AArgRest node)
    {
        inAArgRest(node);
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getArg() != null)
        {
            node.getArg().apply(this);
        }
        outAArgRest(node);
    }

    public void inAFuncArg(AFuncArg node)
    {
        defaultIn(node);
    }

    public void outAFuncArg(AFuncArg node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFuncArg(AFuncArg node)
    {
        inAFuncArg(node);
        if(node.getFunc() != null)
        {
            node.getFunc().apply(this);
        }
        outAFuncArg(node);
    }

    public void inAListArg(AListArg node)
    {
        defaultIn(node);
    }

    public void outAListArg(AListArg node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListArg(AListArg node)
    {
        inAListArg(node);
        if(node.getList() != null)
        {
            node.getList().apply(this);
        }
        outAListArg(node);
    }

    public void inAFloatArg(AFloatArg node)
    {
        defaultIn(node);
    }

    public void outAFloatArg(AFloatArg node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFloatArg(AFloatArg node)
    {
        inAFloatArg(node);
        if(node.getFloatNumber() != null)
        {
            node.getFloatNumber().apply(this);
        }
        outAFloatArg(node);
    }

    public void inAIntArg(AIntArg node)
    {
        defaultIn(node);
    }

    public void outAIntArg(AIntArg node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntArg(AIntArg node)
    {
        inAIntArg(node);
        if(node.getIntNumber() != null)
        {
            node.getIntNumber().apply(this);
        }
        outAIntArg(node);
    }

    public void inAIdentifierArg(AIdentifierArg node)
    {
        defaultIn(node);
    }

    public void outAIdentifierArg(AIdentifierArg node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdentifierArg(AIdentifierArg node)
    {
        inAIdentifierArg(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAIdentifierArg(node);
    }

    public void inAStringArg(AStringArg node)
    {
        defaultIn(node);
    }

    public void outAStringArg(AStringArg node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStringArg(AStringArg node)
    {
        inAStringArg(node);
        if(node.getString() != null)
        {
            node.getString().apply(this);
        }
        outAStringArg(node);
    }

    public void inAEmptyString(AEmptyString node)
    {
        defaultIn(node);
    }

    public void outAEmptyString(AEmptyString node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEmptyString(AEmptyString node)
    {
        inAEmptyString(node);
        if(node.getStringStart() != null)
        {
            node.getStringStart().apply(this);
        }
        if(node.getStringEnd() != null)
        {
            node.getStringEnd().apply(this);
        }
        outAEmptyString(node);
    }

    public void inAFullString(AFullString node)
    {
        defaultIn(node);
    }

    public void outAFullString(AFullString node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFullString(AFullString node)
    {
        inAFullString(node);
        if(node.getStringStart() != null)
        {
            node.getStringStart().apply(this);
        }
        if(node.getStringMiddle() != null)
        {
            node.getStringMiddle().apply(this);
        }
        if(node.getStringEnd() != null)
        {
            node.getStringEnd().apply(this);
        }
        outAFullString(node);
    }

    public void inAMoreBodyStringMiddle(AMoreBodyStringMiddle node)
    {
        defaultIn(node);
    }

    public void outAMoreBodyStringMiddle(AMoreBodyStringMiddle node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMoreBodyStringMiddle(AMoreBodyStringMiddle node)
    {
        inAMoreBodyStringMiddle(node);
        if(node.getStringMiddle() != null)
        {
            node.getStringMiddle().apply(this);
        }
        if(node.getStringBody() != null)
        {
            node.getStringBody().apply(this);
        }
        outAMoreBodyStringMiddle(node);
    }

    public void inADoneBodyStringMiddle(ADoneBodyStringMiddle node)
    {
        defaultIn(node);
    }

    public void outADoneBodyStringMiddle(ADoneBodyStringMiddle node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADoneBodyStringMiddle(ADoneBodyStringMiddle node)
    {
        inADoneBodyStringMiddle(node);
        if(node.getStringBody() != null)
        {
            node.getStringBody().apply(this);
        }
        outADoneBodyStringMiddle(node);
    }

    public void inAMoreEscapeStringMiddle(AMoreEscapeStringMiddle node)
    {
        defaultIn(node);
    }

    public void outAMoreEscapeStringMiddle(AMoreEscapeStringMiddle node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMoreEscapeStringMiddle(AMoreEscapeStringMiddle node)
    {
        inAMoreEscapeStringMiddle(node);
        if(node.getStringMiddle() != null)
        {
            node.getStringMiddle().apply(this);
        }
        if(node.getStringEscapeSeq() != null)
        {
            node.getStringEscapeSeq().apply(this);
        }
        outAMoreEscapeStringMiddle(node);
    }

    public void inADoneEscapeStringMiddle(ADoneEscapeStringMiddle node)
    {
        defaultIn(node);
    }

    public void outADoneEscapeStringMiddle(ADoneEscapeStringMiddle node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADoneEscapeStringMiddle(ADoneEscapeStringMiddle node)
    {
        inADoneEscapeStringMiddle(node);
        if(node.getStringEscapeSeq() != null)
        {
            node.getStringEscapeSeq().apply(this);
        }
        outADoneEscapeStringMiddle(node);
    }

    public void inAStringEscapeSeq(AStringEscapeSeq node)
    {
        defaultIn(node);
    }

    public void outAStringEscapeSeq(AStringEscapeSeq node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStringEscapeSeq(AStringEscapeSeq node)
    {
        inAStringEscapeSeq(node);
        if(node.getStringEscape() != null)
        {
            node.getStringEscape().apply(this);
        }
        if(node.getEscapeChar() != null)
        {
            node.getEscapeChar().apply(this);
        }
        outAStringEscapeSeq(node);
    }

    public void inAAEscapeChar(AAEscapeChar node)
    {
        defaultIn(node);
    }

    public void outAAEscapeChar(AAEscapeChar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAEscapeChar(AAEscapeChar node)
    {
        inAAEscapeChar(node);
        if(node.getEscapeAlarm() != null)
        {
            node.getEscapeAlarm().apply(this);
        }
        outAAEscapeChar(node);
    }

    public void inABEscapeChar(ABEscapeChar node)
    {
        defaultIn(node);
    }

    public void outABEscapeChar(ABEscapeChar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABEscapeChar(ABEscapeChar node)
    {
        inABEscapeChar(node);
        if(node.getEscapeBackspace() != null)
        {
            node.getEscapeBackspace().apply(this);
        }
        outABEscapeChar(node);
    }

    public void inAFEscapeChar(AFEscapeChar node)
    {
        defaultIn(node);
    }

    public void outAFEscapeChar(AFEscapeChar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFEscapeChar(AFEscapeChar node)
    {
        inAFEscapeChar(node);
        if(node.getEscapeFormfeed() != null)
        {
            node.getEscapeFormfeed().apply(this);
        }
        outAFEscapeChar(node);
    }

    public void inAREscapeChar(AREscapeChar node)
    {
        defaultIn(node);
    }

    public void outAREscapeChar(AREscapeChar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAREscapeChar(AREscapeChar node)
    {
        inAREscapeChar(node);
        if(node.getEscapeCarriageReturn() != null)
        {
            node.getEscapeCarriageReturn().apply(this);
        }
        outAREscapeChar(node);
    }

    public void inANEscapeChar(ANEscapeChar node)
    {
        defaultIn(node);
    }

    public void outANEscapeChar(ANEscapeChar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANEscapeChar(ANEscapeChar node)
    {
        inANEscapeChar(node);
        if(node.getEscapeNewline() != null)
        {
            node.getEscapeNewline().apply(this);
        }
        outANEscapeChar(node);
    }

    public void inATEscapeChar(ATEscapeChar node)
    {
        defaultIn(node);
    }

    public void outATEscapeChar(ATEscapeChar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATEscapeChar(ATEscapeChar node)
    {
        inATEscapeChar(node);
        if(node.getEscapeTab() != null)
        {
            node.getEscapeTab().apply(this);
        }
        outATEscapeChar(node);
    }

    public void inAVEscapeChar(AVEscapeChar node)
    {
        defaultIn(node);
    }

    public void outAVEscapeChar(AVEscapeChar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVEscapeChar(AVEscapeChar node)
    {
        inAVEscapeChar(node);
        if(node.getEscapeVerticalTab() != null)
        {
            node.getEscapeVerticalTab().apply(this);
        }
        outAVEscapeChar(node);
    }

    public void inASlashEscapeChar(ASlashEscapeChar node)
    {
        defaultIn(node);
    }

    public void outASlashEscapeChar(ASlashEscapeChar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASlashEscapeChar(ASlashEscapeChar node)
    {
        inASlashEscapeChar(node);
        if(node.getEscapeBackslash() != null)
        {
            node.getEscapeBackslash().apply(this);
        }
        outASlashEscapeChar(node);
    }

    public void inASingleEscapeChar(ASingleEscapeChar node)
    {
        defaultIn(node);
    }

    public void outASingleEscapeChar(ASingleEscapeChar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASingleEscapeChar(ASingleEscapeChar node)
    {
        inASingleEscapeChar(node);
        if(node.getEscapeSingleQuote() != null)
        {
            node.getEscapeSingleQuote().apply(this);
        }
        outASingleEscapeChar(node);
    }

    public void inADoubleEscapeChar(ADoubleEscapeChar node)
    {
        defaultIn(node);
    }

    public void outADoubleEscapeChar(ADoubleEscapeChar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADoubleEscapeChar(ADoubleEscapeChar node)
    {
        inADoubleEscapeChar(node);
        if(node.getEscapeDoubleQuote() != null)
        {
            node.getEscapeDoubleQuote().apply(this);
        }
        outADoubleEscapeChar(node);
    }

    public void inAQuestionEscapeChar(AQuestionEscapeChar node)
    {
        defaultIn(node);
    }

    public void outAQuestionEscapeChar(AQuestionEscapeChar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAQuestionEscapeChar(AQuestionEscapeChar node)
    {
        inAQuestionEscapeChar(node);
        if(node.getEscapeQuestionMark() != null)
        {
            node.getEscapeQuestionMark().apply(this);
        }
        outAQuestionEscapeChar(node);
    }

    public void inAOctalEscapeChar(AOctalEscapeChar node)
    {
        defaultIn(node);
    }

    public void outAOctalEscapeChar(AOctalEscapeChar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOctalEscapeChar(AOctalEscapeChar node)
    {
        inAOctalEscapeChar(node);
        if(node.getEscapeOctalChar() != null)
        {
            node.getEscapeOctalChar().apply(this);
        }
        outAOctalEscapeChar(node);
    }

    public void inAHexEscapeChar(AHexEscapeChar node)
    {
        defaultIn(node);
    }

    public void outAHexEscapeChar(AHexEscapeChar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAHexEscapeChar(AHexEscapeChar node)
    {
        inAHexEscapeChar(node);
        if(node.getEscapeHexChar() != null)
        {
            node.getEscapeHexChar().apply(this);
        }
        outAHexEscapeChar(node);
    }

    public void inAUnicodeEscapeChar(AUnicodeEscapeChar node)
    {
        defaultIn(node);
    }

    public void outAUnicodeEscapeChar(AUnicodeEscapeChar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUnicodeEscapeChar(AUnicodeEscapeChar node)
    {
        inAUnicodeEscapeChar(node);
        if(node.getEscapeUnicodeChar() != null)
        {
            node.getEscapeUnicodeChar().apply(this);
        }
        outAUnicodeEscapeChar(node);
    }

    public void inADefaultEscapeChar(ADefaultEscapeChar node)
    {
        defaultIn(node);
    }

    public void outADefaultEscapeChar(ADefaultEscapeChar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADefaultEscapeChar(ADefaultEscapeChar node)
    {
        inADefaultEscapeChar(node);
        if(node.getEscapeDefault() != null)
        {
            node.getEscapeDefault().apply(this);
        }
        outADefaultEscapeChar(node);
    }

    public void inABranch(ABranch node)
    {
        defaultIn(node);
    }

    public void outABranch(ABranch node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABranch(ABranch node)
    {
        inABranch(node);
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        if(node.getCond() != null)
        {
            node.getCond().apply(this);
        }
        if(node.getTernaryQuestionMark() != null)
        {
            node.getTernaryQuestionMark().apply(this);
        }
        if(node.getIf() != null)
        {
            node.getIf().apply(this);
        }
        if(node.getTernaryColon() != null)
        {
            node.getTernaryColon().apply(this);
        }
        if(node.getElse() != null)
        {
            node.getElse().apply(this);
        }
        outABranch(node);
    }

    public void inACond(ACond node)
    {
        defaultIn(node);
    }

    public void outACond(ACond node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACond(ACond node)
    {
        inACond(node);
        if(node.getFunc() != null)
        {
            node.getFunc().apply(this);
        }
        outACond(node);
    }

    public void inAIf(AIf node)
    {
        defaultIn(node);
    }

    public void outAIf(AIf node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIf(AIf node)
    {
        inAIf(node);
        if(node.getFunc() != null)
        {
            node.getFunc().apply(this);
        }
        outAIf(node);
    }

    public void inAElse(AElse node)
    {
        defaultIn(node);
    }

    public void outAElse(AElse node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAElse(AElse node)
    {
        inAElse(node);
        if(node.getFunc() != null)
        {
            node.getFunc().apply(this);
        }
        outAElse(node);
    }

    public void inAFullList(AFullList node)
    {
        defaultIn(node);
    }

    public void outAFullList(AFullList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFullList(AFullList node)
    {
        inAFullList(node);
        if(node.getStartList() != null)
        {
            node.getStartList().apply(this);
        }
        if(node.getArgs() != null)
        {
            node.getArgs().apply(this);
        }
        if(node.getEndList() != null)
        {
            node.getEndList().apply(this);
        }
        outAFullList(node);
    }

    public void inAEmptyList(AEmptyList node)
    {
        defaultIn(node);
    }

    public void outAEmptyList(AEmptyList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEmptyList(AEmptyList node)
    {
        inAEmptyList(node);
        if(node.getStartList() != null)
        {
            node.getStartList().apply(this);
        }
        if(node.getEndList() != null)
        {
            node.getEndList().apply(this);
        }
        outAEmptyList(node);
    }
}

/* This file was generated by SableCC (http://www.sablecc.org/). */

package wolf.node;

import wolf.analysis.*;

@SuppressWarnings("nls")
public final class ALambda extends PLambda
{
    private TLambdaStart _lambdaStart_;
    private TLParen _lParen_;
    private PSig _sig_;
    private TLambdaArrow _lambdaArrow_;
    private PFunction _function_;
    private TRParen _rParen_;

    public ALambda()
    {
        // Constructor
    }

    public ALambda(
        @SuppressWarnings("hiding") TLambdaStart _lambdaStart_,
        @SuppressWarnings("hiding") TLParen _lParen_,
        @SuppressWarnings("hiding") PSig _sig_,
        @SuppressWarnings("hiding") TLambdaArrow _lambdaArrow_,
        @SuppressWarnings("hiding") PFunction _function_,
        @SuppressWarnings("hiding") TRParen _rParen_)
    {
        // Constructor
        setLambdaStart(_lambdaStart_);

        setLParen(_lParen_);

        setSig(_sig_);

        setLambdaArrow(_lambdaArrow_);

        setFunction(_function_);

        setRParen(_rParen_);

    }

    @Override
    public Object clone()
    {
        return new ALambda(
            cloneNode(this._lambdaStart_),
            cloneNode(this._lParen_),
            cloneNode(this._sig_),
            cloneNode(this._lambdaArrow_),
            cloneNode(this._function_),
            cloneNode(this._rParen_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseALambda(this);
    }

    public TLambdaStart getLambdaStart()
    {
        return this._lambdaStart_;
    }

    public void setLambdaStart(TLambdaStart node)
    {
        if(this._lambdaStart_ != null)
        {
            this._lambdaStart_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lambdaStart_ = node;
    }

    public TLParen getLParen()
    {
        return this._lParen_;
    }

    public void setLParen(TLParen node)
    {
        if(this._lParen_ != null)
        {
            this._lParen_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lParen_ = node;
    }

    public PSig getSig()
    {
        return this._sig_;
    }

    public void setSig(PSig node)
    {
        if(this._sig_ != null)
        {
            this._sig_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._sig_ = node;
    }

    public TLambdaArrow getLambdaArrow()
    {
        return this._lambdaArrow_;
    }

    public void setLambdaArrow(TLambdaArrow node)
    {
        if(this._lambdaArrow_ != null)
        {
            this._lambdaArrow_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lambdaArrow_ = node;
    }

    public PFunction getFunction()
    {
        return this._function_;
    }

    public void setFunction(PFunction node)
    {
        if(this._function_ != null)
        {
            this._function_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._function_ = node;
    }

    public TRParen getRParen()
    {
        return this._rParen_;
    }

    public void setRParen(TRParen node)
    {
        if(this._rParen_ != null)
        {
            this._rParen_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rParen_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._lambdaStart_)
            + toString(this._lParen_)
            + toString(this._sig_)
            + toString(this._lambdaArrow_)
            + toString(this._function_)
            + toString(this._rParen_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._lambdaStart_ == child)
        {
            this._lambdaStart_ = null;
            return;
        }

        if(this._lParen_ == child)
        {
            this._lParen_ = null;
            return;
        }

        if(this._sig_ == child)
        {
            this._sig_ = null;
            return;
        }

        if(this._lambdaArrow_ == child)
        {
            this._lambdaArrow_ = null;
            return;
        }

        if(this._function_ == child)
        {
            this._function_ = null;
            return;
        }

        if(this._rParen_ == child)
        {
            this._rParen_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._lambdaStart_ == oldChild)
        {
            setLambdaStart((TLambdaStart) newChild);
            return;
        }

        if(this._lParen_ == oldChild)
        {
            setLParen((TLParen) newChild);
            return;
        }

        if(this._sig_ == oldChild)
        {
            setSig((PSig) newChild);
            return;
        }

        if(this._lambdaArrow_ == oldChild)
        {
            setLambdaArrow((TLambdaArrow) newChild);
            return;
        }

        if(this._function_ == oldChild)
        {
            setFunction((PFunction) newChild);
            return;
        }

        if(this._rParen_ == oldChild)
        {
            setRParen((TRParen) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}

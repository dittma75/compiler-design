/* This file was generated by SableCC (http://www.sablecc.org/). */

package wolf.node;

import wolf.analysis.*;

@SuppressWarnings("nls")
public final class AFoldrFunction extends PFunction
{
    private TFoldr _foldr_;
    private PFoldBody _foldBody_;

    public AFoldrFunction()
    {
        // Constructor
    }

    public AFoldrFunction(
        @SuppressWarnings("hiding") TFoldr _foldr_,
        @SuppressWarnings("hiding") PFoldBody _foldBody_)
    {
        // Constructor
        setFoldr(_foldr_);

        setFoldBody(_foldBody_);

    }

    @Override
    public Object clone()
    {
        return new AFoldrFunction(
            cloneNode(this._foldr_),
            cloneNode(this._foldBody_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAFoldrFunction(this);
    }

    public TFoldr getFoldr()
    {
        return this._foldr_;
    }

    public void setFoldr(TFoldr node)
    {
        if(this._foldr_ != null)
        {
            this._foldr_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._foldr_ = node;
    }

    public PFoldBody getFoldBody()
    {
        return this._foldBody_;
    }

    public void setFoldBody(PFoldBody node)
    {
        if(this._foldBody_ != null)
        {
            this._foldBody_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._foldBody_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._foldr_)
            + toString(this._foldBody_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._foldr_ == child)
        {
            this._foldr_ = null;
            return;
        }

        if(this._foldBody_ == child)
        {
            this._foldBody_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._foldr_ == oldChild)
        {
            setFoldr((TFoldr) newChild);
            return;
        }

        if(this._foldBody_ == oldChild)
        {
            setFoldBody((PFoldBody) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}

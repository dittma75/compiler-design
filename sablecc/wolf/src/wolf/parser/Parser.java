/* This file was generated by SableCC (http://www.sablecc.org/). */

package wolf.parser;

import wolf.lexer.*;
import wolf.node.*;
import wolf.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    protected void filter() throws ParserException, LexerException, IOException
    {
        // Empty body
    }

    private void push(int numstate, ArrayList<Object> listNode, boolean hidden) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!hidden)
        {
            filter();
        }

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null, true);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list, false);
                    }
		    break;
                case REDUCE:
                    {
                        int reduction = this.action[1];
                        if(reduction < 500) reduce_0(reduction);
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PProgram node1 = (PProgram) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }

    private void reduce_0(int reduction) throws IOException, LexerException, ParserException
    {
        switch(reduction)
        {
            case 0: /* reduce AUserDefsProgram */
            {
                ArrayList<Object> list = new0();
                push(goTo(0), list, false);
            }
            break;
            case 1: /* reduce ANoDefsProgram */
            {
                ArrayList<Object> list = new1();
                push(goTo(0), list, false);
            }
            break;
            case 2: /* reduce AMultipleDefsDefList */
            {
                ArrayList<Object> list = new2();
                push(goTo(1), list, false);
            }
            break;
            case 3: /* reduce AOneDefDefList */
            {
                ArrayList<Object> list = new3();
                push(goTo(1), list, false);
            }
            break;
            case 4: /* reduce ADefHeader */
            {
                ArrayList<Object> list = new4();
                push(goTo(2), list, false);
            }
            break;
            case 5: /* reduce AEmptySig */
            {
                ArrayList<Object> list = new5();
                push(goTo(3), list, false);
            }
            break;
            case 6: /* reduce AArgumentsSig */
            {
                ArrayList<Object> list = new6();
                push(goTo(3), list, false);
            }
            break;
            case 7: /* reduce AMoreIdsSigArgs */
            {
                ArrayList<Object> list = new7();
                push(goTo(4), list, false);
            }
            break;
            case 8: /* reduce ALastIdSigArgs */
            {
                ArrayList<Object> list = new8();
                push(goTo(4), list, false);
            }
            break;
            case 9: /* reduce ASigArgRest */
            {
                ArrayList<Object> list = new9();
                push(goTo(5), list, false);
            }
            break;
            case 10: /* reduce AUserDefinedFunction */
            {
                ArrayList<Object> list = new10();
                push(goTo(6), list, false);
            }
            break;
            case 11: /* reduce AUnaryNativeFunction */
            {
                ArrayList<Object> list = new11();
                push(goTo(6), list, false);
            }
            break;
            case 12: /* reduce ABinNativeFunction */
            {
                ArrayList<Object> list = new12();
                push(goTo(6), list, false);
            }
            break;
            case 13: /* reduce AIfElseFunction */
            {
                ArrayList<Object> list = new13();
                push(goTo(6), list, false);
            }
            break;
            case 14: /* reduce AFoldlFunction */
            {
                ArrayList<Object> list = new14();
                push(goTo(6), list, false);
            }
            break;
            case 15: /* reduce AFoldrFunction */
            {
                ArrayList<Object> list = new15();
                push(goTo(6), list, false);
            }
            break;
            case 16: /* reduce AMapFunction */
            {
                ArrayList<Object> list = new16();
                push(goTo(6), list, false);
            }
            break;
            case 17: /* reduce ALambda */
            {
                ArrayList<Object> list = new17();
                push(goTo(7), list, false);
            }
            break;
            case 18: /* reduce AFoldBody */
            {
                ArrayList<Object> list = new18();
                push(goTo(8), list, false);
            }
            break;
            case 19: /* reduce ALiteralListArgument */
            {
                ArrayList<Object> list = new19();
                push(goTo(9), list, false);
            }
            break;
            case 20: /* reduce AUserDefinedListArgument */
            {
                ArrayList<Object> list = new20();
                push(goTo(9), list, false);
            }
            break;
            case 21: /* reduce AReturnedListListArgument */
            {
                ArrayList<Object> list = new21();
                push(goTo(9), list, false);
            }
            break;
            case 22: /* reduce ANativeBinOp */
            {
                ArrayList<Object> list = new22();
                push(goTo(10), list, false);
            }
            break;
            case 23: /* reduce AUserDefinedBinOp */
            {
                ArrayList<Object> list = new23();
                push(goTo(10), list, false);
            }
            break;
            case 24: /* reduce ALambdaBinOp */
            {
                ArrayList<Object> list = new24();
                push(goTo(10), list, false);
            }
            break;
            case 25: /* reduce APlusNativeBinOp */
            {
                ArrayList<Object> list = new25();
                push(goTo(11), list, false);
            }
            break;
            case 26: /* reduce AMinusNativeBinOp */
            {
                ArrayList<Object> list = new26();
                push(goTo(11), list, false);
            }
            break;
            case 27: /* reduce AMultNativeBinOp */
            {
                ArrayList<Object> list = new27();
                push(goTo(11), list, false);
            }
            break;
            case 28: /* reduce ADivNativeBinOp */
            {
                ArrayList<Object> list = new28();
                push(goTo(11), list, false);
            }
            break;
            case 29: /* reduce AModNativeBinOp */
            {
                ArrayList<Object> list = new29();
                push(goTo(11), list, false);
            }
            break;
            case 30: /* reduce ALessNativeBinOp */
            {
                ArrayList<Object> list = new30();
                push(goTo(11), list, false);
            }
            break;
            case 31: /* reduce AGreaterNativeBinOp */
            {
                ArrayList<Object> list = new31();
                push(goTo(11), list, false);
            }
            break;
            case 32: /* reduce ALessEqualNativeBinOp */
            {
                ArrayList<Object> list = new32();
                push(goTo(11), list, false);
            }
            break;
            case 33: /* reduce AGreaterEqualNativeBinOp */
            {
                ArrayList<Object> list = new33();
                push(goTo(11), list, false);
            }
            break;
            case 34: /* reduce AEqualNativeBinOp */
            {
                ArrayList<Object> list = new34();
                push(goTo(11), list, false);
            }
            break;
            case 35: /* reduce ANotEqualNativeBinOp */
            {
                ArrayList<Object> list = new35();
                push(goTo(11), list, false);
            }
            break;
            case 36: /* reduce AAndNativeBinOp */
            {
                ArrayList<Object> list = new36();
                push(goTo(11), list, false);
            }
            break;
            case 37: /* reduce AOrNativeBinOp */
            {
                ArrayList<Object> list = new37();
                push(goTo(11), list, false);
            }
            break;
            case 38: /* reduce AXorNativeBinOp */
            {
                ArrayList<Object> list = new38();
                push(goTo(11), list, false);
            }
            break;
            case 39: /* reduce AAppendNativeBinOp */
            {
                ArrayList<Object> list = new39();
                push(goTo(11), list, false);
            }
            break;
            case 40: /* reduce APrependNativeBinOp */
            {
                ArrayList<Object> list = new40();
                push(goTo(11), list, false);
            }
            break;
            case 41: /* reduce ANativeUnaryOp */
            {
                ArrayList<Object> list = new41();
                push(goTo(12), list, false);
            }
            break;
            case 42: /* reduce AUserDefinedUnaryOp */
            {
                ArrayList<Object> list = new42();
                push(goTo(12), list, false);
            }
            break;
            case 43: /* reduce ALambdaUnaryOp */
            {
                ArrayList<Object> list = new43();
                push(goTo(12), list, false);
            }
            break;
            case 44: /* reduce AArithmeticNotNativeUnaryOp */
            {
                ArrayList<Object> list = new44();
                push(goTo(13), list, false);
            }
            break;
            case 45: /* reduce ALogicalNotNativeUnaryOp */
            {
                ArrayList<Object> list = new45();
                push(goTo(13), list, false);
            }
            break;
            case 46: /* reduce AHeadNativeUnaryOp */
            {
                ArrayList<Object> list = new46();
                push(goTo(13), list, false);
            }
            break;
            case 47: /* reduce ATailNativeUnaryOp */
            {
                ArrayList<Object> list = new47();
                push(goTo(13), list, false);
            }
            break;
            case 48: /* reduce AReverseNativeUnaryOp */
            {
                ArrayList<Object> list = new48();
                push(goTo(13), list, false);
            }
            break;
            case 49: /* reduce AFlattenNativeUnaryOp */
            {
                ArrayList<Object> list = new49();
                push(goTo(13), list, false);
            }
            break;
            case 50: /* reduce AIdentityNativeUnaryOp */
            {
                ArrayList<Object> list = new50();
                push(goTo(13), list, false);
            }
            break;
            case 51: /* reduce APrintNativeUnaryOp */
            {
                ArrayList<Object> list = new51();
                push(goTo(13), list, false);
            }
            break;
            case 52: /* reduce ALengthNativeUnaryOp */
            {
                ArrayList<Object> list = new52();
                push(goTo(13), list, false);
            }
            break;
            case 53: /* reduce AUserDefinedUserFunc */
            {
                ArrayList<Object> list = new53();
                push(goTo(14), list, false);
            }
            break;
            case 54: /* reduce ALambdaUserFunc */
            {
                ArrayList<Object> list = new54();
                push(goTo(14), list, false);
            }
            break;
            case 55: /* reduce ANoArgsArgList */
            {
                ArrayList<Object> list = new55();
                push(goTo(15), list, false);
            }
            break;
            case 56: /* reduce AHasArgsArgList */
            {
                ArrayList<Object> list = new56();
                push(goTo(15), list, false);
            }
            break;
            case 57: /* reduce AMoreArgsArgs */
            {
                ArrayList<Object> list = new57();
                push(goTo(16), list, false);
            }
            break;
            case 58: /* reduce ALastArgArgs */
            {
                ArrayList<Object> list = new58();
                push(goTo(16), list, false);
            }
            break;
            case 59: /* reduce AArgRest */
            {
                ArrayList<Object> list = new59();
                push(goTo(17), list, false);
            }
            break;
            case 60: /* reduce AFunctionArg */
            {
                ArrayList<Object> list = new60();
                push(goTo(18), list, false);
            }
            break;
            case 61: /* reduce AListArg */
            {
                ArrayList<Object> list = new61();
                push(goTo(18), list, false);
            }
            break;
            case 62: /* reduce AIntArg */
            {
                ArrayList<Object> list = new62();
                push(goTo(18), list, false);
            }
            break;
            case 63: /* reduce AFloatArg */
            {
                ArrayList<Object> list = new63();
                push(goTo(18), list, false);
            }
            break;
            case 64: /* reduce AIdentifierArg */
            {
                ArrayList<Object> list = new64();
                push(goTo(18), list, false);
            }
            break;
            case 65: /* reduce AStringArg */
            {
                ArrayList<Object> list = new65();
                push(goTo(18), list, false);
            }
            break;
            case 66: /* reduce AEmptyStringString */
            {
                ArrayList<Object> list = new66();
                push(goTo(19), list, false);
            }
            break;
            case 67: /* reduce AStringString */
            {
                ArrayList<Object> list = new67();
                push(goTo(19), list, false);
            }
            break;
            case 68: /* reduce AMoreBodyStringMiddle */
            {
                ArrayList<Object> list = new68();
                push(goTo(20), list, false);
            }
            break;
            case 69: /* reduce ALastBodyStringMiddle */
            {
                ArrayList<Object> list = new69();
                push(goTo(20), list, false);
            }
            break;
            case 70: /* reduce AMoreEscapeStringMiddle */
            {
                ArrayList<Object> list = new70();
                push(goTo(20), list, false);
            }
            break;
            case 71: /* reduce ALastEscapeStringMiddle */
            {
                ArrayList<Object> list = new71();
                push(goTo(20), list, false);
            }
            break;
            case 72: /* reduce AStringEscapeSeq */
            {
                ArrayList<Object> list = new72();
                push(goTo(21), list, false);
            }
            break;
            case 73: /* reduce AAlarmEscapeChar */
            {
                ArrayList<Object> list = new73();
                push(goTo(22), list, false);
            }
            break;
            case 74: /* reduce ABackspaceEscapeChar */
            {
                ArrayList<Object> list = new74();
                push(goTo(22), list, false);
            }
            break;
            case 75: /* reduce AFormfeedEscapeChar */
            {
                ArrayList<Object> list = new75();
                push(goTo(22), list, false);
            }
            break;
            case 76: /* reduce ACrEscapeChar */
            {
                ArrayList<Object> list = new76();
                push(goTo(22), list, false);
            }
            break;
            case 77: /* reduce ANewlineEscapeChar */
            {
                ArrayList<Object> list = new77();
                push(goTo(22), list, false);
            }
            break;
            case 78: /* reduce ATabEscapeChar */
            {
                ArrayList<Object> list = new78();
                push(goTo(22), list, false);
            }
            break;
            case 79: /* reduce AVerticalTabEscapeChar */
            {
                ArrayList<Object> list = new79();
                push(goTo(22), list, false);
            }
            break;
            case 80: /* reduce ABackslashEscapeChar */
            {
                ArrayList<Object> list = new80();
                push(goTo(22), list, false);
            }
            break;
            case 81: /* reduce ASingleQuoteEscapeChar */
            {
                ArrayList<Object> list = new81();
                push(goTo(22), list, false);
            }
            break;
            case 82: /* reduce ADoubleQuoteEscapeChar */
            {
                ArrayList<Object> list = new82();
                push(goTo(22), list, false);
            }
            break;
            case 83: /* reduce AQuestionMarkEscapeChar */
            {
                ArrayList<Object> list = new83();
                push(goTo(22), list, false);
            }
            break;
            case 84: /* reduce AOctalEscapeChar */
            {
                ArrayList<Object> list = new84();
                push(goTo(22), list, false);
            }
            break;
            case 85: /* reduce AHexEscapeChar */
            {
                ArrayList<Object> list = new85();
                push(goTo(22), list, false);
            }
            break;
            case 86: /* reduce AUnicodeEscapeChar */
            {
                ArrayList<Object> list = new86();
                push(goTo(22), list, false);
            }
            break;
            case 87: /* reduce ADefaultEscapeChar */
            {
                ArrayList<Object> list = new87();
                push(goTo(22), list, false);
            }
            break;
            case 88: /* reduce ABranch */
            {
                ArrayList<Object> list = new88();
                push(goTo(23), list, false);
            }
            break;
            case 89: /* reduce AEmptyListList */
            {
                ArrayList<Object> list = new89();
                push(goTo(24), list, false);
            }
            break;
            case 90: /* reduce AListList */
            {
                ArrayList<Object> list = new90();
                push(goTo(24), list, false);
            }
            break;
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce AUserDefsProgram */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProgram pprogramNode1;
        {
            // Block
        PDefList pdeflistNode2;
        PFunction pfunctionNode3;
        pdeflistNode2 = (PDefList)nodeArrayList1.get(0);
        pfunctionNode3 = (PFunction)nodeArrayList2.get(0);

        pprogramNode1 = new AUserDefsProgram(pdeflistNode2, pfunctionNode3);
        }
	nodeList.add(pprogramNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce ANoDefsProgram */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProgram pprogramNode1;
        {
            // Block
        PFunction pfunctionNode2;
        pfunctionNode2 = (PFunction)nodeArrayList1.get(0);

        pprogramNode1 = new ANoDefsProgram(pfunctionNode2);
        }
	nodeList.add(pprogramNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce AMultipleDefsDefList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDefList pdeflistNode1;
        {
            // Block
        PDefList pdeflistNode2;
        PDefHeader pdefheaderNode3;
        pdeflistNode2 = (PDefList)nodeArrayList1.get(0);
        pdefheaderNode3 = (PDefHeader)nodeArrayList2.get(0);

        pdeflistNode1 = new AMultipleDefsDefList(pdeflistNode2, pdefheaderNode3);
        }
	nodeList.add(pdeflistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce AOneDefDefList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDefList pdeflistNode1;
        {
            // Block
        PDefHeader pdefheaderNode2;
        pdefheaderNode2 = (PDefHeader)nodeArrayList1.get(0);

        pdeflistNode1 = new AOneDefDefList(pdefheaderNode2);
        }
	nodeList.add(pdeflistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce ADefHeader */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDefHeader pdefheaderNode1;
        {
            // Block
        TDef tdefNode2;
        TIdentifier tidentifierNode3;
        PSig psigNode4;
        TAssign tassignNode5;
        PFunction pfunctionNode6;
        tdefNode2 = (TDef)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);
        psigNode4 = (PSig)nodeArrayList3.get(0);
        tassignNode5 = (TAssign)nodeArrayList4.get(0);
        pfunctionNode6 = (PFunction)nodeArrayList5.get(0);

        pdefheaderNode1 = new ADefHeader(tdefNode2, tidentifierNode3, psigNode4, tassignNode5, pfunctionNode6);
        }
	nodeList.add(pdefheaderNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce AEmptySig */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSig psigNode1;
        {
            // Block
        TLParen tlparenNode2;
        TRParen trparenNode3;
        tlparenNode2 = (TLParen)nodeArrayList1.get(0);
        trparenNode3 = (TRParen)nodeArrayList2.get(0);

        psigNode1 = new AEmptySig(tlparenNode2, trparenNode3);
        }
	nodeList.add(psigNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce AArgumentsSig */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSig psigNode1;
        {
            // Block
        TLParen tlparenNode2;
        PSigArgs psigargsNode3;
        TRParen trparenNode4;
        tlparenNode2 = (TLParen)nodeArrayList1.get(0);
        psigargsNode3 = (PSigArgs)nodeArrayList2.get(0);
        trparenNode4 = (TRParen)nodeArrayList3.get(0);

        psigNode1 = new AArgumentsSig(tlparenNode2, psigargsNode3, trparenNode4);
        }
	nodeList.add(psigNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce AMoreIdsSigArgs */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSigArgs psigargsNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        PSigArgRest psigargrestNode3;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        psigargrestNode3 = (PSigArgRest)nodeArrayList2.get(0);

        psigargsNode1 = new AMoreIdsSigArgs(tidentifierNode2, psigargrestNode3);
        }
	nodeList.add(psigargsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce ALastIdSigArgs */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSigArgs psigargsNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);

        psigargsNode1 = new ALastIdSigArgs(tidentifierNode2);
        }
	nodeList.add(psigargsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce ASigArgRest */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSigArgRest psigargrestNode1;
        {
            // Block
        TComma tcommaNode2;
        PSigArgs psigargsNode3;
        tcommaNode2 = (TComma)nodeArrayList1.get(0);
        psigargsNode3 = (PSigArgs)nodeArrayList2.get(0);

        psigargrestNode1 = new ASigArgRest(tcommaNode2, psigargsNode3);
        }
	nodeList.add(psigargrestNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce AUserDefinedFunction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFunction pfunctionNode1;
        {
            // Block
        PUserFunc puserfuncNode2;
        PArgList parglistNode3;
        puserfuncNode2 = (PUserFunc)nodeArrayList1.get(0);
        parglistNode3 = (PArgList)nodeArrayList2.get(0);

        pfunctionNode1 = new AUserDefinedFunction(puserfuncNode2, parglistNode3);
        }
	nodeList.add(pfunctionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce AUnaryNativeFunction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFunction pfunctionNode1;
        {
            // Block
        PNativeUnaryOp pnativeunaryopNode2;
        TLParen tlparenNode3;
        PArg pargNode4;
        TRParen trparenNode5;
        pnativeunaryopNode2 = (PNativeUnaryOp)nodeArrayList1.get(0);
        tlparenNode3 = (TLParen)nodeArrayList2.get(0);
        pargNode4 = (PArg)nodeArrayList3.get(0);
        trparenNode5 = (TRParen)nodeArrayList4.get(0);

        pfunctionNode1 = new AUnaryNativeFunction(pnativeunaryopNode2, tlparenNode3, pargNode4, trparenNode5);
        }
	nodeList.add(pfunctionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce ABinNativeFunction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFunction pfunctionNode1;
        {
            // Block
        PNativeBinOp pnativebinopNode2;
        TLParen tlparenNode3;
        PArg pargNode4;
        TComma tcommaNode5;
        PArg pargNode6;
        TRParen trparenNode7;
        pnativebinopNode2 = (PNativeBinOp)nodeArrayList1.get(0);
        tlparenNode3 = (TLParen)nodeArrayList2.get(0);
        pargNode4 = (PArg)nodeArrayList3.get(0);
        tcommaNode5 = (TComma)nodeArrayList4.get(0);
        pargNode6 = (PArg)nodeArrayList5.get(0);
        trparenNode7 = (TRParen)nodeArrayList6.get(0);

        pfunctionNode1 = new ABinNativeFunction(pnativebinopNode2, tlparenNode3, pargNode4, tcommaNode5, pargNode6, trparenNode7);
        }
	nodeList.add(pfunctionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce AIfElseFunction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFunction pfunctionNode1;
        {
            // Block
        PBranch pbranchNode2;
        pbranchNode2 = (PBranch)nodeArrayList1.get(0);

        pfunctionNode1 = new AIfElseFunction(pbranchNode2);
        }
	nodeList.add(pfunctionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce AFoldlFunction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFunction pfunctionNode1;
        {
            // Block
        TFoldl tfoldlNode2;
        PFoldBody pfoldbodyNode3;
        tfoldlNode2 = (TFoldl)nodeArrayList1.get(0);
        pfoldbodyNode3 = (PFoldBody)nodeArrayList2.get(0);

        pfunctionNode1 = new AFoldlFunction(tfoldlNode2, pfoldbodyNode3);
        }
	nodeList.add(pfunctionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce AFoldrFunction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFunction pfunctionNode1;
        {
            // Block
        TFoldr tfoldrNode2;
        PFoldBody pfoldbodyNode3;
        tfoldrNode2 = (TFoldr)nodeArrayList1.get(0);
        pfoldbodyNode3 = (PFoldBody)nodeArrayList2.get(0);

        pfunctionNode1 = new AFoldrFunction(tfoldrNode2, pfoldbodyNode3);
        }
	nodeList.add(pfunctionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce AMapFunction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFunction pfunctionNode1;
        {
            // Block
        TMap tmapNode2;
        TLParen tlparenNode3;
        PUnaryOp punaryopNode4;
        TComma tcommaNode5;
        PListArgument plistargumentNode6;
        TRParen trparenNode7;
        tmapNode2 = (TMap)nodeArrayList1.get(0);
        tlparenNode3 = (TLParen)nodeArrayList2.get(0);
        punaryopNode4 = (PUnaryOp)nodeArrayList3.get(0);
        tcommaNode5 = (TComma)nodeArrayList4.get(0);
        plistargumentNode6 = (PListArgument)nodeArrayList5.get(0);
        trparenNode7 = (TRParen)nodeArrayList6.get(0);

        pfunctionNode1 = new AMapFunction(tmapNode2, tlparenNode3, punaryopNode4, tcommaNode5, plistargumentNode6, trparenNode7);
        }
	nodeList.add(pfunctionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new17() /* reduce ALambda */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLambda plambdaNode1;
        {
            // Block
        TLambdaStart tlambdastartNode2;
        TLParen tlparenNode3;
        PSig psigNode4;
        TLambdaArrow tlambdaarrowNode5;
        PFunction pfunctionNode6;
        TRParen trparenNode7;
        tlambdastartNode2 = (TLambdaStart)nodeArrayList1.get(0);
        tlparenNode3 = (TLParen)nodeArrayList2.get(0);
        psigNode4 = (PSig)nodeArrayList3.get(0);
        tlambdaarrowNode5 = (TLambdaArrow)nodeArrayList4.get(0);
        pfunctionNode6 = (PFunction)nodeArrayList5.get(0);
        trparenNode7 = (TRParen)nodeArrayList6.get(0);

        plambdaNode1 = new ALambda(tlambdastartNode2, tlparenNode3, psigNode4, tlambdaarrowNode5, pfunctionNode6, trparenNode7);
        }
	nodeList.add(plambdaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new18() /* reduce AFoldBody */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFoldBody pfoldbodyNode1;
        {
            // Block
        TLParen tlparenNode2;
        PBinOp pbinopNode3;
        TComma tcommaNode4;
        PListArgument plistargumentNode5;
        TRParen trparenNode6;
        tlparenNode2 = (TLParen)nodeArrayList1.get(0);
        pbinopNode3 = (PBinOp)nodeArrayList2.get(0);
        tcommaNode4 = (TComma)nodeArrayList3.get(0);
        plistargumentNode5 = (PListArgument)nodeArrayList4.get(0);
        trparenNode6 = (TRParen)nodeArrayList5.get(0);

        pfoldbodyNode1 = new AFoldBody(tlparenNode2, pbinopNode3, tcommaNode4, plistargumentNode5, trparenNode6);
        }
	nodeList.add(pfoldbodyNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new19() /* reduce ALiteralListArgument */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PListArgument plistargumentNode1;
        {
            // Block
        PList plistNode2;
        plistNode2 = (PList)nodeArrayList1.get(0);

        plistargumentNode1 = new ALiteralListArgument(plistNode2);
        }
	nodeList.add(plistargumentNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new20() /* reduce AUserDefinedListArgument */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PListArgument plistargumentNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);

        plistargumentNode1 = new AUserDefinedListArgument(tidentifierNode2);
        }
	nodeList.add(plistargumentNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new21() /* reduce AReturnedListListArgument */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PListArgument plistargumentNode1;
        {
            // Block
        PFunction pfunctionNode2;
        pfunctionNode2 = (PFunction)nodeArrayList1.get(0);

        plistargumentNode1 = new AReturnedListListArgument(pfunctionNode2);
        }
	nodeList.add(plistargumentNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new22() /* reduce ANativeBinOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBinOp pbinopNode1;
        {
            // Block
        PNativeBinOp pnativebinopNode2;
        pnativebinopNode2 = (PNativeBinOp)nodeArrayList1.get(0);

        pbinopNode1 = new ANativeBinOp(pnativebinopNode2);
        }
	nodeList.add(pbinopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new23() /* reduce AUserDefinedBinOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBinOp pbinopNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);

        pbinopNode1 = new AUserDefinedBinOp(tidentifierNode2);
        }
	nodeList.add(pbinopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new24() /* reduce ALambdaBinOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBinOp pbinopNode1;
        {
            // Block
        PLambda plambdaNode2;
        plambdaNode2 = (PLambda)nodeArrayList1.get(0);

        pbinopNode1 = new ALambdaBinOp(plambdaNode2);
        }
	nodeList.add(pbinopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new25() /* reduce APlusNativeBinOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PNativeBinOp pnativebinopNode1;
        {
            // Block
        TPlus tplusNode2;
        tplusNode2 = (TPlus)nodeArrayList1.get(0);

        pnativebinopNode1 = new APlusNativeBinOp(tplusNode2);
        }
	nodeList.add(pnativebinopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new26() /* reduce AMinusNativeBinOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PNativeBinOp pnativebinopNode1;
        {
            // Block
        TMinus tminusNode2;
        tminusNode2 = (TMinus)nodeArrayList1.get(0);

        pnativebinopNode1 = new AMinusNativeBinOp(tminusNode2);
        }
	nodeList.add(pnativebinopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new27() /* reduce AMultNativeBinOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PNativeBinOp pnativebinopNode1;
        {
            // Block
        TMult tmultNode2;
        tmultNode2 = (TMult)nodeArrayList1.get(0);

        pnativebinopNode1 = new AMultNativeBinOp(tmultNode2);
        }
	nodeList.add(pnativebinopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new28() /* reduce ADivNativeBinOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PNativeBinOp pnativebinopNode1;
        {
            // Block
        TDiv tdivNode2;
        tdivNode2 = (TDiv)nodeArrayList1.get(0);

        pnativebinopNode1 = new ADivNativeBinOp(tdivNode2);
        }
	nodeList.add(pnativebinopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new29() /* reduce AModNativeBinOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PNativeBinOp pnativebinopNode1;
        {
            // Block
        TMod tmodNode2;
        tmodNode2 = (TMod)nodeArrayList1.get(0);

        pnativebinopNode1 = new AModNativeBinOp(tmodNode2);
        }
	nodeList.add(pnativebinopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new30() /* reduce ALessNativeBinOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PNativeBinOp pnativebinopNode1;
        {
            // Block
        TLt tltNode2;
        tltNode2 = (TLt)nodeArrayList1.get(0);

        pnativebinopNode1 = new ALessNativeBinOp(tltNode2);
        }
	nodeList.add(pnativebinopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new31() /* reduce AGreaterNativeBinOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PNativeBinOp pnativebinopNode1;
        {
            // Block
        TGt tgtNode2;
        tgtNode2 = (TGt)nodeArrayList1.get(0);

        pnativebinopNode1 = new AGreaterNativeBinOp(tgtNode2);
        }
	nodeList.add(pnativebinopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new32() /* reduce ALessEqualNativeBinOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PNativeBinOp pnativebinopNode1;
        {
            // Block
        TLte tlteNode2;
        tlteNode2 = (TLte)nodeArrayList1.get(0);

        pnativebinopNode1 = new ALessEqualNativeBinOp(tlteNode2);
        }
	nodeList.add(pnativebinopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new33() /* reduce AGreaterEqualNativeBinOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PNativeBinOp pnativebinopNode1;
        {
            // Block
        TGte tgteNode2;
        tgteNode2 = (TGte)nodeArrayList1.get(0);

        pnativebinopNode1 = new AGreaterEqualNativeBinOp(tgteNode2);
        }
	nodeList.add(pnativebinopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new34() /* reduce AEqualNativeBinOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PNativeBinOp pnativebinopNode1;
        {
            // Block
        TEqual tequalNode2;
        tequalNode2 = (TEqual)nodeArrayList1.get(0);

        pnativebinopNode1 = new AEqualNativeBinOp(tequalNode2);
        }
	nodeList.add(pnativebinopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new35() /* reduce ANotEqualNativeBinOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PNativeBinOp pnativebinopNode1;
        {
            // Block
        TNotEqual tnotequalNode2;
        tnotequalNode2 = (TNotEqual)nodeArrayList1.get(0);

        pnativebinopNode1 = new ANotEqualNativeBinOp(tnotequalNode2);
        }
	nodeList.add(pnativebinopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new36() /* reduce AAndNativeBinOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PNativeBinOp pnativebinopNode1;
        {
            // Block
        TAnd tandNode2;
        tandNode2 = (TAnd)nodeArrayList1.get(0);

        pnativebinopNode1 = new AAndNativeBinOp(tandNode2);
        }
	nodeList.add(pnativebinopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new37() /* reduce AOrNativeBinOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PNativeBinOp pnativebinopNode1;
        {
            // Block
        TOr torNode2;
        torNode2 = (TOr)nodeArrayList1.get(0);

        pnativebinopNode1 = new AOrNativeBinOp(torNode2);
        }
	nodeList.add(pnativebinopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new38() /* reduce AXorNativeBinOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PNativeBinOp pnativebinopNode1;
        {
            // Block
        TXor txorNode2;
        txorNode2 = (TXor)nodeArrayList1.get(0);

        pnativebinopNode1 = new AXorNativeBinOp(txorNode2);
        }
	nodeList.add(pnativebinopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new39() /* reduce AAppendNativeBinOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PNativeBinOp pnativebinopNode1;
        {
            // Block
        TAppend tappendNode2;
        tappendNode2 = (TAppend)nodeArrayList1.get(0);

        pnativebinopNode1 = new AAppendNativeBinOp(tappendNode2);
        }
	nodeList.add(pnativebinopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new40() /* reduce APrependNativeBinOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PNativeBinOp pnativebinopNode1;
        {
            // Block
        TPrepend tprependNode2;
        tprependNode2 = (TPrepend)nodeArrayList1.get(0);

        pnativebinopNode1 = new APrependNativeBinOp(tprependNode2);
        }
	nodeList.add(pnativebinopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new41() /* reduce ANativeUnaryOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PUnaryOp punaryopNode1;
        {
            // Block
        PNativeUnaryOp pnativeunaryopNode2;
        pnativeunaryopNode2 = (PNativeUnaryOp)nodeArrayList1.get(0);

        punaryopNode1 = new ANativeUnaryOp(pnativeunaryopNode2);
        }
	nodeList.add(punaryopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new42() /* reduce AUserDefinedUnaryOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PUnaryOp punaryopNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);

        punaryopNode1 = new AUserDefinedUnaryOp(tidentifierNode2);
        }
	nodeList.add(punaryopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new43() /* reduce ALambdaUnaryOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PUnaryOp punaryopNode1;
        {
            // Block
        PLambda plambdaNode2;
        plambdaNode2 = (PLambda)nodeArrayList1.get(0);

        punaryopNode1 = new ALambdaUnaryOp(plambdaNode2);
        }
	nodeList.add(punaryopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new44() /* reduce AArithmeticNotNativeUnaryOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PNativeUnaryOp pnativeunaryopNode1;
        {
            // Block
        TNeg tnegNode2;
        tnegNode2 = (TNeg)nodeArrayList1.get(0);

        pnativeunaryopNode1 = new AArithmeticNotNativeUnaryOp(tnegNode2);
        }
	nodeList.add(pnativeunaryopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new45() /* reduce ALogicalNotNativeUnaryOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PNativeUnaryOp pnativeunaryopNode1;
        {
            // Block
        TLogicalNot tlogicalnotNode2;
        tlogicalnotNode2 = (TLogicalNot)nodeArrayList1.get(0);

        pnativeunaryopNode1 = new ALogicalNotNativeUnaryOp(tlogicalnotNode2);
        }
	nodeList.add(pnativeunaryopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new46() /* reduce AHeadNativeUnaryOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PNativeUnaryOp pnativeunaryopNode1;
        {
            // Block
        THead theadNode2;
        theadNode2 = (THead)nodeArrayList1.get(0);

        pnativeunaryopNode1 = new AHeadNativeUnaryOp(theadNode2);
        }
	nodeList.add(pnativeunaryopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new47() /* reduce ATailNativeUnaryOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PNativeUnaryOp pnativeunaryopNode1;
        {
            // Block
        TTail ttailNode2;
        ttailNode2 = (TTail)nodeArrayList1.get(0);

        pnativeunaryopNode1 = new ATailNativeUnaryOp(ttailNode2);
        }
	nodeList.add(pnativeunaryopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new48() /* reduce AReverseNativeUnaryOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PNativeUnaryOp pnativeunaryopNode1;
        {
            // Block
        TReverse treverseNode2;
        treverseNode2 = (TReverse)nodeArrayList1.get(0);

        pnativeunaryopNode1 = new AReverseNativeUnaryOp(treverseNode2);
        }
	nodeList.add(pnativeunaryopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new49() /* reduce AFlattenNativeUnaryOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PNativeUnaryOp pnativeunaryopNode1;
        {
            // Block
        TFlatten tflattenNode2;
        tflattenNode2 = (TFlatten)nodeArrayList1.get(0);

        pnativeunaryopNode1 = new AFlattenNativeUnaryOp(tflattenNode2);
        }
	nodeList.add(pnativeunaryopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new50() /* reduce AIdentityNativeUnaryOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PNativeUnaryOp pnativeunaryopNode1;
        {
            // Block
        TIdentity tidentityNode2;
        tidentityNode2 = (TIdentity)nodeArrayList1.get(0);

        pnativeunaryopNode1 = new AIdentityNativeUnaryOp(tidentityNode2);
        }
	nodeList.add(pnativeunaryopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new51() /* reduce APrintNativeUnaryOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PNativeUnaryOp pnativeunaryopNode1;
        {
            // Block
        TPrint tprintNode2;
        tprintNode2 = (TPrint)nodeArrayList1.get(0);

        pnativeunaryopNode1 = new APrintNativeUnaryOp(tprintNode2);
        }
	nodeList.add(pnativeunaryopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new52() /* reduce ALengthNativeUnaryOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PNativeUnaryOp pnativeunaryopNode1;
        {
            // Block
        TLength tlengthNode2;
        tlengthNode2 = (TLength)nodeArrayList1.get(0);

        pnativeunaryopNode1 = new ALengthNativeUnaryOp(tlengthNode2);
        }
	nodeList.add(pnativeunaryopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new53() /* reduce AUserDefinedUserFunc */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PUserFunc puserfuncNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);

        puserfuncNode1 = new AUserDefinedUserFunc(tidentifierNode2);
        }
	nodeList.add(puserfuncNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new54() /* reduce ALambdaUserFunc */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PUserFunc puserfuncNode1;
        {
            // Block
        PLambda plambdaNode2;
        plambdaNode2 = (PLambda)nodeArrayList1.get(0);

        puserfuncNode1 = new ALambdaUserFunc(plambdaNode2);
        }
	nodeList.add(puserfuncNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new55() /* reduce ANoArgsArgList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArgList parglistNode1;
        {
            // Block
        TLParen tlparenNode2;
        TRParen trparenNode3;
        tlparenNode2 = (TLParen)nodeArrayList1.get(0);
        trparenNode3 = (TRParen)nodeArrayList2.get(0);

        parglistNode1 = new ANoArgsArgList(tlparenNode2, trparenNode3);
        }
	nodeList.add(parglistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new56() /* reduce AHasArgsArgList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArgList parglistNode1;
        {
            // Block
        TLParen tlparenNode2;
        PArgs pargsNode3;
        TRParen trparenNode4;
        tlparenNode2 = (TLParen)nodeArrayList1.get(0);
        pargsNode3 = (PArgs)nodeArrayList2.get(0);
        trparenNode4 = (TRParen)nodeArrayList3.get(0);

        parglistNode1 = new AHasArgsArgList(tlparenNode2, pargsNode3, trparenNode4);
        }
	nodeList.add(parglistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new57() /* reduce AMoreArgsArgs */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArgs pargsNode1;
        {
            // Block
        PArg pargNode2;
        PArgRest pargrestNode3;
        pargNode2 = (PArg)nodeArrayList1.get(0);
        pargrestNode3 = (PArgRest)nodeArrayList2.get(0);

        pargsNode1 = new AMoreArgsArgs(pargNode2, pargrestNode3);
        }
	nodeList.add(pargsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new58() /* reduce ALastArgArgs */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArgs pargsNode1;
        {
            // Block
        PArg pargNode2;
        pargNode2 = (PArg)nodeArrayList1.get(0);

        pargsNode1 = new ALastArgArgs(pargNode2);
        }
	nodeList.add(pargsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new59() /* reduce AArgRest */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArgRest pargrestNode1;
        {
            // Block
        TComma tcommaNode2;
        PArgs pargsNode3;
        tcommaNode2 = (TComma)nodeArrayList1.get(0);
        pargsNode3 = (PArgs)nodeArrayList2.get(0);

        pargrestNode1 = new AArgRest(tcommaNode2, pargsNode3);
        }
	nodeList.add(pargrestNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new60() /* reduce AFunctionArg */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArg pargNode1;
        {
            // Block
        PFunction pfunctionNode2;
        pfunctionNode2 = (PFunction)nodeArrayList1.get(0);

        pargNode1 = new AFunctionArg(pfunctionNode2);
        }
	nodeList.add(pargNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new61() /* reduce AListArg */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArg pargNode1;
        {
            // Block
        PList plistNode2;
        plistNode2 = (PList)nodeArrayList1.get(0);

        pargNode1 = new AListArg(plistNode2);
        }
	nodeList.add(pargNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new62() /* reduce AIntArg */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArg pargNode1;
        {
            // Block
        TIntNumber tintnumberNode2;
        tintnumberNode2 = (TIntNumber)nodeArrayList1.get(0);

        pargNode1 = new AIntArg(tintnumberNode2);
        }
	nodeList.add(pargNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new63() /* reduce AFloatArg */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArg pargNode1;
        {
            // Block
        TFloatNumber tfloatnumberNode2;
        tfloatnumberNode2 = (TFloatNumber)nodeArrayList1.get(0);

        pargNode1 = new AFloatArg(tfloatnumberNode2);
        }
	nodeList.add(pargNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new64() /* reduce AIdentifierArg */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArg pargNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);

        pargNode1 = new AIdentifierArg(tidentifierNode2);
        }
	nodeList.add(pargNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new65() /* reduce AStringArg */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArg pargNode1;
        {
            // Block
        PString pstringNode2;
        pstringNode2 = (PString)nodeArrayList1.get(0);

        pargNode1 = new AStringArg(pstringNode2);
        }
	nodeList.add(pargNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new66() /* reduce AEmptyStringString */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PString pstringNode1;
        {
            // Block
        TStringStart tstringstartNode2;
        TStringEnd tstringendNode3;
        tstringstartNode2 = (TStringStart)nodeArrayList1.get(0);
        tstringendNode3 = (TStringEnd)nodeArrayList2.get(0);

        pstringNode1 = new AEmptyStringString(tstringstartNode2, tstringendNode3);
        }
	nodeList.add(pstringNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new67() /* reduce AStringString */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PString pstringNode1;
        {
            // Block
        TStringStart tstringstartNode2;
        PStringMiddle pstringmiddleNode3;
        TStringEnd tstringendNode4;
        tstringstartNode2 = (TStringStart)nodeArrayList1.get(0);
        pstringmiddleNode3 = (PStringMiddle)nodeArrayList2.get(0);
        tstringendNode4 = (TStringEnd)nodeArrayList3.get(0);

        pstringNode1 = new AStringString(tstringstartNode2, pstringmiddleNode3, tstringendNode4);
        }
	nodeList.add(pstringNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new68() /* reduce AMoreBodyStringMiddle */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStringMiddle pstringmiddleNode1;
        {
            // Block
        PStringMiddle pstringmiddleNode2;
        TStringBody tstringbodyNode3;
        pstringmiddleNode2 = (PStringMiddle)nodeArrayList1.get(0);
        tstringbodyNode3 = (TStringBody)nodeArrayList2.get(0);

        pstringmiddleNode1 = new AMoreBodyStringMiddle(pstringmiddleNode2, tstringbodyNode3);
        }
	nodeList.add(pstringmiddleNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new69() /* reduce ALastBodyStringMiddle */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStringMiddle pstringmiddleNode1;
        {
            // Block
        TStringBody tstringbodyNode2;
        tstringbodyNode2 = (TStringBody)nodeArrayList1.get(0);

        pstringmiddleNode1 = new ALastBodyStringMiddle(tstringbodyNode2);
        }
	nodeList.add(pstringmiddleNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new70() /* reduce AMoreEscapeStringMiddle */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStringMiddle pstringmiddleNode1;
        {
            // Block
        PStringMiddle pstringmiddleNode2;
        PStringEscapeSeq pstringescapeseqNode3;
        pstringmiddleNode2 = (PStringMiddle)nodeArrayList1.get(0);
        pstringescapeseqNode3 = (PStringEscapeSeq)nodeArrayList2.get(0);

        pstringmiddleNode1 = new AMoreEscapeStringMiddle(pstringmiddleNode2, pstringescapeseqNode3);
        }
	nodeList.add(pstringmiddleNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new71() /* reduce ALastEscapeStringMiddle */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStringMiddle pstringmiddleNode1;
        {
            // Block
        PStringEscapeSeq pstringescapeseqNode2;
        pstringescapeseqNode2 = (PStringEscapeSeq)nodeArrayList1.get(0);

        pstringmiddleNode1 = new ALastEscapeStringMiddle(pstringescapeseqNode2);
        }
	nodeList.add(pstringmiddleNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new72() /* reduce AStringEscapeSeq */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStringEscapeSeq pstringescapeseqNode1;
        {
            // Block
        TStringEscape tstringescapeNode2;
        PEscapeChar pescapecharNode3;
        tstringescapeNode2 = (TStringEscape)nodeArrayList1.get(0);
        pescapecharNode3 = (PEscapeChar)nodeArrayList2.get(0);

        pstringescapeseqNode1 = new AStringEscapeSeq(tstringescapeNode2, pescapecharNode3);
        }
	nodeList.add(pstringescapeseqNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new73() /* reduce AAlarmEscapeChar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PEscapeChar pescapecharNode1;
        {
            // Block
        TEscapeAlarm tescapealarmNode2;
        tescapealarmNode2 = (TEscapeAlarm)nodeArrayList1.get(0);

        pescapecharNode1 = new AAlarmEscapeChar(tescapealarmNode2);
        }
	nodeList.add(pescapecharNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new74() /* reduce ABackspaceEscapeChar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PEscapeChar pescapecharNode1;
        {
            // Block
        TEscapeBackspace tescapebackspaceNode2;
        tescapebackspaceNode2 = (TEscapeBackspace)nodeArrayList1.get(0);

        pescapecharNode1 = new ABackspaceEscapeChar(tescapebackspaceNode2);
        }
	nodeList.add(pescapecharNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new75() /* reduce AFormfeedEscapeChar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PEscapeChar pescapecharNode1;
        {
            // Block
        TEscapeFormfeed tescapeformfeedNode2;
        tescapeformfeedNode2 = (TEscapeFormfeed)nodeArrayList1.get(0);

        pescapecharNode1 = new AFormfeedEscapeChar(tescapeformfeedNode2);
        }
	nodeList.add(pescapecharNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new76() /* reduce ACrEscapeChar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PEscapeChar pescapecharNode1;
        {
            // Block
        TEscapeCarriageReturn tescapecarriagereturnNode2;
        tescapecarriagereturnNode2 = (TEscapeCarriageReturn)nodeArrayList1.get(0);

        pescapecharNode1 = new ACrEscapeChar(tescapecarriagereturnNode2);
        }
	nodeList.add(pescapecharNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new77() /* reduce ANewlineEscapeChar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PEscapeChar pescapecharNode1;
        {
            // Block
        TEscapeNewline tescapenewlineNode2;
        tescapenewlineNode2 = (TEscapeNewline)nodeArrayList1.get(0);

        pescapecharNode1 = new ANewlineEscapeChar(tescapenewlineNode2);
        }
	nodeList.add(pescapecharNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new78() /* reduce ATabEscapeChar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PEscapeChar pescapecharNode1;
        {
            // Block
        TEscapeTab tescapetabNode2;
        tescapetabNode2 = (TEscapeTab)nodeArrayList1.get(0);

        pescapecharNode1 = new ATabEscapeChar(tescapetabNode2);
        }
	nodeList.add(pescapecharNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new79() /* reduce AVerticalTabEscapeChar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PEscapeChar pescapecharNode1;
        {
            // Block
        TEscapeVerticalTab tescapeverticaltabNode2;
        tescapeverticaltabNode2 = (TEscapeVerticalTab)nodeArrayList1.get(0);

        pescapecharNode1 = new AVerticalTabEscapeChar(tescapeverticaltabNode2);
        }
	nodeList.add(pescapecharNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new80() /* reduce ABackslashEscapeChar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PEscapeChar pescapecharNode1;
        {
            // Block
        TEscapeBackslash tescapebackslashNode2;
        tescapebackslashNode2 = (TEscapeBackslash)nodeArrayList1.get(0);

        pescapecharNode1 = new ABackslashEscapeChar(tescapebackslashNode2);
        }
	nodeList.add(pescapecharNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new81() /* reduce ASingleQuoteEscapeChar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PEscapeChar pescapecharNode1;
        {
            // Block
        TEscapeSingleQuote tescapesinglequoteNode2;
        tescapesinglequoteNode2 = (TEscapeSingleQuote)nodeArrayList1.get(0);

        pescapecharNode1 = new ASingleQuoteEscapeChar(tescapesinglequoteNode2);
        }
	nodeList.add(pescapecharNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new82() /* reduce ADoubleQuoteEscapeChar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PEscapeChar pescapecharNode1;
        {
            // Block
        TEscapeDoubleQuote tescapedoublequoteNode2;
        tescapedoublequoteNode2 = (TEscapeDoubleQuote)nodeArrayList1.get(0);

        pescapecharNode1 = new ADoubleQuoteEscapeChar(tescapedoublequoteNode2);
        }
	nodeList.add(pescapecharNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new83() /* reduce AQuestionMarkEscapeChar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PEscapeChar pescapecharNode1;
        {
            // Block
        TEscapeQuestionMark tescapequestionmarkNode2;
        tescapequestionmarkNode2 = (TEscapeQuestionMark)nodeArrayList1.get(0);

        pescapecharNode1 = new AQuestionMarkEscapeChar(tescapequestionmarkNode2);
        }
	nodeList.add(pescapecharNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new84() /* reduce AOctalEscapeChar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PEscapeChar pescapecharNode1;
        {
            // Block
        TEscapeOctalChar tescapeoctalcharNode2;
        tescapeoctalcharNode2 = (TEscapeOctalChar)nodeArrayList1.get(0);

        pescapecharNode1 = new AOctalEscapeChar(tescapeoctalcharNode2);
        }
	nodeList.add(pescapecharNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new85() /* reduce AHexEscapeChar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PEscapeChar pescapecharNode1;
        {
            // Block
        TEscapeHexChar tescapehexcharNode2;
        tescapehexcharNode2 = (TEscapeHexChar)nodeArrayList1.get(0);

        pescapecharNode1 = new AHexEscapeChar(tescapehexcharNode2);
        }
	nodeList.add(pescapecharNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new86() /* reduce AUnicodeEscapeChar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PEscapeChar pescapecharNode1;
        {
            // Block
        TEscapeUnicodeChar tescapeunicodecharNode2;
        tescapeunicodecharNode2 = (TEscapeUnicodeChar)nodeArrayList1.get(0);

        pescapecharNode1 = new AUnicodeEscapeChar(tescapeunicodecharNode2);
        }
	nodeList.add(pescapecharNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new87() /* reduce ADefaultEscapeChar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PEscapeChar pescapecharNode1;
        {
            // Block
        TEscapeDefault tescapedefaultNode2;
        tescapedefaultNode2 = (TEscapeDefault)nodeArrayList1.get(0);

        pescapecharNode1 = new ADefaultEscapeChar(tescapedefaultNode2);
        }
	nodeList.add(pescapecharNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new88() /* reduce ABranch */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBranch pbranchNode1;
        {
            // Block
        TSemi tsemiNode2;
        PFunction pfunctionNode3;
        TTernaryQuestionMark tternaryquestionmarkNode4;
        PFunction pfunctionNode5;
        TTernaryColon tternarycolonNode6;
        PFunction pfunctionNode7;
        tsemiNode2 = (TSemi)nodeArrayList1.get(0);
        pfunctionNode3 = (PFunction)nodeArrayList2.get(0);
        tternaryquestionmarkNode4 = (TTernaryQuestionMark)nodeArrayList3.get(0);
        pfunctionNode5 = (PFunction)nodeArrayList4.get(0);
        tternarycolonNode6 = (TTernaryColon)nodeArrayList5.get(0);
        pfunctionNode7 = (PFunction)nodeArrayList6.get(0);

        pbranchNode1 = new ABranch(tsemiNode2, pfunctionNode3, tternaryquestionmarkNode4, pfunctionNode5, tternarycolonNode6, pfunctionNode7);
        }
	nodeList.add(pbranchNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new89() /* reduce AEmptyListList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PList plistNode1;
        {
            // Block
        TStartList tstartlistNode2;
        TEndList tendlistNode3;
        tstartlistNode2 = (TStartList)nodeArrayList1.get(0);
        tendlistNode3 = (TEndList)nodeArrayList2.get(0);

        plistNode1 = new AEmptyListList(tstartlistNode2, tendlistNode3);
        }
	nodeList.add(plistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new90() /* reduce AListList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PList plistNode1;
        {
            // Block
        TStartList tstartlistNode2;
        PArgs pargsNode3;
        TEndList tendlistNode4;
        tstartlistNode2 = (TStartList)nodeArrayList1.get(0);
        pargsNode3 = (PArgs)nodeArrayList2.get(0);
        tendlistNode4 = (TEndList)nodeArrayList3.get(0);

        plistNode1 = new AListList(tstartlistNode2, pargsNode3, tendlistNode4);
        }
	nodeList.add(plistNode1);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {19, SHIFT, 1}, {20, SHIFT, 2}, {21, SHIFT, 3}, {22, SHIFT, 4}, {23, SHIFT, 5}, {24, SHIFT, 6}, {25, SHIFT, 7}, {26, SHIFT, 8}, {27, SHIFT, 9}, {28, SHIFT, 10}, {29, SHIFT, 11}, {31, SHIFT, 12}, {32, SHIFT, 13}, {33, SHIFT, 14}, {35, SHIFT, 15}, {36, SHIFT, 16}, {37, SHIFT, 17}, {38, SHIFT, 18}, {39, SHIFT, 19}, {40, SHIFT, 20}, {41, SHIFT, 21}, {42, SHIFT, 22}, {43, SHIFT, 23}, {44, SHIFT, 24}, {45, SHIFT, 25}, {46, SHIFT, 26}, {47, SHIFT, 27}, {48, SHIFT, 28}, {49, SHIFT, 29}, {50, SHIFT, 30}, {56, SHIFT, 31}, {59, SHIFT, 32}, },
			{{-1, REDUCE, 46}, },
			{{-1, REDUCE, 47}, },
			{{-1, REDUCE, 48}, },
			{{-1, REDUCE, 39}, },
			{{-1, REDUCE, 40}, },
			{{-1, ERROR, 6}, {51, SHIFT, 42}, },
			{{-1, ERROR, 7}, {51, SHIFT, 42}, },
			{{-1, ERROR, 8}, {51, SHIFT, 45}, },
			{{-1, REDUCE, 49}, },
			{{-1, REDUCE, 52}, },
			{{-1, ERROR, 11}, {51, SHIFT, 46}, },
			{{-1, REDUCE, 50}, },
			{{-1, REDUCE, 51}, },
			{{-1, ERROR, 14}, {59, SHIFT, 47}, },
			{{-1, REDUCE, 34}, },
			{{-1, REDUCE, 30}, },
			{{-1, REDUCE, 31}, },
			{{-1, REDUCE, 35}, },
			{{-1, REDUCE, 32}, },
			{{-1, REDUCE, 33}, },
			{{-1, REDUCE, 36}, },
			{{-1, REDUCE, 37}, },
			{{-1, REDUCE, 38}, },
			{{-1, REDUCE, 45}, },
			{{-1, REDUCE, 25}, },
			{{-1, REDUCE, 26}, },
			{{-1, REDUCE, 27}, },
			{{-1, REDUCE, 28}, },
			{{-1, REDUCE, 29}, },
			{{-1, REDUCE, 44}, },
			{{-1, ERROR, 31}, {19, SHIFT, 1}, {20, SHIFT, 2}, {21, SHIFT, 3}, {22, SHIFT, 4}, {23, SHIFT, 5}, {24, SHIFT, 6}, {25, SHIFT, 7}, {26, SHIFT, 8}, {27, SHIFT, 9}, {28, SHIFT, 10}, {29, SHIFT, 11}, {31, SHIFT, 12}, {32, SHIFT, 13}, {35, SHIFT, 15}, {36, SHIFT, 16}, {37, SHIFT, 17}, {38, SHIFT, 18}, {39, SHIFT, 19}, {40, SHIFT, 20}, {41, SHIFT, 21}, {42, SHIFT, 22}, {43, SHIFT, 23}, {44, SHIFT, 24}, {45, SHIFT, 25}, {46, SHIFT, 26}, {47, SHIFT, 27}, {48, SHIFT, 28}, {49, SHIFT, 29}, {50, SHIFT, 30}, {56, SHIFT, 31}, {59, SHIFT, 32}, },
			{{-1, REDUCE, 53}, },
			{{-1, ERROR, 33}, {63, ACCEPT, -1}, },
			{{-1, ERROR, 34}, {19, SHIFT, 1}, {20, SHIFT, 2}, {21, SHIFT, 3}, {22, SHIFT, 4}, {23, SHIFT, 5}, {24, SHIFT, 6}, {25, SHIFT, 7}, {26, SHIFT, 8}, {27, SHIFT, 9}, {28, SHIFT, 10}, {29, SHIFT, 11}, {31, SHIFT, 12}, {32, SHIFT, 13}, {33, SHIFT, 14}, {35, SHIFT, 15}, {36, SHIFT, 16}, {37, SHIFT, 17}, {38, SHIFT, 18}, {39, SHIFT, 19}, {40, SHIFT, 20}, {41, SHIFT, 21}, {42, SHIFT, 22}, {43, SHIFT, 23}, {44, SHIFT, 24}, {45, SHIFT, 25}, {46, SHIFT, 26}, {47, SHIFT, 27}, {48, SHIFT, 28}, {49, SHIFT, 29}, {50, SHIFT, 30}, {56, SHIFT, 31}, {59, SHIFT, 32}, },
			{{-1, REDUCE, 3}, },
			{{-1, REDUCE, 1}, },
			{{-1, REDUCE, 54}, },
			{{-1, ERROR, 38}, {51, SHIFT, 51}, },
			{{-1, ERROR, 39}, {51, SHIFT, 52}, },
			{{-1, ERROR, 40}, {51, SHIFT, 53}, },
			{{-1, REDUCE, 13}, },
			{{-1, ERROR, 42}, {22, SHIFT, 4}, {23, SHIFT, 5}, {29, SHIFT, 11}, {35, SHIFT, 15}, {36, SHIFT, 16}, {37, SHIFT, 17}, {38, SHIFT, 18}, {39, SHIFT, 19}, {40, SHIFT, 20}, {41, SHIFT, 21}, {42, SHIFT, 22}, {43, SHIFT, 23}, {45, SHIFT, 25}, {46, SHIFT, 26}, {47, SHIFT, 27}, {48, SHIFT, 28}, {49, SHIFT, 29}, {59, SHIFT, 55}, },
			{{-1, REDUCE, 14}, },
			{{-1, REDUCE, 15}, },
			{{-1, ERROR, 45}, {19, SHIFT, 1}, {20, SHIFT, 2}, {21, SHIFT, 3}, {27, SHIFT, 9}, {28, SHIFT, 10}, {29, SHIFT, 11}, {31, SHIFT, 12}, {32, SHIFT, 13}, {44, SHIFT, 24}, {50, SHIFT, 30}, {59, SHIFT, 59}, },
			{{-1, ERROR, 46}, {51, SHIFT, 63}, },
			{{-1, ERROR, 47}, {51, SHIFT, 63}, },
			{{-1, ERROR, 48}, {57, SHIFT, 66}, },
			{{-1, REDUCE, 2}, },
			{{-1, REDUCE, 0}, },
			{{-1, ERROR, 51}, {0, SHIFT, 67}, {19, SHIFT, 1}, {20, SHIFT, 2}, {21, SHIFT, 3}, {22, SHIFT, 4}, {23, SHIFT, 5}, {24, SHIFT, 6}, {25, SHIFT, 7}, {26, SHIFT, 8}, {27, SHIFT, 9}, {28, SHIFT, 10}, {29, SHIFT, 11}, {31, SHIFT, 12}, {32, SHIFT, 13}, {35, SHIFT, 15}, {36, SHIFT, 16}, {37, SHIFT, 17}, {38, SHIFT, 18}, {39, SHIFT, 19}, {40, SHIFT, 20}, {41, SHIFT, 21}, {42, SHIFT, 22}, {43, SHIFT, 23}, {44, SHIFT, 24}, {45, SHIFT, 25}, {46, SHIFT, 26}, {47, SHIFT, 27}, {48, SHIFT, 28}, {49, SHIFT, 29}, {50, SHIFT, 30}, {53, SHIFT, 68}, {56, SHIFT, 31}, {59, SHIFT, 69}, {60, SHIFT, 70}, {61, SHIFT, 71}, },
			{{-1, ERROR, 52}, {0, SHIFT, 67}, {19, SHIFT, 1}, {20, SHIFT, 2}, {21, SHIFT, 3}, {22, SHIFT, 4}, {23, SHIFT, 5}, {24, SHIFT, 6}, {25, SHIFT, 7}, {26, SHIFT, 8}, {27, SHIFT, 9}, {28, SHIFT, 10}, {29, SHIFT, 11}, {31, SHIFT, 12}, {32, SHIFT, 13}, {35, SHIFT, 15}, {36, SHIFT, 16}, {37, SHIFT, 17}, {38, SHIFT, 18}, {39, SHIFT, 19}, {40, SHIFT, 20}, {41, SHIFT, 21}, {42, SHIFT, 22}, {43, SHIFT, 23}, {44, SHIFT, 24}, {45, SHIFT, 25}, {46, SHIFT, 26}, {47, SHIFT, 27}, {48, SHIFT, 28}, {49, SHIFT, 29}, {50, SHIFT, 30}, {53, SHIFT, 68}, {56, SHIFT, 31}, {59, SHIFT, 69}, {60, SHIFT, 70}, {61, SHIFT, 71}, },
			{{-1, ERROR, 53}, {0, SHIFT, 67}, {19, SHIFT, 1}, {20, SHIFT, 2}, {21, SHIFT, 3}, {22, SHIFT, 4}, {23, SHIFT, 5}, {24, SHIFT, 6}, {25, SHIFT, 7}, {26, SHIFT, 8}, {27, SHIFT, 9}, {28, SHIFT, 10}, {29, SHIFT, 11}, {31, SHIFT, 12}, {32, SHIFT, 13}, {35, SHIFT, 15}, {36, SHIFT, 16}, {37, SHIFT, 17}, {38, SHIFT, 18}, {39, SHIFT, 19}, {40, SHIFT, 20}, {41, SHIFT, 21}, {42, SHIFT, 22}, {43, SHIFT, 23}, {44, SHIFT, 24}, {45, SHIFT, 25}, {46, SHIFT, 26}, {47, SHIFT, 27}, {48, SHIFT, 28}, {49, SHIFT, 29}, {50, SHIFT, 30}, {52, SHIFT, 77}, {53, SHIFT, 68}, {56, SHIFT, 31}, {59, SHIFT, 69}, {60, SHIFT, 70}, {61, SHIFT, 71}, },
			{{-1, REDUCE, 10}, },
			{{-1, REDUCE, 23}, },
			{{-1, REDUCE, 24}, },
			{{-1, ERROR, 57}, {55, SHIFT, 80}, },
			{{-1, REDUCE, 22}, },
			{{-1, REDUCE, 42}, },
			{{-1, REDUCE, 43}, },
			{{-1, ERROR, 61}, {55, SHIFT, 81}, },
			{{-1, REDUCE, 41}, },
			{{-1, ERROR, 63}, {52, SHIFT, 82}, {59, SHIFT, 83}, },
			{{-1, ERROR, 64}, {30, SHIFT, 85}, },
			{{-1, ERROR, 65}, {34, SHIFT, 86}, },
			{{-1, ERROR, 66}, {19, SHIFT, 1}, {20, SHIFT, 2}, {21, SHIFT, 3}, {22, SHIFT, 4}, {23, SHIFT, 5}, {24, SHIFT, 6}, {25, SHIFT, 7}, {26, SHIFT, 8}, {27, SHIFT, 9}, {28, SHIFT, 10}, {29, SHIFT, 11}, {31, SHIFT, 12}, {32, SHIFT, 13}, {35, SHIFT, 15}, {36, SHIFT, 16}, {37, SHIFT, 17}, {38, SHIFT, 18}, {39, SHIFT, 19}, {40, SHIFT, 20}, {41, SHIFT, 21}, {42, SHIFT, 22}, {43, SHIFT, 23}, {44, SHIFT, 24}, {45, SHIFT, 25}, {46, SHIFT, 26}, {47, SHIFT, 27}, {48, SHIFT, 28}, {49, SHIFT, 29}, {50, SHIFT, 30}, {56, SHIFT, 31}, {59, SHIFT, 32}, },
			{{-1, ERROR, 67}, {1, SHIFT, 88}, {17, SHIFT, 89}, {18, SHIFT, 90}, },
			{{-1, ERROR, 68}, {0, SHIFT, 67}, {19, SHIFT, 1}, {20, SHIFT, 2}, {21, SHIFT, 3}, {22, SHIFT, 4}, {23, SHIFT, 5}, {24, SHIFT, 6}, {25, SHIFT, 7}, {26, SHIFT, 8}, {27, SHIFT, 9}, {28, SHIFT, 10}, {29, SHIFT, 11}, {31, SHIFT, 12}, {32, SHIFT, 13}, {35, SHIFT, 15}, {36, SHIFT, 16}, {37, SHIFT, 17}, {38, SHIFT, 18}, {39, SHIFT, 19}, {40, SHIFT, 20}, {41, SHIFT, 21}, {42, SHIFT, 22}, {43, SHIFT, 23}, {44, SHIFT, 24}, {45, SHIFT, 25}, {46, SHIFT, 26}, {47, SHIFT, 27}, {48, SHIFT, 28}, {49, SHIFT, 29}, {50, SHIFT, 30}, {53, SHIFT, 68}, {54, SHIFT, 93}, {56, SHIFT, 31}, {59, SHIFT, 69}, {60, SHIFT, 70}, {61, SHIFT, 71}, },
			{{-1, REDUCE, 64}, {51, REDUCE, 53}, },
			{{-1, REDUCE, 62}, },
			{{-1, REDUCE, 63}, },
			{{-1, REDUCE, 60}, },
			{{-1, ERROR, 73}, {55, SHIFT, 95}, },
			{{-1, REDUCE, 65}, },
			{{-1, REDUCE, 61}, },
			{{-1, ERROR, 76}, {52, SHIFT, 96}, },
			{{-1, REDUCE, 55}, },
			{{-1, ERROR, 78}, {52, SHIFT, 97}, },
			{{-1, REDUCE, 58}, {55, SHIFT, 98}, },
			{{-1, ERROR, 80}, {19, SHIFT, 1}, {20, SHIFT, 2}, {21, SHIFT, 3}, {22, SHIFT, 4}, {23, SHIFT, 5}, {24, SHIFT, 6}, {25, SHIFT, 7}, {26, SHIFT, 8}, {27, SHIFT, 9}, {28, SHIFT, 10}, {29, SHIFT, 11}, {31, SHIFT, 12}, {32, SHIFT, 13}, {35, SHIFT, 15}, {36, SHIFT, 16}, {37, SHIFT, 17}, {38, SHIFT, 18}, {39, SHIFT, 19}, {40, SHIFT, 20}, {41, SHIFT, 21}, {42, SHIFT, 22}, {43, SHIFT, 23}, {44, SHIFT, 24}, {45, SHIFT, 25}, {46, SHIFT, 26}, {47, SHIFT, 27}, {48, SHIFT, 28}, {49, SHIFT, 29}, {50, SHIFT, 30}, {53, SHIFT, 68}, {56, SHIFT, 31}, {59, SHIFT, 100}, },
			{{-1, ERROR, 81}, {19, SHIFT, 1}, {20, SHIFT, 2}, {21, SHIFT, 3}, {22, SHIFT, 4}, {23, SHIFT, 5}, {24, SHIFT, 6}, {25, SHIFT, 7}, {26, SHIFT, 8}, {27, SHIFT, 9}, {28, SHIFT, 10}, {29, SHIFT, 11}, {31, SHIFT, 12}, {32, SHIFT, 13}, {35, SHIFT, 15}, {36, SHIFT, 16}, {37, SHIFT, 17}, {38, SHIFT, 18}, {39, SHIFT, 19}, {40, SHIFT, 20}, {41, SHIFT, 21}, {42, SHIFT, 22}, {43, SHIFT, 23}, {44, SHIFT, 24}, {45, SHIFT, 25}, {46, SHIFT, 26}, {47, SHIFT, 27}, {48, SHIFT, 28}, {49, SHIFT, 29}, {50, SHIFT, 30}, {53, SHIFT, 68}, {56, SHIFT, 31}, {59, SHIFT, 100}, },
			{{-1, REDUCE, 5}, },
			{{-1, REDUCE, 8}, {55, SHIFT, 105}, },
			{{-1, ERROR, 84}, {52, SHIFT, 107}, },
			{{-1, ERROR, 85}, {19, SHIFT, 1}, {20, SHIFT, 2}, {21, SHIFT, 3}, {22, SHIFT, 4}, {23, SHIFT, 5}, {24, SHIFT, 6}, {25, SHIFT, 7}, {26, SHIFT, 8}, {27, SHIFT, 9}, {28, SHIFT, 10}, {29, SHIFT, 11}, {31, SHIFT, 12}, {32, SHIFT, 13}, {35, SHIFT, 15}, {36, SHIFT, 16}, {37, SHIFT, 17}, {38, SHIFT, 18}, {39, SHIFT, 19}, {40, SHIFT, 20}, {41, SHIFT, 21}, {42, SHIFT, 22}, {43, SHIFT, 23}, {44, SHIFT, 24}, {45, SHIFT, 25}, {46, SHIFT, 26}, {47, SHIFT, 27}, {48, SHIFT, 28}, {49, SHIFT, 29}, {50, SHIFT, 30}, {56, SHIFT, 31}, {59, SHIFT, 32}, },
			{{-1, ERROR, 86}, {19, SHIFT, 1}, {20, SHIFT, 2}, {21, SHIFT, 3}, {22, SHIFT, 4}, {23, SHIFT, 5}, {24, SHIFT, 6}, {25, SHIFT, 7}, {26, SHIFT, 8}, {27, SHIFT, 9}, {28, SHIFT, 10}, {29, SHIFT, 11}, {31, SHIFT, 12}, {32, SHIFT, 13}, {35, SHIFT, 15}, {36, SHIFT, 16}, {37, SHIFT, 17}, {38, SHIFT, 18}, {39, SHIFT, 19}, {40, SHIFT, 20}, {41, SHIFT, 21}, {42, SHIFT, 22}, {43, SHIFT, 23}, {44, SHIFT, 24}, {45, SHIFT, 25}, {46, SHIFT, 26}, {47, SHIFT, 27}, {48, SHIFT, 28}, {49, SHIFT, 29}, {50, SHIFT, 30}, {56, SHIFT, 31}, {59, SHIFT, 32}, },
			{{-1, ERROR, 87}, {58, SHIFT, 110}, },
			{{-1, ERROR, 88}, {2, SHIFT, 111}, {3, SHIFT, 112}, {4, SHIFT, 113}, {5, SHIFT, 114}, {6, SHIFT, 115}, {7, SHIFT, 116}, {8, SHIFT, 117}, {9, SHIFT, 118}, {10, SHIFT, 119}, {11, SHIFT, 120}, {12, SHIFT, 121}, {13, SHIFT, 122}, {14, SHIFT, 123}, {15, SHIFT, 124}, {16, SHIFT, 125}, },
			{{-1, REDUCE, 69}, },
			{{-1, REDUCE, 66}, },
			{{-1, ERROR, 91}, {1, SHIFT, 88}, {17, SHIFT, 127}, {18, SHIFT, 128}, },
			{{-1, REDUCE, 71}, },
			{{-1, REDUCE, 89}, },
			{{-1, ERROR, 94}, {54, SHIFT, 130}, },
			{{-1, ERROR, 95}, {0, SHIFT, 67}, {19, SHIFT, 1}, {20, SHIFT, 2}, {21, SHIFT, 3}, {22, SHIFT, 4}, {23, SHIFT, 5}, {24, SHIFT, 6}, {25, SHIFT, 7}, {26, SHIFT, 8}, {27, SHIFT, 9}, {28, SHIFT, 10}, {29, SHIFT, 11}, {31, SHIFT, 12}, {32, SHIFT, 13}, {35, SHIFT, 15}, {36, SHIFT, 16}, {37, SHIFT, 17}, {38, SHIFT, 18}, {39, SHIFT, 19}, {40, SHIFT, 20}, {41, SHIFT, 21}, {42, SHIFT, 22}, {43, SHIFT, 23}, {44, SHIFT, 24}, {45, SHIFT, 25}, {46, SHIFT, 26}, {47, SHIFT, 27}, {48, SHIFT, 28}, {49, SHIFT, 29}, {50, SHIFT, 30}, {53, SHIFT, 68}, {56, SHIFT, 31}, {59, SHIFT, 69}, {60, SHIFT, 70}, {61, SHIFT, 71}, },
			{{-1, REDUCE, 11}, },
			{{-1, REDUCE, 56}, },
			{{-1, ERROR, 98}, {0, SHIFT, 67}, {19, SHIFT, 1}, {20, SHIFT, 2}, {21, SHIFT, 3}, {22, SHIFT, 4}, {23, SHIFT, 5}, {24, SHIFT, 6}, {25, SHIFT, 7}, {26, SHIFT, 8}, {27, SHIFT, 9}, {28, SHIFT, 10}, {29, SHIFT, 11}, {31, SHIFT, 12}, {32, SHIFT, 13}, {35, SHIFT, 15}, {36, SHIFT, 16}, {37, SHIFT, 17}, {38, SHIFT, 18}, {39, SHIFT, 19}, {40, SHIFT, 20}, {41, SHIFT, 21}, {42, SHIFT, 22}, {43, SHIFT, 23}, {44, SHIFT, 24}, {45, SHIFT, 25}, {46, SHIFT, 26}, {47, SHIFT, 27}, {48, SHIFT, 28}, {49, SHIFT, 29}, {50, SHIFT, 30}, {53, SHIFT, 68}, {56, SHIFT, 31}, {59, SHIFT, 69}, {60, SHIFT, 70}, {61, SHIFT, 71}, },
			{{-1, REDUCE, 57}, },
			{{-1, REDUCE, 53}, {52, REDUCE, 20}, },
			{{-1, REDUCE, 21}, },
			{{-1, ERROR, 102}, {52, SHIFT, 133}, },
			{{-1, REDUCE, 19}, },
			{{-1, ERROR, 104}, {52, SHIFT, 134}, },
			{{-1, ERROR, 105}, {59, SHIFT, 83}, },
			{{-1, REDUCE, 7}, },
			{{-1, REDUCE, 6}, },
			{{-1, ERROR, 108}, {52, SHIFT, 136}, },
			{{-1, REDUCE, 4}, },
			{{-1, ERROR, 110}, {19, SHIFT, 1}, {20, SHIFT, 2}, {21, SHIFT, 3}, {22, SHIFT, 4}, {23, SHIFT, 5}, {24, SHIFT, 6}, {25, SHIFT, 7}, {26, SHIFT, 8}, {27, SHIFT, 9}, {28, SHIFT, 10}, {29, SHIFT, 11}, {31, SHIFT, 12}, {32, SHIFT, 13}, {35, SHIFT, 15}, {36, SHIFT, 16}, {37, SHIFT, 17}, {38, SHIFT, 18}, {39, SHIFT, 19}, {40, SHIFT, 20}, {41, SHIFT, 21}, {42, SHIFT, 22}, {43, SHIFT, 23}, {44, SHIFT, 24}, {45, SHIFT, 25}, {46, SHIFT, 26}, {47, SHIFT, 27}, {48, SHIFT, 28}, {49, SHIFT, 29}, {50, SHIFT, 30}, {56, SHIFT, 31}, {59, SHIFT, 32}, },
			{{-1, REDUCE, 73}, },
			{{-1, REDUCE, 74}, },
			{{-1, REDUCE, 75}, },
			{{-1, REDUCE, 76}, },
			{{-1, REDUCE, 77}, },
			{{-1, REDUCE, 78}, },
			{{-1, REDUCE, 79}, },
			{{-1, REDUCE, 80}, },
			{{-1, REDUCE, 81}, },
			{{-1, REDUCE, 82}, },
			{{-1, REDUCE, 83}, },
			{{-1, REDUCE, 84}, },
			{{-1, REDUCE, 85}, },
			{{-1, REDUCE, 86}, },
			{{-1, REDUCE, 87}, },
			{{-1, REDUCE, 72}, },
			{{-1, REDUCE, 68}, },
			{{-1, REDUCE, 67}, },
			{{-1, REDUCE, 70}, },
			{{-1, REDUCE, 90}, },
			{{-1, ERROR, 131}, {52, SHIFT, 138}, },
			{{-1, REDUCE, 59}, },
			{{-1, REDUCE, 18}, },
			{{-1, REDUCE, 16}, },
			{{-1, REDUCE, 9}, },
			{{-1, REDUCE, 17}, },
			{{-1, REDUCE, 88}, },
			{{-1, REDUCE, 12}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 33}, },
			{{-1, 34}, },
			{{-1, 35}, {34, 49}, },
			{{-1, 64}, {47, 65}, },
			{{-1, 84}, {105, 135}, },
			{{-1, 106}, },
			{{-1, 72}, {0, 36}, {31, 48}, {34, 50}, {66, 87}, {80, 101}, {81, 101}, {85, 108}, {86, 109}, {110, 137}, },
			{{-1, 37}, {42, 56}, {45, 60}, },
			{{-1, 43}, {7, 44}, },
			{{-1, 102}, {81, 104}, },
			{{-1, 57}, },
			{{-1, 38}, {42, 58}, },
			{{-1, 61}, },
			{{-1, 39}, {45, 62}, },
			{{-1, 40}, },
			{{-1, 54}, },
			{{-1, 78}, {68, 94}, {98, 132}, },
			{{-1, 99}, },
			{{-1, 79}, {51, 73}, {52, 76}, {95, 131}, },
			{{-1, 74}, },
			{{-1, 91}, },
			{{-1, 92}, {91, 129}, },
			{{-1, 126}, },
			{{-1, 41}, },
			{{-1, 75}, {80, 103}, {81, 103}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: 'h', 't', 'r', '$', '^', '{', '}', '.', flatten, '#', '\', '@', 'print', 'def', '=', '<', '>', '!=', '<=', '>=', '&', '|', 'x', '!', '+', '-', '*', '/', '%', '~', ';', identifier",
			"expecting: '(', ','",
			"expecting: '('",
			"expecting: identifier",
			"expecting: 'h', 't', 'r', '$', '^', '{', '}', '.', flatten, '#', '\', '@', 'print', '=', '<', '>', '!=', '<=', '>=', '&', '|', 'x', '!', '+', '-', '*', '/', '%', '~', ';', identifier",
			"expecting: EOF",
			"expecting: 'h', 't', 'r', '$', '^', '{', '}', '.', flatten, '#', '\', '@', 'print', 'def', '=', '<', '>', '!=', '<=', '>=', '&', '|', 'x', '!', '+', '-', '*', '/', '%', '~', ')', ']', ',', ';', ternary question mark, ':', identifier, EOF",
			"expecting: '$', '^', '\', '=', '<', '>', '!=', '<=', '>=', '&', '|', 'x', '+', '-', '*', '/', '%', identifier",
			"expecting: 'h', 't', 'r', flatten, '#', '\', '@', 'print', '!', '~', identifier",
			"expecting: ternary question mark",
			"expecting: string start, 'h', 't', 'r', '$', '^', '{', '}', '.', flatten, '#', '\', '@', 'print', '=', '<', '>', '!=', '<=', '>=', '&', '|', 'x', '!', '+', '-', '*', '/', '%', '~', '[', ';', identifier, int number, float number",
			"expecting: string start, 'h', 't', 'r', '$', '^', '{', '}', '.', flatten, '#', '\', '@', 'print', '=', '<', '>', '!=', '<=', '>=', '&', '|', 'x', '!', '+', '-', '*', '/', '%', '~', ')', '[', ';', identifier, int number, float number",
			"expecting: ','",
			"expecting: ')', identifier",
			"expecting: '->'",
			"expecting: ':='",
			"expecting: string escape, string body, string end",
			"expecting: string start, 'h', 't', 'r', '$', '^', '{', '}', '.', flatten, '#', '\', '@', 'print', '=', '<', '>', '!=', '<=', '>=', '&', '|', 'x', '!', '+', '-', '*', '/', '%', '~', '[', ']', ';', identifier, int number, float number",
			"expecting: '(', ')', ']', ','",
			"expecting: ')', ']', ','",
			"expecting: ')'",
			"expecting: 'h', 't', 'r', '$', '^', '{', '}', '.', flatten, '#', '\', '@', 'print', '=', '<', '>', '!=', '<=', '>=', '&', '|', 'x', '!', '+', '-', '*', '/', '%', '~', '[', ';', identifier",
			"expecting: '->', ':='",
			"expecting: ')', ','",
			"expecting: ':'",
			"expecting: 'a', 'b', 'f', 'r', 'n', 't', 'v', escape backslash, escape single quote, escape double quote, escape question mark, escape octal char, escape hex char, escape unicode char, escape default",
			"expecting: ']'",
			"expecting: ')', ']'",
			"expecting: '(', ')'",
        };*/
    private static int[] errors;
/*      {
			0, 1, 1, 1, 1, 1, 2, 2, 2, 1, 1, 2, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 2, 5, 0, 0, 5, 2, 2, 2, 2, 6, 7, 6, 6, 8, 2, 2, 9, 0, 5, 10, 10, 11, 6, 12, 12, 12, 12, 12, 12, 12, 12, 13, 14, 15, 4, 16, 17, 18, 19, 19, 19, 12, 19, 19, 20, 6, 20, 19, 21, 21, 22, 23, 20, 4, 4, 24, 25, 16, 19, 16, 16, 19, 26, 10, 6, 6, 10, 27, 28, 20, 20, 20, 20, 3, 20, 22, 20, 0, 4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 19, 16, 19, 20, 27, 6, 6, 20, 1, 6, 6, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}

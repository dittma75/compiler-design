/* This file was generated by SableCC (http://www.sablecc.org/). */

package wolf.analysis;

import java.util.*;
import wolf.node.*;

public class ReversedDepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getEOF().apply(this);
        node.getPProgram().apply(this);
        outStart(node);
    }

    public void inAUserDefsProgram(AUserDefsProgram node)
    {
        defaultIn(node);
    }

    public void outAUserDefsProgram(AUserDefsProgram node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUserDefsProgram(AUserDefsProgram node)
    {
        inAUserDefsProgram(node);
        if(node.getFunction() != null)
        {
            node.getFunction().apply(this);
        }
        if(node.getDefList() != null)
        {
            node.getDefList().apply(this);
        }
        outAUserDefsProgram(node);
    }

    public void inANoDefsProgram(ANoDefsProgram node)
    {
        defaultIn(node);
    }

    public void outANoDefsProgram(ANoDefsProgram node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANoDefsProgram(ANoDefsProgram node)
    {
        inANoDefsProgram(node);
        if(node.getFunction() != null)
        {
            node.getFunction().apply(this);
        }
        outANoDefsProgram(node);
    }

    public void inAMultipleDefsDefList(AMultipleDefsDefList node)
    {
        defaultIn(node);
    }

    public void outAMultipleDefsDefList(AMultipleDefsDefList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultipleDefsDefList(AMultipleDefsDefList node)
    {
        inAMultipleDefsDefList(node);
        if(node.getDefHeader() != null)
        {
            node.getDefHeader().apply(this);
        }
        if(node.getDefList() != null)
        {
            node.getDefList().apply(this);
        }
        outAMultipleDefsDefList(node);
    }

    public void inAOneDefDefList(AOneDefDefList node)
    {
        defaultIn(node);
    }

    public void outAOneDefDefList(AOneDefDefList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOneDefDefList(AOneDefDefList node)
    {
        inAOneDefDefList(node);
        if(node.getDefHeader() != null)
        {
            node.getDefHeader().apply(this);
        }
        outAOneDefDefList(node);
    }

    public void inADefHeader(ADefHeader node)
    {
        defaultIn(node);
    }

    public void outADefHeader(ADefHeader node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADefHeader(ADefHeader node)
    {
        inADefHeader(node);
        if(node.getFunction() != null)
        {
            node.getFunction().apply(this);
        }
        if(node.getAssign() != null)
        {
            node.getAssign().apply(this);
        }
        if(node.getSig() != null)
        {
            node.getSig().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getDef() != null)
        {
            node.getDef().apply(this);
        }
        outADefHeader(node);
    }

    public void inAEmptySig(AEmptySig node)
    {
        defaultIn(node);
    }

    public void outAEmptySig(AEmptySig node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEmptySig(AEmptySig node)
    {
        inAEmptySig(node);
        if(node.getRParen() != null)
        {
            node.getRParen().apply(this);
        }
        if(node.getLParen() != null)
        {
            node.getLParen().apply(this);
        }
        outAEmptySig(node);
    }

    public void inAArgumentsSig(AArgumentsSig node)
    {
        defaultIn(node);
    }

    public void outAArgumentsSig(AArgumentsSig node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArgumentsSig(AArgumentsSig node)
    {
        inAArgumentsSig(node);
        if(node.getRParen() != null)
        {
            node.getRParen().apply(this);
        }
        if(node.getSigArgs() != null)
        {
            node.getSigArgs().apply(this);
        }
        if(node.getLParen() != null)
        {
            node.getLParen().apply(this);
        }
        outAArgumentsSig(node);
    }

    public void inAMoreIdsSigArgs(AMoreIdsSigArgs node)
    {
        defaultIn(node);
    }

    public void outAMoreIdsSigArgs(AMoreIdsSigArgs node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMoreIdsSigArgs(AMoreIdsSigArgs node)
    {
        inAMoreIdsSigArgs(node);
        if(node.getSigArgRest() != null)
        {
            node.getSigArgRest().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAMoreIdsSigArgs(node);
    }

    public void inALastIdSigArgs(ALastIdSigArgs node)
    {
        defaultIn(node);
    }

    public void outALastIdSigArgs(ALastIdSigArgs node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALastIdSigArgs(ALastIdSigArgs node)
    {
        inALastIdSigArgs(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outALastIdSigArgs(node);
    }

    public void inASigArgRest(ASigArgRest node)
    {
        defaultIn(node);
    }

    public void outASigArgRest(ASigArgRest node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASigArgRest(ASigArgRest node)
    {
        inASigArgRest(node);
        if(node.getSigArgs() != null)
        {
            node.getSigArgs().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        outASigArgRest(node);
    }

    public void inAUserDefinedFunction(AUserDefinedFunction node)
    {
        defaultIn(node);
    }

    public void outAUserDefinedFunction(AUserDefinedFunction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUserDefinedFunction(AUserDefinedFunction node)
    {
        inAUserDefinedFunction(node);
        if(node.getArgList() != null)
        {
            node.getArgList().apply(this);
        }
        if(node.getUserFunc() != null)
        {
            node.getUserFunc().apply(this);
        }
        outAUserDefinedFunction(node);
    }

    public void inAUnaryNativeFunction(AUnaryNativeFunction node)
    {
        defaultIn(node);
    }

    public void outAUnaryNativeFunction(AUnaryNativeFunction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUnaryNativeFunction(AUnaryNativeFunction node)
    {
        inAUnaryNativeFunction(node);
        if(node.getRParen() != null)
        {
            node.getRParen().apply(this);
        }
        if(node.getArg() != null)
        {
            node.getArg().apply(this);
        }
        if(node.getLParen() != null)
        {
            node.getLParen().apply(this);
        }
        if(node.getNativeUnaryOp() != null)
        {
            node.getNativeUnaryOp().apply(this);
        }
        outAUnaryNativeFunction(node);
    }

    public void inABinNativeFunction(ABinNativeFunction node)
    {
        defaultIn(node);
    }

    public void outABinNativeFunction(ABinNativeFunction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABinNativeFunction(ABinNativeFunction node)
    {
        inABinNativeFunction(node);
        if(node.getRParen() != null)
        {
            node.getRParen().apply(this);
        }
        if(node.getB() != null)
        {
            node.getB().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getA() != null)
        {
            node.getA().apply(this);
        }
        if(node.getLParen() != null)
        {
            node.getLParen().apply(this);
        }
        if(node.getNativeBinOp() != null)
        {
            node.getNativeBinOp().apply(this);
        }
        outABinNativeFunction(node);
    }

    public void inAIfElseFunction(AIfElseFunction node)
    {
        defaultIn(node);
    }

    public void outAIfElseFunction(AIfElseFunction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfElseFunction(AIfElseFunction node)
    {
        inAIfElseFunction(node);
        if(node.getBranch() != null)
        {
            node.getBranch().apply(this);
        }
        outAIfElseFunction(node);
    }

    public void inAFoldlFunction(AFoldlFunction node)
    {
        defaultIn(node);
    }

    public void outAFoldlFunction(AFoldlFunction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFoldlFunction(AFoldlFunction node)
    {
        inAFoldlFunction(node);
        if(node.getFoldBody() != null)
        {
            node.getFoldBody().apply(this);
        }
        if(node.getFoldl() != null)
        {
            node.getFoldl().apply(this);
        }
        outAFoldlFunction(node);
    }

    public void inAFoldrFunction(AFoldrFunction node)
    {
        defaultIn(node);
    }

    public void outAFoldrFunction(AFoldrFunction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFoldrFunction(AFoldrFunction node)
    {
        inAFoldrFunction(node);
        if(node.getFoldBody() != null)
        {
            node.getFoldBody().apply(this);
        }
        if(node.getFoldr() != null)
        {
            node.getFoldr().apply(this);
        }
        outAFoldrFunction(node);
    }

    public void inAMapFunction(AMapFunction node)
    {
        defaultIn(node);
    }

    public void outAMapFunction(AMapFunction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMapFunction(AMapFunction node)
    {
        inAMapFunction(node);
        if(node.getRParen() != null)
        {
            node.getRParen().apply(this);
        }
        if(node.getListArgument() != null)
        {
            node.getListArgument().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getUnaryOp() != null)
        {
            node.getUnaryOp().apply(this);
        }
        if(node.getLParen() != null)
        {
            node.getLParen().apply(this);
        }
        if(node.getMap() != null)
        {
            node.getMap().apply(this);
        }
        outAMapFunction(node);
    }

    public void inALambda(ALambda node)
    {
        defaultIn(node);
    }

    public void outALambda(ALambda node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALambda(ALambda node)
    {
        inALambda(node);
        if(node.getRParen() != null)
        {
            node.getRParen().apply(this);
        }
        if(node.getFunction() != null)
        {
            node.getFunction().apply(this);
        }
        if(node.getLambdaArrow() != null)
        {
            node.getLambdaArrow().apply(this);
        }
        if(node.getSig() != null)
        {
            node.getSig().apply(this);
        }
        if(node.getLParen() != null)
        {
            node.getLParen().apply(this);
        }
        if(node.getLambdaStart() != null)
        {
            node.getLambdaStart().apply(this);
        }
        outALambda(node);
    }

    public void inAFoldBody(AFoldBody node)
    {
        defaultIn(node);
    }

    public void outAFoldBody(AFoldBody node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFoldBody(AFoldBody node)
    {
        inAFoldBody(node);
        if(node.getRParen() != null)
        {
            node.getRParen().apply(this);
        }
        if(node.getListArgument() != null)
        {
            node.getListArgument().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getBinOp() != null)
        {
            node.getBinOp().apply(this);
        }
        if(node.getLParen() != null)
        {
            node.getLParen().apply(this);
        }
        outAFoldBody(node);
    }

    public void inALiteralListArgument(ALiteralListArgument node)
    {
        defaultIn(node);
    }

    public void outALiteralListArgument(ALiteralListArgument node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALiteralListArgument(ALiteralListArgument node)
    {
        inALiteralListArgument(node);
        if(node.getList() != null)
        {
            node.getList().apply(this);
        }
        outALiteralListArgument(node);
    }

    public void inAUserDefinedListArgument(AUserDefinedListArgument node)
    {
        defaultIn(node);
    }

    public void outAUserDefinedListArgument(AUserDefinedListArgument node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUserDefinedListArgument(AUserDefinedListArgument node)
    {
        inAUserDefinedListArgument(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAUserDefinedListArgument(node);
    }

    public void inAReturnedListListArgument(AReturnedListListArgument node)
    {
        defaultIn(node);
    }

    public void outAReturnedListListArgument(AReturnedListListArgument node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAReturnedListListArgument(AReturnedListListArgument node)
    {
        inAReturnedListListArgument(node);
        if(node.getFunction() != null)
        {
            node.getFunction().apply(this);
        }
        outAReturnedListListArgument(node);
    }

    public void inANativeBinOp(ANativeBinOp node)
    {
        defaultIn(node);
    }

    public void outANativeBinOp(ANativeBinOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANativeBinOp(ANativeBinOp node)
    {
        inANativeBinOp(node);
        if(node.getNativeBinOp() != null)
        {
            node.getNativeBinOp().apply(this);
        }
        outANativeBinOp(node);
    }

    public void inAUserDefinedBinOp(AUserDefinedBinOp node)
    {
        defaultIn(node);
    }

    public void outAUserDefinedBinOp(AUserDefinedBinOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUserDefinedBinOp(AUserDefinedBinOp node)
    {
        inAUserDefinedBinOp(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAUserDefinedBinOp(node);
    }

    public void inALambdaBinOp(ALambdaBinOp node)
    {
        defaultIn(node);
    }

    public void outALambdaBinOp(ALambdaBinOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALambdaBinOp(ALambdaBinOp node)
    {
        inALambdaBinOp(node);
        if(node.getLambda() != null)
        {
            node.getLambda().apply(this);
        }
        outALambdaBinOp(node);
    }

    public void inAPlusNativeBinOp(APlusNativeBinOp node)
    {
        defaultIn(node);
    }

    public void outAPlusNativeBinOp(APlusNativeBinOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPlusNativeBinOp(APlusNativeBinOp node)
    {
        inAPlusNativeBinOp(node);
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        outAPlusNativeBinOp(node);
    }

    public void inAMinusNativeBinOp(AMinusNativeBinOp node)
    {
        defaultIn(node);
    }

    public void outAMinusNativeBinOp(AMinusNativeBinOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMinusNativeBinOp(AMinusNativeBinOp node)
    {
        inAMinusNativeBinOp(node);
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        outAMinusNativeBinOp(node);
    }

    public void inAMultNativeBinOp(AMultNativeBinOp node)
    {
        defaultIn(node);
    }

    public void outAMultNativeBinOp(AMultNativeBinOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultNativeBinOp(AMultNativeBinOp node)
    {
        inAMultNativeBinOp(node);
        if(node.getMult() != null)
        {
            node.getMult().apply(this);
        }
        outAMultNativeBinOp(node);
    }

    public void inADivNativeBinOp(ADivNativeBinOp node)
    {
        defaultIn(node);
    }

    public void outADivNativeBinOp(ADivNativeBinOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivNativeBinOp(ADivNativeBinOp node)
    {
        inADivNativeBinOp(node);
        if(node.getDiv() != null)
        {
            node.getDiv().apply(this);
        }
        outADivNativeBinOp(node);
    }

    public void inAModNativeBinOp(AModNativeBinOp node)
    {
        defaultIn(node);
    }

    public void outAModNativeBinOp(AModNativeBinOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAModNativeBinOp(AModNativeBinOp node)
    {
        inAModNativeBinOp(node);
        if(node.getMod() != null)
        {
            node.getMod().apply(this);
        }
        outAModNativeBinOp(node);
    }

    public void inALessNativeBinOp(ALessNativeBinOp node)
    {
        defaultIn(node);
    }

    public void outALessNativeBinOp(ALessNativeBinOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALessNativeBinOp(ALessNativeBinOp node)
    {
        inALessNativeBinOp(node);
        if(node.getLt() != null)
        {
            node.getLt().apply(this);
        }
        outALessNativeBinOp(node);
    }

    public void inAGreaterNativeBinOp(AGreaterNativeBinOp node)
    {
        defaultIn(node);
    }

    public void outAGreaterNativeBinOp(AGreaterNativeBinOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGreaterNativeBinOp(AGreaterNativeBinOp node)
    {
        inAGreaterNativeBinOp(node);
        if(node.getGt() != null)
        {
            node.getGt().apply(this);
        }
        outAGreaterNativeBinOp(node);
    }

    public void inALessEqualNativeBinOp(ALessEqualNativeBinOp node)
    {
        defaultIn(node);
    }

    public void outALessEqualNativeBinOp(ALessEqualNativeBinOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALessEqualNativeBinOp(ALessEqualNativeBinOp node)
    {
        inALessEqualNativeBinOp(node);
        if(node.getLte() != null)
        {
            node.getLte().apply(this);
        }
        outALessEqualNativeBinOp(node);
    }

    public void inAGreaterEqualNativeBinOp(AGreaterEqualNativeBinOp node)
    {
        defaultIn(node);
    }

    public void outAGreaterEqualNativeBinOp(AGreaterEqualNativeBinOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGreaterEqualNativeBinOp(AGreaterEqualNativeBinOp node)
    {
        inAGreaterEqualNativeBinOp(node);
        if(node.getGte() != null)
        {
            node.getGte().apply(this);
        }
        outAGreaterEqualNativeBinOp(node);
    }

    public void inAEqualNativeBinOp(AEqualNativeBinOp node)
    {
        defaultIn(node);
    }

    public void outAEqualNativeBinOp(AEqualNativeBinOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEqualNativeBinOp(AEqualNativeBinOp node)
    {
        inAEqualNativeBinOp(node);
        if(node.getEqual() != null)
        {
            node.getEqual().apply(this);
        }
        outAEqualNativeBinOp(node);
    }

    public void inANotEqualNativeBinOp(ANotEqualNativeBinOp node)
    {
        defaultIn(node);
    }

    public void outANotEqualNativeBinOp(ANotEqualNativeBinOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANotEqualNativeBinOp(ANotEqualNativeBinOp node)
    {
        inANotEqualNativeBinOp(node);
        if(node.getNotEqual() != null)
        {
            node.getNotEqual().apply(this);
        }
        outANotEqualNativeBinOp(node);
    }

    public void inAAndNativeBinOp(AAndNativeBinOp node)
    {
        defaultIn(node);
    }

    public void outAAndNativeBinOp(AAndNativeBinOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAndNativeBinOp(AAndNativeBinOp node)
    {
        inAAndNativeBinOp(node);
        if(node.getAnd() != null)
        {
            node.getAnd().apply(this);
        }
        outAAndNativeBinOp(node);
    }

    public void inAOrNativeBinOp(AOrNativeBinOp node)
    {
        defaultIn(node);
    }

    public void outAOrNativeBinOp(AOrNativeBinOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOrNativeBinOp(AOrNativeBinOp node)
    {
        inAOrNativeBinOp(node);
        if(node.getOr() != null)
        {
            node.getOr().apply(this);
        }
        outAOrNativeBinOp(node);
    }

    public void inAXorNativeBinOp(AXorNativeBinOp node)
    {
        defaultIn(node);
    }

    public void outAXorNativeBinOp(AXorNativeBinOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAXorNativeBinOp(AXorNativeBinOp node)
    {
        inAXorNativeBinOp(node);
        if(node.getXor() != null)
        {
            node.getXor().apply(this);
        }
        outAXorNativeBinOp(node);
    }

    public void inAAppendNativeBinOp(AAppendNativeBinOp node)
    {
        defaultIn(node);
    }

    public void outAAppendNativeBinOp(AAppendNativeBinOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAppendNativeBinOp(AAppendNativeBinOp node)
    {
        inAAppendNativeBinOp(node);
        if(node.getAppend() != null)
        {
            node.getAppend().apply(this);
        }
        outAAppendNativeBinOp(node);
    }

    public void inAPrependNativeBinOp(APrependNativeBinOp node)
    {
        defaultIn(node);
    }

    public void outAPrependNativeBinOp(APrependNativeBinOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrependNativeBinOp(APrependNativeBinOp node)
    {
        inAPrependNativeBinOp(node);
        if(node.getPrepend() != null)
        {
            node.getPrepend().apply(this);
        }
        outAPrependNativeBinOp(node);
    }

    public void inANativeUnaryOp(ANativeUnaryOp node)
    {
        defaultIn(node);
    }

    public void outANativeUnaryOp(ANativeUnaryOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANativeUnaryOp(ANativeUnaryOp node)
    {
        inANativeUnaryOp(node);
        if(node.getNativeUnaryOp() != null)
        {
            node.getNativeUnaryOp().apply(this);
        }
        outANativeUnaryOp(node);
    }

    public void inAUserDefinedUnaryOp(AUserDefinedUnaryOp node)
    {
        defaultIn(node);
    }

    public void outAUserDefinedUnaryOp(AUserDefinedUnaryOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUserDefinedUnaryOp(AUserDefinedUnaryOp node)
    {
        inAUserDefinedUnaryOp(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAUserDefinedUnaryOp(node);
    }

    public void inALambdaUnaryOp(ALambdaUnaryOp node)
    {
        defaultIn(node);
    }

    public void outALambdaUnaryOp(ALambdaUnaryOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALambdaUnaryOp(ALambdaUnaryOp node)
    {
        inALambdaUnaryOp(node);
        if(node.getLambda() != null)
        {
            node.getLambda().apply(this);
        }
        outALambdaUnaryOp(node);
    }

    public void inAArithmeticNotNativeUnaryOp(AArithmeticNotNativeUnaryOp node)
    {
        defaultIn(node);
    }

    public void outAArithmeticNotNativeUnaryOp(AArithmeticNotNativeUnaryOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArithmeticNotNativeUnaryOp(AArithmeticNotNativeUnaryOp node)
    {
        inAArithmeticNotNativeUnaryOp(node);
        if(node.getNeg() != null)
        {
            node.getNeg().apply(this);
        }
        outAArithmeticNotNativeUnaryOp(node);
    }

    public void inALogicalNotNativeUnaryOp(ALogicalNotNativeUnaryOp node)
    {
        defaultIn(node);
    }

    public void outALogicalNotNativeUnaryOp(ALogicalNotNativeUnaryOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALogicalNotNativeUnaryOp(ALogicalNotNativeUnaryOp node)
    {
        inALogicalNotNativeUnaryOp(node);
        if(node.getLogicalNot() != null)
        {
            node.getLogicalNot().apply(this);
        }
        outALogicalNotNativeUnaryOp(node);
    }

    public void inAHeadNativeUnaryOp(AHeadNativeUnaryOp node)
    {
        defaultIn(node);
    }

    public void outAHeadNativeUnaryOp(AHeadNativeUnaryOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAHeadNativeUnaryOp(AHeadNativeUnaryOp node)
    {
        inAHeadNativeUnaryOp(node);
        if(node.getHead() != null)
        {
            node.getHead().apply(this);
        }
        outAHeadNativeUnaryOp(node);
    }

    public void inATailNativeUnaryOp(ATailNativeUnaryOp node)
    {
        defaultIn(node);
    }

    public void outATailNativeUnaryOp(ATailNativeUnaryOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATailNativeUnaryOp(ATailNativeUnaryOp node)
    {
        inATailNativeUnaryOp(node);
        if(node.getTail() != null)
        {
            node.getTail().apply(this);
        }
        outATailNativeUnaryOp(node);
    }

    public void inAReverseNativeUnaryOp(AReverseNativeUnaryOp node)
    {
        defaultIn(node);
    }

    public void outAReverseNativeUnaryOp(AReverseNativeUnaryOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAReverseNativeUnaryOp(AReverseNativeUnaryOp node)
    {
        inAReverseNativeUnaryOp(node);
        if(node.getReverse() != null)
        {
            node.getReverse().apply(this);
        }
        outAReverseNativeUnaryOp(node);
    }

    public void inAFlattenNativeUnaryOp(AFlattenNativeUnaryOp node)
    {
        defaultIn(node);
    }

    public void outAFlattenNativeUnaryOp(AFlattenNativeUnaryOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFlattenNativeUnaryOp(AFlattenNativeUnaryOp node)
    {
        inAFlattenNativeUnaryOp(node);
        if(node.getFlatten() != null)
        {
            node.getFlatten().apply(this);
        }
        outAFlattenNativeUnaryOp(node);
    }

    public void inAIdentityNativeUnaryOp(AIdentityNativeUnaryOp node)
    {
        defaultIn(node);
    }

    public void outAIdentityNativeUnaryOp(AIdentityNativeUnaryOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdentityNativeUnaryOp(AIdentityNativeUnaryOp node)
    {
        inAIdentityNativeUnaryOp(node);
        if(node.getIdentity() != null)
        {
            node.getIdentity().apply(this);
        }
        outAIdentityNativeUnaryOp(node);
    }

    public void inAPrintNativeUnaryOp(APrintNativeUnaryOp node)
    {
        defaultIn(node);
    }

    public void outAPrintNativeUnaryOp(APrintNativeUnaryOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrintNativeUnaryOp(APrintNativeUnaryOp node)
    {
        inAPrintNativeUnaryOp(node);
        if(node.getPrint() != null)
        {
            node.getPrint().apply(this);
        }
        outAPrintNativeUnaryOp(node);
    }

    public void inALengthNativeUnaryOp(ALengthNativeUnaryOp node)
    {
        defaultIn(node);
    }

    public void outALengthNativeUnaryOp(ALengthNativeUnaryOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALengthNativeUnaryOp(ALengthNativeUnaryOp node)
    {
        inALengthNativeUnaryOp(node);
        if(node.getLength() != null)
        {
            node.getLength().apply(this);
        }
        outALengthNativeUnaryOp(node);
    }

    public void inAUserDefinedUserFunc(AUserDefinedUserFunc node)
    {
        defaultIn(node);
    }

    public void outAUserDefinedUserFunc(AUserDefinedUserFunc node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUserDefinedUserFunc(AUserDefinedUserFunc node)
    {
        inAUserDefinedUserFunc(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAUserDefinedUserFunc(node);
    }

    public void inALambdaUserFunc(ALambdaUserFunc node)
    {
        defaultIn(node);
    }

    public void outALambdaUserFunc(ALambdaUserFunc node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALambdaUserFunc(ALambdaUserFunc node)
    {
        inALambdaUserFunc(node);
        if(node.getLambda() != null)
        {
            node.getLambda().apply(this);
        }
        outALambdaUserFunc(node);
    }

    public void inANoArgsArgList(ANoArgsArgList node)
    {
        defaultIn(node);
    }

    public void outANoArgsArgList(ANoArgsArgList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANoArgsArgList(ANoArgsArgList node)
    {
        inANoArgsArgList(node);
        if(node.getRParen() != null)
        {
            node.getRParen().apply(this);
        }
        if(node.getLParen() != null)
        {
            node.getLParen().apply(this);
        }
        outANoArgsArgList(node);
    }

    public void inAHasArgsArgList(AHasArgsArgList node)
    {
        defaultIn(node);
    }

    public void outAHasArgsArgList(AHasArgsArgList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAHasArgsArgList(AHasArgsArgList node)
    {
        inAHasArgsArgList(node);
        if(node.getRParen() != null)
        {
            node.getRParen().apply(this);
        }
        if(node.getArgs() != null)
        {
            node.getArgs().apply(this);
        }
        if(node.getLParen() != null)
        {
            node.getLParen().apply(this);
        }
        outAHasArgsArgList(node);
    }

    public void inAMoreArgsArgs(AMoreArgsArgs node)
    {
        defaultIn(node);
    }

    public void outAMoreArgsArgs(AMoreArgsArgs node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMoreArgsArgs(AMoreArgsArgs node)
    {
        inAMoreArgsArgs(node);
        if(node.getArgRest() != null)
        {
            node.getArgRest().apply(this);
        }
        if(node.getArg() != null)
        {
            node.getArg().apply(this);
        }
        outAMoreArgsArgs(node);
    }

    public void inALastArgArgs(ALastArgArgs node)
    {
        defaultIn(node);
    }

    public void outALastArgArgs(ALastArgArgs node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALastArgArgs(ALastArgArgs node)
    {
        inALastArgArgs(node);
        if(node.getArg() != null)
        {
            node.getArg().apply(this);
        }
        outALastArgArgs(node);
    }

    public void inAArgRest(AArgRest node)
    {
        defaultIn(node);
    }

    public void outAArgRest(AArgRest node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArgRest(AArgRest node)
    {
        inAArgRest(node);
        if(node.getArgs() != null)
        {
            node.getArgs().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        outAArgRest(node);
    }

    public void inAFunctionArg(AFunctionArg node)
    {
        defaultIn(node);
    }

    public void outAFunctionArg(AFunctionArg node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFunctionArg(AFunctionArg node)
    {
        inAFunctionArg(node);
        if(node.getFunction() != null)
        {
            node.getFunction().apply(this);
        }
        outAFunctionArg(node);
    }

    public void inAListArg(AListArg node)
    {
        defaultIn(node);
    }

    public void outAListArg(AListArg node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListArg(AListArg node)
    {
        inAListArg(node);
        if(node.getList() != null)
        {
            node.getList().apply(this);
        }
        outAListArg(node);
    }

    public void inAIntArg(AIntArg node)
    {
        defaultIn(node);
    }

    public void outAIntArg(AIntArg node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntArg(AIntArg node)
    {
        inAIntArg(node);
        if(node.getIntNumber() != null)
        {
            node.getIntNumber().apply(this);
        }
        outAIntArg(node);
    }

    public void inAFloatArg(AFloatArg node)
    {
        defaultIn(node);
    }

    public void outAFloatArg(AFloatArg node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFloatArg(AFloatArg node)
    {
        inAFloatArg(node);
        if(node.getFloatNumber() != null)
        {
            node.getFloatNumber().apply(this);
        }
        outAFloatArg(node);
    }

    public void inAIdentifierArg(AIdentifierArg node)
    {
        defaultIn(node);
    }

    public void outAIdentifierArg(AIdentifierArg node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdentifierArg(AIdentifierArg node)
    {
        inAIdentifierArg(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAIdentifierArg(node);
    }

    public void inAStringArg(AStringArg node)
    {
        defaultIn(node);
    }

    public void outAStringArg(AStringArg node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStringArg(AStringArg node)
    {
        inAStringArg(node);
        if(node.getString() != null)
        {
            node.getString().apply(this);
        }
        outAStringArg(node);
    }

    public void inAEmptyStringString(AEmptyStringString node)
    {
        defaultIn(node);
    }

    public void outAEmptyStringString(AEmptyStringString node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEmptyStringString(AEmptyStringString node)
    {
        inAEmptyStringString(node);
        if(node.getStringEnd() != null)
        {
            node.getStringEnd().apply(this);
        }
        if(node.getStringStart() != null)
        {
            node.getStringStart().apply(this);
        }
        outAEmptyStringString(node);
    }

    public void inAStringString(AStringString node)
    {
        defaultIn(node);
    }

    public void outAStringString(AStringString node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStringString(AStringString node)
    {
        inAStringString(node);
        if(node.getStringEnd() != null)
        {
            node.getStringEnd().apply(this);
        }
        if(node.getStringMiddle() != null)
        {
            node.getStringMiddle().apply(this);
        }
        if(node.getStringStart() != null)
        {
            node.getStringStart().apply(this);
        }
        outAStringString(node);
    }

    public void inAMoreBodyStringMiddle(AMoreBodyStringMiddle node)
    {
        defaultIn(node);
    }

    public void outAMoreBodyStringMiddle(AMoreBodyStringMiddle node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMoreBodyStringMiddle(AMoreBodyStringMiddle node)
    {
        inAMoreBodyStringMiddle(node);
        if(node.getStringBody() != null)
        {
            node.getStringBody().apply(this);
        }
        if(node.getStringMiddle() != null)
        {
            node.getStringMiddle().apply(this);
        }
        outAMoreBodyStringMiddle(node);
    }

    public void inALastBodyStringMiddle(ALastBodyStringMiddle node)
    {
        defaultIn(node);
    }

    public void outALastBodyStringMiddle(ALastBodyStringMiddle node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALastBodyStringMiddle(ALastBodyStringMiddle node)
    {
        inALastBodyStringMiddle(node);
        if(node.getStringBody() != null)
        {
            node.getStringBody().apply(this);
        }
        outALastBodyStringMiddle(node);
    }

    public void inAMoreEscapeStringMiddle(AMoreEscapeStringMiddle node)
    {
        defaultIn(node);
    }

    public void outAMoreEscapeStringMiddle(AMoreEscapeStringMiddle node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMoreEscapeStringMiddle(AMoreEscapeStringMiddle node)
    {
        inAMoreEscapeStringMiddle(node);
        if(node.getStringEscapeSeq() != null)
        {
            node.getStringEscapeSeq().apply(this);
        }
        if(node.getStringMiddle() != null)
        {
            node.getStringMiddle().apply(this);
        }
        outAMoreEscapeStringMiddle(node);
    }

    public void inALastEscapeStringMiddle(ALastEscapeStringMiddle node)
    {
        defaultIn(node);
    }

    public void outALastEscapeStringMiddle(ALastEscapeStringMiddle node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALastEscapeStringMiddle(ALastEscapeStringMiddle node)
    {
        inALastEscapeStringMiddle(node);
        if(node.getStringEscapeSeq() != null)
        {
            node.getStringEscapeSeq().apply(this);
        }
        outALastEscapeStringMiddle(node);
    }

    public void inAStringEscapeSeq(AStringEscapeSeq node)
    {
        defaultIn(node);
    }

    public void outAStringEscapeSeq(AStringEscapeSeq node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStringEscapeSeq(AStringEscapeSeq node)
    {
        inAStringEscapeSeq(node);
        if(node.getEscapeChar() != null)
        {
            node.getEscapeChar().apply(this);
        }
        if(node.getStringEscape() != null)
        {
            node.getStringEscape().apply(this);
        }
        outAStringEscapeSeq(node);
    }

    public void inAAlarmEscapeChar(AAlarmEscapeChar node)
    {
        defaultIn(node);
    }

    public void outAAlarmEscapeChar(AAlarmEscapeChar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAlarmEscapeChar(AAlarmEscapeChar node)
    {
        inAAlarmEscapeChar(node);
        if(node.getEscapeAlarm() != null)
        {
            node.getEscapeAlarm().apply(this);
        }
        outAAlarmEscapeChar(node);
    }

    public void inABackspaceEscapeChar(ABackspaceEscapeChar node)
    {
        defaultIn(node);
    }

    public void outABackspaceEscapeChar(ABackspaceEscapeChar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABackspaceEscapeChar(ABackspaceEscapeChar node)
    {
        inABackspaceEscapeChar(node);
        if(node.getEscapeBackspace() != null)
        {
            node.getEscapeBackspace().apply(this);
        }
        outABackspaceEscapeChar(node);
    }

    public void inAFormfeedEscapeChar(AFormfeedEscapeChar node)
    {
        defaultIn(node);
    }

    public void outAFormfeedEscapeChar(AFormfeedEscapeChar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFormfeedEscapeChar(AFormfeedEscapeChar node)
    {
        inAFormfeedEscapeChar(node);
        if(node.getEscapeFormfeed() != null)
        {
            node.getEscapeFormfeed().apply(this);
        }
        outAFormfeedEscapeChar(node);
    }

    public void inACrEscapeChar(ACrEscapeChar node)
    {
        defaultIn(node);
    }

    public void outACrEscapeChar(ACrEscapeChar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACrEscapeChar(ACrEscapeChar node)
    {
        inACrEscapeChar(node);
        if(node.getEscapeCarriageReturn() != null)
        {
            node.getEscapeCarriageReturn().apply(this);
        }
        outACrEscapeChar(node);
    }

    public void inANewlineEscapeChar(ANewlineEscapeChar node)
    {
        defaultIn(node);
    }

    public void outANewlineEscapeChar(ANewlineEscapeChar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANewlineEscapeChar(ANewlineEscapeChar node)
    {
        inANewlineEscapeChar(node);
        if(node.getEscapeNewline() != null)
        {
            node.getEscapeNewline().apply(this);
        }
        outANewlineEscapeChar(node);
    }

    public void inATabEscapeChar(ATabEscapeChar node)
    {
        defaultIn(node);
    }

    public void outATabEscapeChar(ATabEscapeChar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATabEscapeChar(ATabEscapeChar node)
    {
        inATabEscapeChar(node);
        if(node.getEscapeTab() != null)
        {
            node.getEscapeTab().apply(this);
        }
        outATabEscapeChar(node);
    }

    public void inAVerticalTabEscapeChar(AVerticalTabEscapeChar node)
    {
        defaultIn(node);
    }

    public void outAVerticalTabEscapeChar(AVerticalTabEscapeChar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVerticalTabEscapeChar(AVerticalTabEscapeChar node)
    {
        inAVerticalTabEscapeChar(node);
        if(node.getEscapeVerticalTab() != null)
        {
            node.getEscapeVerticalTab().apply(this);
        }
        outAVerticalTabEscapeChar(node);
    }

    public void inABackslashEscapeChar(ABackslashEscapeChar node)
    {
        defaultIn(node);
    }

    public void outABackslashEscapeChar(ABackslashEscapeChar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABackslashEscapeChar(ABackslashEscapeChar node)
    {
        inABackslashEscapeChar(node);
        if(node.getEscapeBackslash() != null)
        {
            node.getEscapeBackslash().apply(this);
        }
        outABackslashEscapeChar(node);
    }

    public void inASingleQuoteEscapeChar(ASingleQuoteEscapeChar node)
    {
        defaultIn(node);
    }

    public void outASingleQuoteEscapeChar(ASingleQuoteEscapeChar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASingleQuoteEscapeChar(ASingleQuoteEscapeChar node)
    {
        inASingleQuoteEscapeChar(node);
        if(node.getEscapeSingleQuote() != null)
        {
            node.getEscapeSingleQuote().apply(this);
        }
        outASingleQuoteEscapeChar(node);
    }

    public void inADoubleQuoteEscapeChar(ADoubleQuoteEscapeChar node)
    {
        defaultIn(node);
    }

    public void outADoubleQuoteEscapeChar(ADoubleQuoteEscapeChar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADoubleQuoteEscapeChar(ADoubleQuoteEscapeChar node)
    {
        inADoubleQuoteEscapeChar(node);
        if(node.getEscapeDoubleQuote() != null)
        {
            node.getEscapeDoubleQuote().apply(this);
        }
        outADoubleQuoteEscapeChar(node);
    }

    public void inAQuestionMarkEscapeChar(AQuestionMarkEscapeChar node)
    {
        defaultIn(node);
    }

    public void outAQuestionMarkEscapeChar(AQuestionMarkEscapeChar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAQuestionMarkEscapeChar(AQuestionMarkEscapeChar node)
    {
        inAQuestionMarkEscapeChar(node);
        if(node.getEscapeQuestionMark() != null)
        {
            node.getEscapeQuestionMark().apply(this);
        }
        outAQuestionMarkEscapeChar(node);
    }

    public void inAOctalEscapeChar(AOctalEscapeChar node)
    {
        defaultIn(node);
    }

    public void outAOctalEscapeChar(AOctalEscapeChar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOctalEscapeChar(AOctalEscapeChar node)
    {
        inAOctalEscapeChar(node);
        if(node.getEscapeOctalChar() != null)
        {
            node.getEscapeOctalChar().apply(this);
        }
        outAOctalEscapeChar(node);
    }

    public void inAHexEscapeChar(AHexEscapeChar node)
    {
        defaultIn(node);
    }

    public void outAHexEscapeChar(AHexEscapeChar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAHexEscapeChar(AHexEscapeChar node)
    {
        inAHexEscapeChar(node);
        if(node.getEscapeHexChar() != null)
        {
            node.getEscapeHexChar().apply(this);
        }
        outAHexEscapeChar(node);
    }

    public void inAUnicodeEscapeChar(AUnicodeEscapeChar node)
    {
        defaultIn(node);
    }

    public void outAUnicodeEscapeChar(AUnicodeEscapeChar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUnicodeEscapeChar(AUnicodeEscapeChar node)
    {
        inAUnicodeEscapeChar(node);
        if(node.getEscapeUnicodeChar() != null)
        {
            node.getEscapeUnicodeChar().apply(this);
        }
        outAUnicodeEscapeChar(node);
    }

    public void inADefaultEscapeChar(ADefaultEscapeChar node)
    {
        defaultIn(node);
    }

    public void outADefaultEscapeChar(ADefaultEscapeChar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADefaultEscapeChar(ADefaultEscapeChar node)
    {
        inADefaultEscapeChar(node);
        if(node.getEscapeDefault() != null)
        {
            node.getEscapeDefault().apply(this);
        }
        outADefaultEscapeChar(node);
    }

    public void inABranch(ABranch node)
    {
        defaultIn(node);
    }

    public void outABranch(ABranch node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABranch(ABranch node)
    {
        inABranch(node);
        if(node.getElse() != null)
        {
            node.getElse().apply(this);
        }
        if(node.getTernaryColon() != null)
        {
            node.getTernaryColon().apply(this);
        }
        if(node.getIf() != null)
        {
            node.getIf().apply(this);
        }
        if(node.getTernaryQuestionMark() != null)
        {
            node.getTernaryQuestionMark().apply(this);
        }
        if(node.getCond() != null)
        {
            node.getCond().apply(this);
        }
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        outABranch(node);
    }

    public void inAEmptyListList(AEmptyListList node)
    {
        defaultIn(node);
    }

    public void outAEmptyListList(AEmptyListList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEmptyListList(AEmptyListList node)
    {
        inAEmptyListList(node);
        if(node.getEndList() != null)
        {
            node.getEndList().apply(this);
        }
        if(node.getStartList() != null)
        {
            node.getStartList().apply(this);
        }
        outAEmptyListList(node);
    }

    public void inAListList(AListList node)
    {
        defaultIn(node);
    }

    public void outAListList(AListList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListList(AListList node)
    {
        inAListList(node);
        if(node.getEndList() != null)
        {
            node.getEndList().apply(this);
        }
        if(node.getArgs() != null)
        {
            node.getArgs().apply(this);
        }
        if(node.getStartList() != null)
        {
            node.getStartList().apply(this);
        }
        outAListList(node);
    }
}

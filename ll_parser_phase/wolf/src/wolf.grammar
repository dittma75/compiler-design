// Kevin Dittmar
// William Ezekiel
// Joe Alacqua

// Lexer for WOL(F) - Write-Only Language (Functional)
Package wolf;

Helpers
letter = ['a'..'z'] | ['A'..'Z'];
digit = ['0'..'9'];
// one or more digits
digits = digit+;
exp = ['e'+'E'] ['+'+'-']? digits;
newline = [10 + 13];
single_quote = ''';
double_quote = '"';
back_tick = '`';
underscore = '_';
backslash = '\';
question_mark = '?';
semi = ';';

States
initial, string, escape;

Tokens
// Strings
{initial->string} string_start = single_quote;

{string->escape} string_escape = backslash;
{escape->string} escape_alarm = 'a';
{escape->string} escape_backspace = 'b';
{escape->string} escape_formfeed = 'f';
{escape->string} escape_carriage_return = 'r';
{escape->string} escape_newline = 'n';
{escape->string} escape_tab = 't';
{escape->string} escape_vertical_tab = 'v';
{escape->string} escape_backslash = backslash;
{escape->string} escape_single_quote = single_quote;
{escape->string} escape_double_quote = double_quote;
{escape->string} escape_question_mark = question_mark;
{escape->string} escape_octal_char = digit digit digit;
{escape->string} escape_hex_char = 'x' digit digit;
{escape->string} escape_unicode_char = 'u' digit digit digit digit;
{escape->string} escape_default = [0..0xffff];

{string} string_body = [[[0..0xffff] - single_quote] - backslash]*;

{string->initial} string_end = single_quote;

// list operators
head = 'h';
tail = 't';
reverse = 'r';
append = '$';
prepend = '^';
foldl = '{';
foldr = '}';
map = '.';
flatten = underscore;
length = '#';

// other operators
lambda_start = '\';
lambda_arrow = '->';
identity = '@';
print = 'print';
def = 'def';

comment = back_tick [[0..0xffff] - back_tick]* back_tick;
space = ' ' | 9 | newline;

assign = ':=';

// relational operators
equal = '=';
lt = '<';
gt = '>';
not_equal = '!=';
lte = '<=';
gte = '>=';
and = '&';
or = '|';
xor = 'x';
logical_not  = '!';

// arithmetic operators
plus = '+';
minus = '-';
mult = '*';
div = '/';
mod = '%';
neg = '~';

// delimiter characters
l_paren = '(';
r_paren = ')';
start_list = '[';
end_list = ']';
comma = ',';
ternary_semi = semi;
ternary_question_mark = question_mark;
ternary_colon = ':';

// constants
identifier = (letter|underscore)+;
int_number = digits;
float_number = (digits '.'? digits? | '.' digits)exp?;

misc = [0..0xffff]; // catch all for any garbage.

Ignored Tokens
comment, space;

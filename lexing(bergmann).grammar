// Here's Bergmann's lexing.grammar file from last class, we might be able to pull bits from this or just use it as a base.

Package lexing;

Helpers
letter = ['a'..'z'] | ['A'..'Z'];
digit = ['0'..'9'];
digits = digit+;        // one or more digits
exp = ['e'+'E'] ['+'+'-']? digits;
newline = [10 + 13];

Tokens
comment = '//' [[0..0xffff]-newline]* newline;
space = ' ' | 9 | newline;
clas = 'class'; // Class is in java.lang (class doesn't work as a token name).
public = 'public';
static = 'static';
while = 'while';
for = 'for';
if = 'if';

assign = '=';
compare = '==' | '<' | '>' | '<=' | '>=' | '!=';
and = '&&';
or = '||';
not = '!';
plus = '+';
minus = '-';
mult = '*';
l_par = '(';
r_par = ')';
l_brace = '{';
r_brace = '}';
l_bracket = '[';
r_bracket = ']';
dot = '.';
comma = ',';
semi = ';';

identifier = letter (letter|digit|'_')*;
int_number = digits;
float_number = (digits '.'? digits? | '.' digits)exp?;
misc = [0..0xffff]; // catch all for any garbage.

Ignored Tokens
comment, space;

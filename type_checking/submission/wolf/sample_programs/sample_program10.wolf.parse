SigArgs parsed successfully: def int func ( int q 
Sig parsed successfully: def int func ( int q ) 
SigArgRest parsed successfully: def int func ( int q ) := \ ( ( int y , int z 
SigArgs parsed successfully: def int func ( int q ) := \ ( ( int y , int z 
Sig parsed successfully: def int func ( int q ) := \ ( ( int y , int z ) 
SigArgRest parsed successfully: def int func ( int q ) := \ ( ( int y , int z ) -> + ( \ ( ( int n , int z 
SigArgs parsed successfully: def int func ( int q ) := \ ( ( int y , int z ) -> + ( \ ( ( int n , int z 
Sig parsed successfully: def int func ( int q ) := \ ( ( int y , int z ) -> + ( \ ( ( int n , int z ) 
Arg parsed successfully: def int func ( int q ) := \ ( ( int y , int z ) -> + ( \ ( ( int n , int z ) -> * ( n 
Arg parsed successfully: def int func ( int q ) := \ ( ( int y , int z ) -> + ( \ ( ( int n , int z ) -> * ( n , z 
NativeBinary parsed successfully: def int func ( int q ) := \ ( ( int y , int z ) -> + ( \ ( ( int n , int z ) -> * ( n , z ) 
Lambda parsed successfully: def int func ( int q ) := \ ( ( int y , int z ) -> + ( \ ( ( int n , int z ) -> * ( n , z ) ) 
Arg parsed successfully: def int func ( int q ) := \ ( ( int y , int z ) -> + ( \ ( ( int n , int z ) -> * ( n , z ) ) ( q 
Arg parsed successfully: def int func ( int q ) := \ ( ( int y , int z ) -> + ( \ ( ( int n , int z ) -> * ( n , z ) ) ( q , y 
ArgRest parsed successfully: def int func ( int q ) := \ ( ( int y , int z ) -> + ( \ ( ( int n , int z ) -> * ( n , z ) ) ( q , y 
Args parsed successfully: def int func ( int q ) := \ ( ( int y , int z ) -> + ( \ ( ( int n , int z ) -> * ( n , z ) ) ( q , y 
ArgList parsed successfully: def int func ( int q ) := \ ( ( int y , int z ) -> + ( \ ( ( int n , int z ) -> * ( n , z ) ) ( q , y ) 
Arg parsed successfully: def int func ( int q ) := \ ( ( int y , int z ) -> + ( \ ( ( int n , int z ) -> * ( n , z ) ) ( q , y ) 
Arg parsed successfully: def int func ( int q ) := \ ( ( int y , int z ) -> + ( \ ( ( int n , int z ) -> * ( n , z ) ) ( q , y ) , z 
NativeBinary parsed successfully: def int func ( int q ) := \ ( ( int y , int z ) -> + ( \ ( ( int n , int z ) -> * ( n , z ) ) ( q , y ) , z ) 
Lambda parsed successfully: def int func ( int q ) := \ ( ( int y , int z ) -> + ( \ ( ( int n , int z ) -> * ( n , z ) ) ( q , y ) , z ) ) 
UserFunc parsed successfully: def int func ( int q ) := \ ( ( int y , int z ) -> + ( \ ( ( int n , int z ) -> * ( n , z ) ) ( q , y ) , z ) ) 
Arg parsed successfully: def int func ( int q ) := \ ( ( int y , int z ) -> + ( \ ( ( int n , int z ) -> * ( n , z ) ) ( q , y ) , z ) ) ( 3 
Arg parsed successfully: def int func ( int q ) := \ ( ( int y , int z ) -> + ( \ ( ( int n , int z ) -> * ( n , z ) ) ( q , y ) , z ) ) ( 3 , 7 
ArgRest parsed successfully: def int func ( int q ) := \ ( ( int y , int z ) -> + ( \ ( ( int n , int z ) -> * ( n , z ) ) ( q , y ) , z ) ) ( 3 , 7 
Args parsed successfully: def int func ( int q ) := \ ( ( int y , int z ) -> + ( \ ( ( int n , int z ) -> * ( n , z ) ) ( q , y ) , z ) ) ( 3 , 7 
ArgList parsed successfully: def int func ( int q ) := \ ( ( int y , int z ) -> + ( \ ( ( int n , int z ) -> * ( n , z ) ) ( q , y ) , z ) ) ( 3 , 7 ) 
Def parsed successfully: def int func ( int q ) := \ ( ( int y , int z ) -> + ( \ ( ( int n , int z ) -> * ( n , z ) ) ( q , y ) , z ) ) ( 3 , 7 ) 
UserFunc parsed successfully: def int func ( int q ) := \ ( ( int y , int z ) -> + ( \ ( ( int n , int z ) -> * ( n , z ) ) ( q , y ) , z ) ) ( 3 , 7 ) func 
SigArgs parsed successfully: def int func ( int q ) := \ ( ( int y , int z ) -> + ( \ ( ( int n , int z ) -> * ( n , z ) ) ( q , y ) , z ) ) ( 3 , 7 ) func ( \ ( ( int num 
Sig parsed successfully: def int func ( int q ) := \ ( ( int y , int z ) -> + ( \ ( ( int n , int z ) -> * ( n , z ) ) ( q , y ) , z ) ) ( 3 , 7 ) func ( \ ( ( int num ) 
Arg parsed successfully: def int func ( int q ) := \ ( ( int y , int z ) -> + ( \ ( ( int n , int z ) -> * ( n , z ) ) ( q , y ) , z ) ) ( 3 , 7 ) func ( \ ( ( int num ) -> @ ( num 
NativeUnary parsed successfully: def int func ( int q ) := \ ( ( int y , int z ) -> + ( \ ( ( int n , int z ) -> * ( n , z ) ) ( q , y ) , z ) ) ( 3 , 7 ) func ( \ ( ( int num ) -> @ ( num ) 
Lambda parsed successfully: def int func ( int q ) := \ ( ( int y , int z ) -> + ( \ ( ( int n , int z ) -> * ( n , z ) ) ( q , y ) , z ) ) ( 3 , 7 ) func ( \ ( ( int num ) -> @ ( num ) ) 
Arg parsed successfully: def int func ( int q ) := \ ( ( int y , int z ) -> + ( \ ( ( int n , int z ) -> * ( n , z ) ) ( q , y ) , z ) ) ( 3 , 7 ) func ( \ ( ( int num ) -> @ ( num ) ) ( 5 
Args parsed successfully: def int func ( int q ) := \ ( ( int y , int z ) -> + ( \ ( ( int n , int z ) -> * ( n , z ) ) ( q , y ) , z ) ) ( 3 , 7 ) func ( \ ( ( int num ) -> @ ( num ) ) ( 5 
ArgList parsed successfully: def int func ( int q ) := \ ( ( int y , int z ) -> + ( \ ( ( int n , int z ) -> * ( n , z ) ) ( q , y ) , z ) ) ( 3 , 7 ) func ( \ ( ( int num ) -> @ ( num ) ) ( 5 ) 
Arg parsed successfully: def int func ( int q ) := \ ( ( int y , int z ) -> + ( \ ( ( int n , int z ) -> * ( n , z ) ) ( q , y ) , z ) ) ( 3 , 7 ) func ( \ ( ( int num ) -> @ ( num ) ) ( 5 ) 
Args parsed successfully: def int func ( int q ) := \ ( ( int y , int z ) -> + ( \ ( ( int n , int z ) -> * ( n , z ) ) ( q , y ) , z ) ) ( 3 , 7 ) func ( \ ( ( int num ) -> @ ( num ) ) ( 5 ) 
ArgList parsed successfully: def int func ( int q ) := \ ( ( int y , int z ) -> + ( \ ( ( int n , int z ) -> * ( n , z ) ) ( q , y ) , z ) ) ( 3 , 7 ) func ( \ ( ( int num ) -> @ ( num ) ) ( 5 ) ) 
Program parsed successfully: def int func ( int q ) := \ ( ( int y , int z ) -> + ( \ ( ( int n , int z ) -> * ( n , z ) ) ( q , y ) , z ) ) ( 3 , 7 ) func ( \ ( ( int num ) -> @ ( num ) ) ( 5 ) ) 

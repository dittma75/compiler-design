/* This file was generated by SableCC (http://www.sablecc.org/). */

package three_point_one.parser;

import three_point_one.lexer.*;
import three_point_one.node.*;
import three_point_one.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    protected void filter() throws ParserException, LexerException, IOException
    {
        // Empty body
    }

    private void push(int numstate, ArrayList<Object> listNode, boolean hidden) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!hidden)
        {
            filter();
        }

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null, true);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list, false);
                    }
		    break;
                case REDUCE:
                    {
                        int reduction = this.action[1];
                        if(reduction < 500) reduce_0(reduction);
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PS node1 = (PS) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }

    private void reduce_0(int reduction) throws IOException, LexerException, ParserException
    {
        switch(reduction)
        {
            case 0: /* reduce ACompoundS */
            {
                ArrayList<Object> list = new0();
                push(goTo(0), list, false);
            }
            break;
            case 1: /* reduce AAssignS */
            {
                ArrayList<Object> list = new1();
                push(goTo(0), list, false);
            }
            break;
            case 2: /* reduce APrintS */
            {
                ArrayList<Object> list = new2();
                push(goTo(0), list, false);
            }
            break;
            case 3: /* reduce AAssignC */
            {
                ArrayList<Object> list = new3();
                push(goTo(1), list, false);
            }
            break;
            case 4: /* reduce APrintC */
            {
                ArrayList<Object> list = new4();
                push(goTo(1), list, false);
            }
            break;
            case 5: /* reduce AAssignStmt */
            {
                ArrayList<Object> list = new5();
                push(goTo(2), list, false);
            }
            break;
            case 6: /* reduce APrintStmt */
            {
                ArrayList<Object> list = new6();
                push(goTo(3), list, false);
            }
            break;
            case 7: /* reduce AIdE */
            {
                ArrayList<Object> list = new7();
                push(goTo(4), list, false);
            }
            break;
            case 8: /* reduce ANumE */
            {
                ArrayList<Object> list = new8();
                push(goTo(4), list, false);
            }
            break;
            case 9: /* reduce AAddE */
            {
                ArrayList<Object> list = new9();
                push(goTo(4), list, false);
            }
            break;
            case 10: /* reduce AESeqE */
            {
                ArrayList<Object> list = new10();
                push(goTo(4), list, false);
            }
            break;
            case 11: /* reduce AIdTerm */
            {
                ArrayList<Object> list = new11();
                push(goTo(5), list, false);
            }
            break;
            case 12: /* reduce ANumTerm */
            {
                ArrayList<Object> list = new12();
                push(goTo(5), list, false);
            }
            break;
            case 13: /* reduce AESeqTerm */
            {
                ArrayList<Object> list = new13();
                push(goTo(5), list, false);
            }
            break;
            case 14: /* reduce AESeq */
            {
                ArrayList<Object> list = new14();
                push(goTo(6), list, false);
            }
            break;
            case 15: /* reduce AEL */
            {
                ArrayList<Object> list = new15();
                push(goTo(7), list, false);
            }
            break;
            case 16: /* reduce ALSeqL */
            {
                ArrayList<Object> list = new16();
                push(goTo(7), list, false);
            }
            break;
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce ACompoundS */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PS psNode1;
        {
            // Block
        PS psNode2;
        TSemi tsemiNode3;
        PC pcNode4;
        psNode2 = (PS)nodeArrayList1.get(0);
        tsemiNode3 = (TSemi)nodeArrayList2.get(0);
        pcNode4 = (PC)nodeArrayList3.get(0);

        psNode1 = new ACompoundS(psNode2, tsemiNode3, pcNode4);
        }
	nodeList.add(psNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce AAssignS */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PS psNode1;
        {
            // Block
        PAssignStmt passignstmtNode2;
        passignstmtNode2 = (PAssignStmt)nodeArrayList1.get(0);

        psNode1 = new AAssignS(passignstmtNode2);
        }
	nodeList.add(psNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce APrintS */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PS psNode1;
        {
            // Block
        PPrintStmt pprintstmtNode2;
        pprintstmtNode2 = (PPrintStmt)nodeArrayList1.get(0);

        psNode1 = new APrintS(pprintstmtNode2);
        }
	nodeList.add(psNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce AAssignC */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PC pcNode1;
        {
            // Block
        PAssignStmt passignstmtNode2;
        passignstmtNode2 = (PAssignStmt)nodeArrayList1.get(0);

        pcNode1 = new AAssignC(passignstmtNode2);
        }
	nodeList.add(pcNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce APrintC */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PC pcNode1;
        {
            // Block
        PPrintStmt pprintstmtNode2;
        pprintstmtNode2 = (PPrintStmt)nodeArrayList1.get(0);

        pcNode1 = new APrintC(pprintstmtNode2);
        }
	nodeList.add(pcNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce AAssignStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAssignStmt passignstmtNode1;
        {
            // Block
        TId tidNode2;
        TAssign tassignNode3;
        PE peNode4;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tassignNode3 = (TAssign)nodeArrayList2.get(0);
        peNode4 = (PE)nodeArrayList3.get(0);

        passignstmtNode1 = new AAssignStmt(tidNode2, tassignNode3, peNode4);
        }
	nodeList.add(passignstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce APrintStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPrintStmt pprintstmtNode1;
        {
            // Block
        TPrint tprintNode2;
        TLParen tlparenNode3;
        PL plNode4;
        TRParen trparenNode5;
        tprintNode2 = (TPrint)nodeArrayList1.get(0);
        tlparenNode3 = (TLParen)nodeArrayList2.get(0);
        plNode4 = (PL)nodeArrayList3.get(0);
        trparenNode5 = (TRParen)nodeArrayList4.get(0);

        pprintstmtNode1 = new APrintStmt(tprintNode2, tlparenNode3, plNode4, trparenNode5);
        }
	nodeList.add(pprintstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce AIdE */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PE peNode1;
        {
            // Block
        TId tidNode2;
        tidNode2 = (TId)nodeArrayList1.get(0);

        peNode1 = new AIdE(tidNode2);
        }
	nodeList.add(peNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce ANumE */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PE peNode1;
        {
            // Block
        TNum tnumNode2;
        tnumNode2 = (TNum)nodeArrayList1.get(0);

        peNode1 = new ANumE(tnumNode2);
        }
	nodeList.add(peNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce AAddE */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PE peNode1;
        {
            // Block
        PE peNode2;
        TPlus tplusNode3;
        PTerm ptermNode4;
        peNode2 = (PE)nodeArrayList1.get(0);
        tplusNode3 = (TPlus)nodeArrayList2.get(0);
        ptermNode4 = (PTerm)nodeArrayList3.get(0);

        peNode1 = new AAddE(peNode2, tplusNode3, ptermNode4);
        }
	nodeList.add(peNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce AESeqE */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PE peNode1;
        {
            // Block
        PESeq peseqNode2;
        peseqNode2 = (PESeq)nodeArrayList1.get(0);

        peNode1 = new AESeqE(peseqNode2);
        }
	nodeList.add(peNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce AIdTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        TId tidNode2;
        tidNode2 = (TId)nodeArrayList1.get(0);

        ptermNode1 = new AIdTerm(tidNode2);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce ANumTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        TNum tnumNode2;
        tnumNode2 = (TNum)nodeArrayList1.get(0);

        ptermNode1 = new ANumTerm(tnumNode2);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce AESeqTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        PESeq peseqNode2;
        peseqNode2 = (PESeq)nodeArrayList1.get(0);

        ptermNode1 = new AESeqTerm(peseqNode2);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce AESeq */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PESeq peseqNode1;
        {
            // Block
        TLParen tlparenNode2;
        PS psNode3;
        TComma tcommaNode4;
        PE peNode5;
        TRParen trparenNode6;
        tlparenNode2 = (TLParen)nodeArrayList1.get(0);
        psNode3 = (PS)nodeArrayList2.get(0);
        tcommaNode4 = (TComma)nodeArrayList3.get(0);
        peNode5 = (PE)nodeArrayList4.get(0);
        trparenNode6 = (TRParen)nodeArrayList5.get(0);

        peseqNode1 = new AESeq(tlparenNode2, psNode3, tcommaNode4, peNode5, trparenNode6);
        }
	nodeList.add(peseqNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce AEL */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PL plNode1;
        {
            // Block
        PE peNode2;
        peNode2 = (PE)nodeArrayList1.get(0);

        plNode1 = new AEL(peNode2);
        }
	nodeList.add(plNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce ALSeqL */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PL plNode1;
        {
            // Block
        PL plNode2;
        TComma tcommaNode3;
        PE peNode4;
        plNode2 = (PL)nodeArrayList1.get(0);
        tcommaNode3 = (TComma)nodeArrayList2.get(0);
        peNode4 = (PE)nodeArrayList3.get(0);

        plNode1 = new ALSeqL(plNode2, tcommaNode3, peNode4);
        }
	nodeList.add(plNode1);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {0, SHIFT, 1}, {7, SHIFT, 2}, },
			{{-1, ERROR, 1}, {2, SHIFT, 6}, },
			{{-1, ERROR, 2}, {4, SHIFT, 7}, },
			{{-1, ERROR, 3}, {5, SHIFT, 8}, {10, ACCEPT, -1}, },
			{{-1, REDUCE, 1}, },
			{{-1, REDUCE, 2}, },
			{{-1, ERROR, 6}, {2, SHIFT, 9}, {7, SHIFT, 10}, {8, SHIFT, 11}, },
			{{-1, ERROR, 7}, {2, SHIFT, 9}, {7, SHIFT, 10}, {8, SHIFT, 11}, },
			{{-1, ERROR, 8}, {0, SHIFT, 1}, {7, SHIFT, 2}, },
			{{-1, ERROR, 9}, {0, SHIFT, 1}, {7, SHIFT, 2}, },
			{{-1, REDUCE, 7}, },
			{{-1, REDUCE, 8}, },
			{{-1, REDUCE, 15}, {1, SHIFT, 20}, },
			{{-1, REDUCE, 10}, },
			{{-1, ERROR, 14}, {3, SHIFT, 21}, {6, SHIFT, 22}, },
			{{-1, REDUCE, 5}, {1, SHIFT, 20}, },
			{{-1, REDUCE, 0}, },
			{{-1, REDUCE, 3}, },
			{{-1, REDUCE, 4}, },
			{{-1, ERROR, 19}, {5, SHIFT, 8}, {6, SHIFT, 23}, },
			{{-1, ERROR, 20}, {2, SHIFT, 9}, {7, SHIFT, 24}, {8, SHIFT, 25}, },
			{{-1, REDUCE, 6}, },
			{{-1, ERROR, 22}, {2, SHIFT, 9}, {7, SHIFT, 10}, {8, SHIFT, 11}, },
			{{-1, ERROR, 23}, {2, SHIFT, 9}, {7, SHIFT, 10}, {8, SHIFT, 11}, },
			{{-1, REDUCE, 11}, },
			{{-1, REDUCE, 12}, },
			{{-1, REDUCE, 9}, },
			{{-1, REDUCE, 13}, },
			{{-1, REDUCE, 16}, {1, SHIFT, 20}, },
			{{-1, ERROR, 29}, {1, SHIFT, 20}, {3, SHIFT, 30}, },
			{{-1, REDUCE, 14}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 3}, {9, 19}, },
			{{-1, 16}, },
			{{-1, 4}, {8, 17}, },
			{{-1, 5}, {8, 18}, },
			{{-1, 12}, {7, 15}, {22, 28}, {23, 29}, },
			{{-1, 26}, },
			{{-1, 13}, {20, 27}, },
			{{-1, 14}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: 'print', id",
			"expecting: '('",
			"expecting: ':='",
			"expecting: ';', EOF",
			"expecting: ';', ',', EOF",
			"expecting: '(', id, num",
			"expecting: '+', ')', ';', ',', EOF",
			"expecting: '+', ')', ','",
			"expecting: ')', ','",
			"expecting: '+', ';', ',', EOF",
			"expecting: ';', ','",
			"expecting: '+', ')'",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 3, 4, 4, 5, 5, 0, 0, 6, 6, 7, 6, 8, 9, 4, 4, 4, 10, 5, 4, 5, 5, 6, 6, 6, 6, 7, 11, 6, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}

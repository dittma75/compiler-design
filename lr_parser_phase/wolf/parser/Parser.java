/* This file was generated by SableCC (http://www.sablecc.org/). */

package wolf.parser;

import wolf.lexer.*;
import wolf.node.*;
import wolf.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    protected void filter() throws ParserException, LexerException, IOException
    {
        // Empty body
    }

    private void push(int numstate, ArrayList<Object> listNode, boolean hidden) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!hidden)
        {
            filter();
        }

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null, true);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list, false);
                    }
		    break;
                case REDUCE:
                    {
                        int reduction = this.action[1];
                        if(reduction < 500) reduce_0(reduction);
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PProgram node1 = (PProgram) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }

    private void reduce_0(int reduction) throws IOException, LexerException, ParserException
    {
        switch(reduction)
        {
            case 0: /* reduce ADefsProgram */
            {
                ArrayList<Object> list = new0();
                push(goTo(0), list, false);
            }
            break;
            case 1: /* reduce ANoDefsProgram */
            {
                ArrayList<Object> list = new1();
                push(goTo(0), list, false);
            }
            break;
            case 2: /* reduce AMultiDefDefList */
            {
                ArrayList<Object> list = new2();
                push(goTo(1), list, false);
            }
            break;
            case 3: /* reduce ASingleDefDefList */
            {
                ArrayList<Object> list = new3();
                push(goTo(1), list, false);
            }
            break;
            case 4: /* reduce ADefHeader */
            {
                ArrayList<Object> list = new4();
                push(goTo(2), list, false);
            }
            break;
            case 5: /* reduce AEmptySig */
            {
                ArrayList<Object> list = new5();
                push(goTo(3), list, false);
            }
            break;
            case 6: /* reduce AFullSig */
            {
                ArrayList<Object> list = new6();
                push(goTo(3), list, false);
            }
            break;
            case 7: /* reduce AMoreSigArgs */
            {
                ArrayList<Object> list = new7();
                push(goTo(4), list, false);
            }
            break;
            case 8: /* reduce ADoneSigArgs */
            {
                ArrayList<Object> list = new8();
                push(goTo(4), list, false);
            }
            break;
            case 9: /* reduce ASigArgRest */
            {
                ArrayList<Object> list = new9();
                push(goTo(5), list, false);
            }
            break;
            case 10: /* reduce AFuncFunc */
            {
                ArrayList<Object> list = new10();
                push(goTo(6), list, false);
            }
            break;
            case 11: /* reduce ABranchFunc */
            {
                ArrayList<Object> list = new11();
                push(goTo(6), list, false);
            }
            break;
            case 12: /* reduce AIdFuncName */
            {
                ArrayList<Object> list = new12();
                push(goTo(7), list, false);
            }
            break;
            case 13: /* reduce AHeadFuncName */
            {
                ArrayList<Object> list = new13();
                push(goTo(7), list, false);
            }
            break;
            case 14: /* reduce ATailFuncName */
            {
                ArrayList<Object> list = new14();
                push(goTo(7), list, false);
            }
            break;
            case 15: /* reduce AReverseFuncName */
            {
                ArrayList<Object> list = new15();
                push(goTo(7), list, false);
            }
            break;
            case 16: /* reduce APrependFuncName */
            {
                ArrayList<Object> list = new16();
                push(goTo(7), list, false);
            }
            break;
            case 17: /* reduce AAppendFuncName */
            {
                ArrayList<Object> list = new17();
                push(goTo(7), list, false);
            }
            break;
            case 18: /* reduce AMapFuncName */
            {
                ArrayList<Object> list = new18();
                push(goTo(7), list, false);
            }
            break;
            case 19: /* reduce ALengthFuncName */
            {
                ArrayList<Object> list = new19();
                push(goTo(7), list, false);
            }
            break;
            case 20: /* reduce AFoldlFuncName */
            {
                ArrayList<Object> list = new20();
                push(goTo(7), list, false);
            }
            break;
            case 21: /* reduce AFoldrFuncName */
            {
                ArrayList<Object> list = new21();
                push(goTo(7), list, false);
            }
            break;
            case 22: /* reduce AFlattenFuncName */
            {
                ArrayList<Object> list = new22();
                push(goTo(7), list, false);
            }
            break;
            case 23: /* reduce AIdentityFuncName */
            {
                ArrayList<Object> list = new23();
                push(goTo(7), list, false);
            }
            break;
            case 24: /* reduce APrintFuncName */
            {
                ArrayList<Object> list = new24();
                push(goTo(7), list, false);
            }
            break;
            case 25: /* reduce ALambdaFuncName */
            {
                ArrayList<Object> list = new25();
                push(goTo(7), list, false);
            }
            break;
            case 26: /* reduce ANegFuncName */
            {
                ArrayList<Object> list = new26();
                push(goTo(7), list, false);
            }
            break;
            case 27: /* reduce ANotFuncName */
            {
                ArrayList<Object> list = new27();
                push(goTo(7), list, false);
            }
            break;
            case 28: /* reduce APlusFuncName */
            {
                ArrayList<Object> list = new28();
                push(goTo(7), list, false);
            }
            break;
            case 29: /* reduce AMinusFuncName */
            {
                ArrayList<Object> list = new29();
                push(goTo(7), list, false);
            }
            break;
            case 30: /* reduce AMultFuncName */
            {
                ArrayList<Object> list = new30();
                push(goTo(7), list, false);
            }
            break;
            case 31: /* reduce ADivFuncName */
            {
                ArrayList<Object> list = new31();
                push(goTo(7), list, false);
            }
            break;
            case 32: /* reduce AModFuncName */
            {
                ArrayList<Object> list = new32();
                push(goTo(7), list, false);
            }
            break;
            case 33: /* reduce ALtFuncName */
            {
                ArrayList<Object> list = new33();
                push(goTo(7), list, false);
            }
            break;
            case 34: /* reduce AGtFuncName */
            {
                ArrayList<Object> list = new34();
                push(goTo(7), list, false);
            }
            break;
            case 35: /* reduce ALteFuncName */
            {
                ArrayList<Object> list = new35();
                push(goTo(7), list, false);
            }
            break;
            case 36: /* reduce AGteFuncName */
            {
                ArrayList<Object> list = new36();
                push(goTo(7), list, false);
            }
            break;
            case 37: /* reduce AEqualFuncName */
            {
                ArrayList<Object> list = new37();
                push(goTo(7), list, false);
            }
            break;
            case 38: /* reduce ANotEqualFuncName */
            {
                ArrayList<Object> list = new38();
                push(goTo(7), list, false);
            }
            break;
            case 39: /* reduce AAndFuncName */
            {
                ArrayList<Object> list = new39();
                push(goTo(7), list, false);
            }
            break;
            case 40: /* reduce AOrFuncName */
            {
                ArrayList<Object> list = new40();
                push(goTo(7), list, false);
            }
            break;
            case 41: /* reduce AXorFuncName */
            {
                ArrayList<Object> list = new41();
                push(goTo(7), list, false);
            }
            break;
            case 42: /* reduce AEmptyArgList */
            {
                ArrayList<Object> list = new42();
                push(goTo(8), list, false);
            }
            break;
            case 43: /* reduce AFullArgList */
            {
                ArrayList<Object> list = new43();
                push(goTo(8), list, false);
            }
            break;
            case 44: /* reduce ADoneArgs */
            {
                ArrayList<Object> list = new44();
                push(goTo(9), list, false);
            }
            break;
            case 45: /* reduce AMoreArgs */
            {
                ArrayList<Object> list = new45();
                push(goTo(9), list, false);
            }
            break;
            case 46: /* reduce AArgRest */
            {
                ArrayList<Object> list = new46();
                push(goTo(10), list, false);
            }
            break;
            case 47: /* reduce AFuncArg */
            {
                ArrayList<Object> list = new47();
                push(goTo(11), list, false);
            }
            break;
            case 48: /* reduce AListArg */
            {
                ArrayList<Object> list = new48();
                push(goTo(11), list, false);
            }
            break;
            case 49: /* reduce AFloatArg */
            {
                ArrayList<Object> list = new49();
                push(goTo(11), list, false);
            }
            break;
            case 50: /* reduce AIntArg */
            {
                ArrayList<Object> list = new50();
                push(goTo(11), list, false);
            }
            break;
            case 51: /* reduce AIdentifierArg */
            {
                ArrayList<Object> list = new51();
                push(goTo(11), list, false);
            }
            break;
            case 52: /* reduce AStringArg */
            {
                ArrayList<Object> list = new52();
                push(goTo(11), list, false);
            }
            break;
            case 53: /* reduce AEmptyString */
            {
                ArrayList<Object> list = new53();
                push(goTo(12), list, false);
            }
            break;
            case 54: /* reduce AFullString */
            {
                ArrayList<Object> list = new54();
                push(goTo(12), list, false);
            }
            break;
            case 55: /* reduce AMoreBodyStringMiddle */
            {
                ArrayList<Object> list = new55();
                push(goTo(13), list, false);
            }
            break;
            case 56: /* reduce ADoneBodyStringMiddle */
            {
                ArrayList<Object> list = new56();
                push(goTo(13), list, false);
            }
            break;
            case 57: /* reduce AMoreEscapeStringMiddle */
            {
                ArrayList<Object> list = new57();
                push(goTo(13), list, false);
            }
            break;
            case 58: /* reduce ADoneEscapeStringMiddle */
            {
                ArrayList<Object> list = new58();
                push(goTo(13), list, false);
            }
            break;
            case 59: /* reduce AStringEscapeSeq */
            {
                ArrayList<Object> list = new59();
                push(goTo(14), list, false);
            }
            break;
            case 60: /* reduce AAEscapeChar */
            {
                ArrayList<Object> list = new60();
                push(goTo(15), list, false);
            }
            break;
            case 61: /* reduce ABEscapeChar */
            {
                ArrayList<Object> list = new61();
                push(goTo(15), list, false);
            }
            break;
            case 62: /* reduce AFEscapeChar */
            {
                ArrayList<Object> list = new62();
                push(goTo(15), list, false);
            }
            break;
            case 63: /* reduce AREscapeChar */
            {
                ArrayList<Object> list = new63();
                push(goTo(15), list, false);
            }
            break;
            case 64: /* reduce ANEscapeChar */
            {
                ArrayList<Object> list = new64();
                push(goTo(15), list, false);
            }
            break;
            case 65: /* reduce ATEscapeChar */
            {
                ArrayList<Object> list = new65();
                push(goTo(15), list, false);
            }
            break;
            case 66: /* reduce AVEscapeChar */
            {
                ArrayList<Object> list = new66();
                push(goTo(15), list, false);
            }
            break;
            case 67: /* reduce ASlashEscapeChar */
            {
                ArrayList<Object> list = new67();
                push(goTo(15), list, false);
            }
            break;
            case 68: /* reduce ASingleEscapeChar */
            {
                ArrayList<Object> list = new68();
                push(goTo(15), list, false);
            }
            break;
            case 69: /* reduce ADoubleEscapeChar */
            {
                ArrayList<Object> list = new69();
                push(goTo(15), list, false);
            }
            break;
            case 70: /* reduce AQuestionEscapeChar */
            {
                ArrayList<Object> list = new70();
                push(goTo(15), list, false);
            }
            break;
            case 71: /* reduce AOctalEscapeChar */
            {
                ArrayList<Object> list = new71();
                push(goTo(15), list, false);
            }
            break;
            case 72: /* reduce AHexEscapeChar */
            {
                ArrayList<Object> list = new72();
                push(goTo(15), list, false);
            }
            break;
            case 73: /* reduce AUnicodeEscapeChar */
            {
                ArrayList<Object> list = new73();
                push(goTo(15), list, false);
            }
            break;
            case 74: /* reduce ADefaultEscapeChar */
            {
                ArrayList<Object> list = new74();
                push(goTo(15), list, false);
            }
            break;
            case 75: /* reduce ABranch */
            {
                ArrayList<Object> list = new75();
                push(goTo(16), list, false);
            }
            break;
            case 76: /* reduce ACond */
            {
                ArrayList<Object> list = new76();
                push(goTo(17), list, false);
            }
            break;
            case 77: /* reduce AIf */
            {
                ArrayList<Object> list = new77();
                push(goTo(18), list, false);
            }
            break;
            case 78: /* reduce AElse */
            {
                ArrayList<Object> list = new78();
                push(goTo(19), list, false);
            }
            break;
            case 79: /* reduce AFullList */
            {
                ArrayList<Object> list = new79();
                push(goTo(20), list, false);
            }
            break;
            case 80: /* reduce AEmptyList */
            {
                ArrayList<Object> list = new80();
                push(goTo(20), list, false);
            }
            break;
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce ADefsProgram */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProgram pprogramNode1;
        {
            // Block
        PDefList pdeflistNode2;
        PFunc pfuncNode3;
        pdeflistNode2 = (PDefList)nodeArrayList1.get(0);
        pfuncNode3 = (PFunc)nodeArrayList2.get(0);

        pprogramNode1 = new ADefsProgram(pdeflistNode2, pfuncNode3);
        }
	nodeList.add(pprogramNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce ANoDefsProgram */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProgram pprogramNode1;
        {
            // Block
        PFunc pfuncNode2;
        pfuncNode2 = (PFunc)nodeArrayList1.get(0);

        pprogramNode1 = new ANoDefsProgram(pfuncNode2);
        }
	nodeList.add(pprogramNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce AMultiDefDefList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDefList pdeflistNode1;
        {
            // Block
        PDefList pdeflistNode2;
        PDefHeader pdefheaderNode3;
        pdeflistNode2 = (PDefList)nodeArrayList1.get(0);
        pdefheaderNode3 = (PDefHeader)nodeArrayList2.get(0);

        pdeflistNode1 = new AMultiDefDefList(pdeflistNode2, pdefheaderNode3);
        }
	nodeList.add(pdeflistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce ASingleDefDefList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDefList pdeflistNode1;
        {
            // Block
        PDefHeader pdefheaderNode2;
        pdefheaderNode2 = (PDefHeader)nodeArrayList1.get(0);

        pdeflistNode1 = new ASingleDefDefList(pdefheaderNode2);
        }
	nodeList.add(pdeflistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce ADefHeader */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDefHeader pdefheaderNode1;
        {
            // Block
        TDef tdefNode2;
        TIdentifier tidentifierNode3;
        PSig psigNode4;
        TAssign tassignNode5;
        PFunc pfuncNode6;
        tdefNode2 = (TDef)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);
        psigNode4 = (PSig)nodeArrayList3.get(0);
        tassignNode5 = (TAssign)nodeArrayList4.get(0);
        pfuncNode6 = (PFunc)nodeArrayList5.get(0);

        pdefheaderNode1 = new ADefHeader(tdefNode2, tidentifierNode3, psigNode4, tassignNode5, pfuncNode6);
        }
	nodeList.add(pdefheaderNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce AEmptySig */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSig psigNode1;
        {
            // Block
        TLParen tlparenNode2;
        TRParen trparenNode3;
        tlparenNode2 = (TLParen)nodeArrayList1.get(0);
        trparenNode3 = (TRParen)nodeArrayList2.get(0);

        psigNode1 = new AEmptySig(tlparenNode2, trparenNode3);
        }
	nodeList.add(psigNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce AFullSig */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSig psigNode1;
        {
            // Block
        TLParen tlparenNode2;
        PSigArgs psigargsNode3;
        TRParen trparenNode4;
        tlparenNode2 = (TLParen)nodeArrayList1.get(0);
        psigargsNode3 = (PSigArgs)nodeArrayList2.get(0);
        trparenNode4 = (TRParen)nodeArrayList3.get(0);

        psigNode1 = new AFullSig(tlparenNode2, psigargsNode3, trparenNode4);
        }
	nodeList.add(psigNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce AMoreSigArgs */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSigArgs psigargsNode1;
        {
            // Block
        PSigArgs psigargsNode2;
        PSigArgRest psigargrestNode3;
        psigargsNode2 = (PSigArgs)nodeArrayList1.get(0);
        psigargrestNode3 = (PSigArgRest)nodeArrayList2.get(0);

        psigargsNode1 = new AMoreSigArgs(psigargsNode2, psigargrestNode3);
        }
	nodeList.add(psigargsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce ADoneSigArgs */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSigArgs psigargsNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);

        psigargsNode1 = new ADoneSigArgs(tidentifierNode2);
        }
	nodeList.add(psigargsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce ASigArgRest */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSigArgRest psigargrestNode1;
        {
            // Block
        TComma tcommaNode2;
        TIdentifier tidentifierNode3;
        tcommaNode2 = (TComma)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);

        psigargrestNode1 = new ASigArgRest(tcommaNode2, tidentifierNode3);
        }
	nodeList.add(psigargrestNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce AFuncFunc */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFunc pfuncNode1;
        {
            // Block
        PFuncName pfuncnameNode2;
        PArgList parglistNode3;
        pfuncnameNode2 = (PFuncName)nodeArrayList1.get(0);
        parglistNode3 = (PArgList)nodeArrayList2.get(0);

        pfuncNode1 = new AFuncFunc(pfuncnameNode2, parglistNode3);
        }
	nodeList.add(pfuncNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce ABranchFunc */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFunc pfuncNode1;
        {
            // Block
        PBranch pbranchNode2;
        pbranchNode2 = (PBranch)nodeArrayList1.get(0);

        pfuncNode1 = new ABranchFunc(pbranchNode2);
        }
	nodeList.add(pfuncNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce AIdFuncName */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFuncName pfuncnameNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);

        pfuncnameNode1 = new AIdFuncName(tidentifierNode2);
        }
	nodeList.add(pfuncnameNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce AHeadFuncName */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFuncName pfuncnameNode1;
        {
            // Block
        THead theadNode2;
        theadNode2 = (THead)nodeArrayList1.get(0);

        pfuncnameNode1 = new AHeadFuncName(theadNode2);
        }
	nodeList.add(pfuncnameNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce ATailFuncName */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFuncName pfuncnameNode1;
        {
            // Block
        TTail ttailNode2;
        ttailNode2 = (TTail)nodeArrayList1.get(0);

        pfuncnameNode1 = new ATailFuncName(ttailNode2);
        }
	nodeList.add(pfuncnameNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce AReverseFuncName */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFuncName pfuncnameNode1;
        {
            // Block
        TReverse treverseNode2;
        treverseNode2 = (TReverse)nodeArrayList1.get(0);

        pfuncnameNode1 = new AReverseFuncName(treverseNode2);
        }
	nodeList.add(pfuncnameNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce APrependFuncName */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFuncName pfuncnameNode1;
        {
            // Block
        TPrepend tprependNode2;
        tprependNode2 = (TPrepend)nodeArrayList1.get(0);

        pfuncnameNode1 = new APrependFuncName(tprependNode2);
        }
	nodeList.add(pfuncnameNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new17() /* reduce AAppendFuncName */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFuncName pfuncnameNode1;
        {
            // Block
        TAppend tappendNode2;
        tappendNode2 = (TAppend)nodeArrayList1.get(0);

        pfuncnameNode1 = new AAppendFuncName(tappendNode2);
        }
	nodeList.add(pfuncnameNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new18() /* reduce AMapFuncName */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFuncName pfuncnameNode1;
        {
            // Block
        TMap tmapNode2;
        tmapNode2 = (TMap)nodeArrayList1.get(0);

        pfuncnameNode1 = new AMapFuncName(tmapNode2);
        }
	nodeList.add(pfuncnameNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new19() /* reduce ALengthFuncName */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFuncName pfuncnameNode1;
        {
            // Block
        TLength tlengthNode2;
        tlengthNode2 = (TLength)nodeArrayList1.get(0);

        pfuncnameNode1 = new ALengthFuncName(tlengthNode2);
        }
	nodeList.add(pfuncnameNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new20() /* reduce AFoldlFuncName */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFuncName pfuncnameNode1;
        {
            // Block
        TFoldl tfoldlNode2;
        tfoldlNode2 = (TFoldl)nodeArrayList1.get(0);

        pfuncnameNode1 = new AFoldlFuncName(tfoldlNode2);
        }
	nodeList.add(pfuncnameNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new21() /* reduce AFoldrFuncName */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFuncName pfuncnameNode1;
        {
            // Block
        TFoldr tfoldrNode2;
        tfoldrNode2 = (TFoldr)nodeArrayList1.get(0);

        pfuncnameNode1 = new AFoldrFuncName(tfoldrNode2);
        }
	nodeList.add(pfuncnameNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new22() /* reduce AFlattenFuncName */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFuncName pfuncnameNode1;
        {
            // Block
        TFlatten tflattenNode2;
        tflattenNode2 = (TFlatten)nodeArrayList1.get(0);

        pfuncnameNode1 = new AFlattenFuncName(tflattenNode2);
        }
	nodeList.add(pfuncnameNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new23() /* reduce AIdentityFuncName */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFuncName pfuncnameNode1;
        {
            // Block
        TIdentity tidentityNode2;
        tidentityNode2 = (TIdentity)nodeArrayList1.get(0);

        pfuncnameNode1 = new AIdentityFuncName(tidentityNode2);
        }
	nodeList.add(pfuncnameNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new24() /* reduce APrintFuncName */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFuncName pfuncnameNode1;
        {
            // Block
        TPrint tprintNode2;
        tprintNode2 = (TPrint)nodeArrayList1.get(0);

        pfuncnameNode1 = new APrintFuncName(tprintNode2);
        }
	nodeList.add(pfuncnameNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new25() /* reduce ALambdaFuncName */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFuncName pfuncnameNode1;
        {
            // Block
        TLambdaStart tlambdastartNode2;
        tlambdastartNode2 = (TLambdaStart)nodeArrayList1.get(0);

        pfuncnameNode1 = new ALambdaFuncName(tlambdastartNode2);
        }
	nodeList.add(pfuncnameNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new26() /* reduce ANegFuncName */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFuncName pfuncnameNode1;
        {
            // Block
        TNeg tnegNode2;
        tnegNode2 = (TNeg)nodeArrayList1.get(0);

        pfuncnameNode1 = new ANegFuncName(tnegNode2);
        }
	nodeList.add(pfuncnameNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new27() /* reduce ANotFuncName */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFuncName pfuncnameNode1;
        {
            // Block
        TLogicalNot tlogicalnotNode2;
        tlogicalnotNode2 = (TLogicalNot)nodeArrayList1.get(0);

        pfuncnameNode1 = new ANotFuncName(tlogicalnotNode2);
        }
	nodeList.add(pfuncnameNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new28() /* reduce APlusFuncName */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFuncName pfuncnameNode1;
        {
            // Block
        TPlus tplusNode2;
        tplusNode2 = (TPlus)nodeArrayList1.get(0);

        pfuncnameNode1 = new APlusFuncName(tplusNode2);
        }
	nodeList.add(pfuncnameNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new29() /* reduce AMinusFuncName */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFuncName pfuncnameNode1;
        {
            // Block
        TMinus tminusNode2;
        tminusNode2 = (TMinus)nodeArrayList1.get(0);

        pfuncnameNode1 = new AMinusFuncName(tminusNode2);
        }
	nodeList.add(pfuncnameNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new30() /* reduce AMultFuncName */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFuncName pfuncnameNode1;
        {
            // Block
        TMult tmultNode2;
        tmultNode2 = (TMult)nodeArrayList1.get(0);

        pfuncnameNode1 = new AMultFuncName(tmultNode2);
        }
	nodeList.add(pfuncnameNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new31() /* reduce ADivFuncName */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFuncName pfuncnameNode1;
        {
            // Block
        TDiv tdivNode2;
        tdivNode2 = (TDiv)nodeArrayList1.get(0);

        pfuncnameNode1 = new ADivFuncName(tdivNode2);
        }
	nodeList.add(pfuncnameNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new32() /* reduce AModFuncName */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFuncName pfuncnameNode1;
        {
            // Block
        TMod tmodNode2;
        tmodNode2 = (TMod)nodeArrayList1.get(0);

        pfuncnameNode1 = new AModFuncName(tmodNode2);
        }
	nodeList.add(pfuncnameNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new33() /* reduce ALtFuncName */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFuncName pfuncnameNode1;
        {
            // Block
        TLt tltNode2;
        tltNode2 = (TLt)nodeArrayList1.get(0);

        pfuncnameNode1 = new ALtFuncName(tltNode2);
        }
	nodeList.add(pfuncnameNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new34() /* reduce AGtFuncName */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFuncName pfuncnameNode1;
        {
            // Block
        TGt tgtNode2;
        tgtNode2 = (TGt)nodeArrayList1.get(0);

        pfuncnameNode1 = new AGtFuncName(tgtNode2);
        }
	nodeList.add(pfuncnameNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new35() /* reduce ALteFuncName */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFuncName pfuncnameNode1;
        {
            // Block
        TLte tlteNode2;
        tlteNode2 = (TLte)nodeArrayList1.get(0);

        pfuncnameNode1 = new ALteFuncName(tlteNode2);
        }
	nodeList.add(pfuncnameNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new36() /* reduce AGteFuncName */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFuncName pfuncnameNode1;
        {
            // Block
        TGte tgteNode2;
        tgteNode2 = (TGte)nodeArrayList1.get(0);

        pfuncnameNode1 = new AGteFuncName(tgteNode2);
        }
	nodeList.add(pfuncnameNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new37() /* reduce AEqualFuncName */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFuncName pfuncnameNode1;
        {
            // Block
        TEqual tequalNode2;
        tequalNode2 = (TEqual)nodeArrayList1.get(0);

        pfuncnameNode1 = new AEqualFuncName(tequalNode2);
        }
	nodeList.add(pfuncnameNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new38() /* reduce ANotEqualFuncName */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFuncName pfuncnameNode1;
        {
            // Block
        TNotEqual tnotequalNode2;
        tnotequalNode2 = (TNotEqual)nodeArrayList1.get(0);

        pfuncnameNode1 = new ANotEqualFuncName(tnotequalNode2);
        }
	nodeList.add(pfuncnameNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new39() /* reduce AAndFuncName */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFuncName pfuncnameNode1;
        {
            // Block
        TAnd tandNode2;
        tandNode2 = (TAnd)nodeArrayList1.get(0);

        pfuncnameNode1 = new AAndFuncName(tandNode2);
        }
	nodeList.add(pfuncnameNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new40() /* reduce AOrFuncName */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFuncName pfuncnameNode1;
        {
            // Block
        TOr torNode2;
        torNode2 = (TOr)nodeArrayList1.get(0);

        pfuncnameNode1 = new AOrFuncName(torNode2);
        }
	nodeList.add(pfuncnameNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new41() /* reduce AXorFuncName */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFuncName pfuncnameNode1;
        {
            // Block
        TXor txorNode2;
        txorNode2 = (TXor)nodeArrayList1.get(0);

        pfuncnameNode1 = new AXorFuncName(txorNode2);
        }
	nodeList.add(pfuncnameNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new42() /* reduce AEmptyArgList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArgList parglistNode1;
        {
            // Block
        TLParen tlparenNode2;
        TRParen trparenNode3;
        tlparenNode2 = (TLParen)nodeArrayList1.get(0);
        trparenNode3 = (TRParen)nodeArrayList2.get(0);

        parglistNode1 = new AEmptyArgList(tlparenNode2, trparenNode3);
        }
	nodeList.add(parglistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new43() /* reduce AFullArgList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArgList parglistNode1;
        {
            // Block
        TLParen tlparenNode2;
        PArgs pargsNode3;
        TRParen trparenNode4;
        tlparenNode2 = (TLParen)nodeArrayList1.get(0);
        pargsNode3 = (PArgs)nodeArrayList2.get(0);
        trparenNode4 = (TRParen)nodeArrayList3.get(0);

        parglistNode1 = new AFullArgList(tlparenNode2, pargsNode3, trparenNode4);
        }
	nodeList.add(parglistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new44() /* reduce ADoneArgs */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArgs pargsNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);

        pargsNode1 = new ADoneArgs(tidentifierNode2);
        }
	nodeList.add(pargsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new45() /* reduce AMoreArgs */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArgs pargsNode1;
        {
            // Block
        PArgs pargsNode2;
        PArgList parglistNode3;
        pargsNode2 = (PArgs)nodeArrayList1.get(0);
        parglistNode3 = (PArgList)nodeArrayList2.get(0);

        pargsNode1 = new AMoreArgs(pargsNode2, parglistNode3);
        }
	nodeList.add(pargsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new46() /* reduce AArgRest */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArgRest pargrestNode1;
        {
            // Block
        TComma tcommaNode2;
        PArg pargNode3;
        tcommaNode2 = (TComma)nodeArrayList1.get(0);
        pargNode3 = (PArg)nodeArrayList2.get(0);

        pargrestNode1 = new AArgRest(tcommaNode2, pargNode3);
        }
	nodeList.add(pargrestNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new47() /* reduce AFuncArg */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArg pargNode1;
        {
            // Block
        PFunc pfuncNode2;
        pfuncNode2 = (PFunc)nodeArrayList1.get(0);

        pargNode1 = new AFuncArg(pfuncNode2);
        }
	nodeList.add(pargNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new48() /* reduce AListArg */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArg pargNode1;
        {
            // Block
        PList plistNode2;
        plistNode2 = (PList)nodeArrayList1.get(0);

        pargNode1 = new AListArg(plistNode2);
        }
	nodeList.add(pargNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new49() /* reduce AFloatArg */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArg pargNode1;
        {
            // Block
        TFloatNumber tfloatnumberNode2;
        tfloatnumberNode2 = (TFloatNumber)nodeArrayList1.get(0);

        pargNode1 = new AFloatArg(tfloatnumberNode2);
        }
	nodeList.add(pargNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new50() /* reduce AIntArg */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArg pargNode1;
        {
            // Block
        TIntNumber tintnumberNode2;
        tintnumberNode2 = (TIntNumber)nodeArrayList1.get(0);

        pargNode1 = new AIntArg(tintnumberNode2);
        }
	nodeList.add(pargNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new51() /* reduce AIdentifierArg */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArg pargNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);

        pargNode1 = new AIdentifierArg(tidentifierNode2);
        }
	nodeList.add(pargNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new52() /* reduce AStringArg */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArg pargNode1;
        {
            // Block
        PString pstringNode2;
        pstringNode2 = (PString)nodeArrayList1.get(0);

        pargNode1 = new AStringArg(pstringNode2);
        }
	nodeList.add(pargNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new53() /* reduce AEmptyString */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PString pstringNode1;
        {
            // Block
        TStringStart tstringstartNode2;
        TStringEnd tstringendNode3;
        tstringstartNode2 = (TStringStart)nodeArrayList1.get(0);
        tstringendNode3 = (TStringEnd)nodeArrayList2.get(0);

        pstringNode1 = new AEmptyString(tstringstartNode2, tstringendNode3);
        }
	nodeList.add(pstringNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new54() /* reduce AFullString */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PString pstringNode1;
        {
            // Block
        TStringStart tstringstartNode2;
        PStringMiddle pstringmiddleNode3;
        TStringEnd tstringendNode4;
        tstringstartNode2 = (TStringStart)nodeArrayList1.get(0);
        pstringmiddleNode3 = (PStringMiddle)nodeArrayList2.get(0);
        tstringendNode4 = (TStringEnd)nodeArrayList3.get(0);

        pstringNode1 = new AFullString(tstringstartNode2, pstringmiddleNode3, tstringendNode4);
        }
	nodeList.add(pstringNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new55() /* reduce AMoreBodyStringMiddle */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStringMiddle pstringmiddleNode1;
        {
            // Block
        PStringMiddle pstringmiddleNode2;
        TStringBody tstringbodyNode3;
        pstringmiddleNode2 = (PStringMiddle)nodeArrayList1.get(0);
        tstringbodyNode3 = (TStringBody)nodeArrayList2.get(0);

        pstringmiddleNode1 = new AMoreBodyStringMiddle(pstringmiddleNode2, tstringbodyNode3);
        }
	nodeList.add(pstringmiddleNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new56() /* reduce ADoneBodyStringMiddle */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStringMiddle pstringmiddleNode1;
        {
            // Block
        TStringBody tstringbodyNode2;
        tstringbodyNode2 = (TStringBody)nodeArrayList1.get(0);

        pstringmiddleNode1 = new ADoneBodyStringMiddle(tstringbodyNode2);
        }
	nodeList.add(pstringmiddleNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new57() /* reduce AMoreEscapeStringMiddle */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStringMiddle pstringmiddleNode1;
        {
            // Block
        PStringMiddle pstringmiddleNode2;
        PStringEscapeSeq pstringescapeseqNode3;
        pstringmiddleNode2 = (PStringMiddle)nodeArrayList1.get(0);
        pstringescapeseqNode3 = (PStringEscapeSeq)nodeArrayList2.get(0);

        pstringmiddleNode1 = new AMoreEscapeStringMiddle(pstringmiddleNode2, pstringescapeseqNode3);
        }
	nodeList.add(pstringmiddleNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new58() /* reduce ADoneEscapeStringMiddle */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStringMiddle pstringmiddleNode1;
        {
            // Block
        PStringEscapeSeq pstringescapeseqNode2;
        pstringescapeseqNode2 = (PStringEscapeSeq)nodeArrayList1.get(0);

        pstringmiddleNode1 = new ADoneEscapeStringMiddle(pstringescapeseqNode2);
        }
	nodeList.add(pstringmiddleNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new59() /* reduce AStringEscapeSeq */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStringEscapeSeq pstringescapeseqNode1;
        {
            // Block
        TStringEscape tstringescapeNode2;
        PEscapeChar pescapecharNode3;
        tstringescapeNode2 = (TStringEscape)nodeArrayList1.get(0);
        pescapecharNode3 = (PEscapeChar)nodeArrayList2.get(0);

        pstringescapeseqNode1 = new AStringEscapeSeq(tstringescapeNode2, pescapecharNode3);
        }
	nodeList.add(pstringescapeseqNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new60() /* reduce AAEscapeChar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PEscapeChar pescapecharNode1;
        {
            // Block
        TEscapeAlarm tescapealarmNode2;
        tescapealarmNode2 = (TEscapeAlarm)nodeArrayList1.get(0);

        pescapecharNode1 = new AAEscapeChar(tescapealarmNode2);
        }
	nodeList.add(pescapecharNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new61() /* reduce ABEscapeChar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PEscapeChar pescapecharNode1;
        {
            // Block
        TEscapeBackspace tescapebackspaceNode2;
        tescapebackspaceNode2 = (TEscapeBackspace)nodeArrayList1.get(0);

        pescapecharNode1 = new ABEscapeChar(tescapebackspaceNode2);
        }
	nodeList.add(pescapecharNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new62() /* reduce AFEscapeChar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PEscapeChar pescapecharNode1;
        {
            // Block
        TEscapeFormfeed tescapeformfeedNode2;
        tescapeformfeedNode2 = (TEscapeFormfeed)nodeArrayList1.get(0);

        pescapecharNode1 = new AFEscapeChar(tescapeformfeedNode2);
        }
	nodeList.add(pescapecharNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new63() /* reduce AREscapeChar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PEscapeChar pescapecharNode1;
        {
            // Block
        TEscapeCarriageReturn tescapecarriagereturnNode2;
        tescapecarriagereturnNode2 = (TEscapeCarriageReturn)nodeArrayList1.get(0);

        pescapecharNode1 = new AREscapeChar(tescapecarriagereturnNode2);
        }
	nodeList.add(pescapecharNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new64() /* reduce ANEscapeChar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PEscapeChar pescapecharNode1;
        {
            // Block
        TEscapeNewline tescapenewlineNode2;
        tescapenewlineNode2 = (TEscapeNewline)nodeArrayList1.get(0);

        pescapecharNode1 = new ANEscapeChar(tescapenewlineNode2);
        }
	nodeList.add(pescapecharNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new65() /* reduce ATEscapeChar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PEscapeChar pescapecharNode1;
        {
            // Block
        TEscapeTab tescapetabNode2;
        tescapetabNode2 = (TEscapeTab)nodeArrayList1.get(0);

        pescapecharNode1 = new ATEscapeChar(tescapetabNode2);
        }
	nodeList.add(pescapecharNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new66() /* reduce AVEscapeChar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PEscapeChar pescapecharNode1;
        {
            // Block
        TEscapeVerticalTab tescapeverticaltabNode2;
        tescapeverticaltabNode2 = (TEscapeVerticalTab)nodeArrayList1.get(0);

        pescapecharNode1 = new AVEscapeChar(tescapeverticaltabNode2);
        }
	nodeList.add(pescapecharNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new67() /* reduce ASlashEscapeChar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PEscapeChar pescapecharNode1;
        {
            // Block
        TEscapeBackslash tescapebackslashNode2;
        tescapebackslashNode2 = (TEscapeBackslash)nodeArrayList1.get(0);

        pescapecharNode1 = new ASlashEscapeChar(tescapebackslashNode2);
        }
	nodeList.add(pescapecharNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new68() /* reduce ASingleEscapeChar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PEscapeChar pescapecharNode1;
        {
            // Block
        TEscapeSingleQuote tescapesinglequoteNode2;
        tescapesinglequoteNode2 = (TEscapeSingleQuote)nodeArrayList1.get(0);

        pescapecharNode1 = new ASingleEscapeChar(tescapesinglequoteNode2);
        }
	nodeList.add(pescapecharNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new69() /* reduce ADoubleEscapeChar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PEscapeChar pescapecharNode1;
        {
            // Block
        TEscapeDoubleQuote tescapedoublequoteNode2;
        tescapedoublequoteNode2 = (TEscapeDoubleQuote)nodeArrayList1.get(0);

        pescapecharNode1 = new ADoubleEscapeChar(tescapedoublequoteNode2);
        }
	nodeList.add(pescapecharNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new70() /* reduce AQuestionEscapeChar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PEscapeChar pescapecharNode1;
        {
            // Block
        TEscapeQuestionMark tescapequestionmarkNode2;
        tescapequestionmarkNode2 = (TEscapeQuestionMark)nodeArrayList1.get(0);

        pescapecharNode1 = new AQuestionEscapeChar(tescapequestionmarkNode2);
        }
	nodeList.add(pescapecharNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new71() /* reduce AOctalEscapeChar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PEscapeChar pescapecharNode1;
        {
            // Block
        TEscapeOctalChar tescapeoctalcharNode2;
        tescapeoctalcharNode2 = (TEscapeOctalChar)nodeArrayList1.get(0);

        pescapecharNode1 = new AOctalEscapeChar(tescapeoctalcharNode2);
        }
	nodeList.add(pescapecharNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new72() /* reduce AHexEscapeChar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PEscapeChar pescapecharNode1;
        {
            // Block
        TEscapeHexChar tescapehexcharNode2;
        tescapehexcharNode2 = (TEscapeHexChar)nodeArrayList1.get(0);

        pescapecharNode1 = new AHexEscapeChar(tescapehexcharNode2);
        }
	nodeList.add(pescapecharNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new73() /* reduce AUnicodeEscapeChar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PEscapeChar pescapecharNode1;
        {
            // Block
        TEscapeUnicodeChar tescapeunicodecharNode2;
        tescapeunicodecharNode2 = (TEscapeUnicodeChar)nodeArrayList1.get(0);

        pescapecharNode1 = new AUnicodeEscapeChar(tescapeunicodecharNode2);
        }
	nodeList.add(pescapecharNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new74() /* reduce ADefaultEscapeChar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PEscapeChar pescapecharNode1;
        {
            // Block
        TEscapeDefault tescapedefaultNode2;
        tescapedefaultNode2 = (TEscapeDefault)nodeArrayList1.get(0);

        pescapecharNode1 = new ADefaultEscapeChar(tescapedefaultNode2);
        }
	nodeList.add(pescapecharNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new75() /* reduce ABranch */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBranch pbranchNode1;
        {
            // Block
        TSemi tsemiNode2;
        PCond pcondNode3;
        TTernaryQuestionMark tternaryquestionmarkNode4;
        PIf pifNode5;
        TTernaryColon tternarycolonNode6;
        PElse pelseNode7;
        tsemiNode2 = (TSemi)nodeArrayList1.get(0);
        pcondNode3 = (PCond)nodeArrayList2.get(0);
        tternaryquestionmarkNode4 = (TTernaryQuestionMark)nodeArrayList3.get(0);
        pifNode5 = (PIf)nodeArrayList4.get(0);
        tternarycolonNode6 = (TTernaryColon)nodeArrayList5.get(0);
        pelseNode7 = (PElse)nodeArrayList6.get(0);

        pbranchNode1 = new ABranch(tsemiNode2, pcondNode3, tternaryquestionmarkNode4, pifNode5, tternarycolonNode6, pelseNode7);
        }
	nodeList.add(pbranchNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new76() /* reduce ACond */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCond pcondNode1;
        {
            // Block
        PFunc pfuncNode2;
        pfuncNode2 = (PFunc)nodeArrayList1.get(0);

        pcondNode1 = new ACond(pfuncNode2);
        }
	nodeList.add(pcondNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new77() /* reduce AIf */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIf pifNode1;
        {
            // Block
        PFunc pfuncNode2;
        pfuncNode2 = (PFunc)nodeArrayList1.get(0);

        pifNode1 = new AIf(pfuncNode2);
        }
	nodeList.add(pifNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new78() /* reduce AElse */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PElse pelseNode1;
        {
            // Block
        PFunc pfuncNode2;
        pfuncNode2 = (PFunc)nodeArrayList1.get(0);

        pelseNode1 = new AElse(pfuncNode2);
        }
	nodeList.add(pelseNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new79() /* reduce AFullList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PList plistNode1;
        {
            // Block
        TStartList tstartlistNode2;
        PArgs pargsNode3;
        TEndList tendlistNode4;
        tstartlistNode2 = (TStartList)nodeArrayList1.get(0);
        pargsNode3 = (PArgs)nodeArrayList2.get(0);
        tendlistNode4 = (TEndList)nodeArrayList3.get(0);

        plistNode1 = new AFullList(tstartlistNode2, pargsNode3, tendlistNode4);
        }
	nodeList.add(plistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new80() /* reduce AEmptyList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PList plistNode1;
        {
            // Block
        TStartList tstartlistNode2;
        TEndList tendlistNode3;
        tstartlistNode2 = (TStartList)nodeArrayList1.get(0);
        tendlistNode3 = (TEndList)nodeArrayList2.get(0);

        plistNode1 = new AEmptyList(tstartlistNode2, tendlistNode3);
        }
	nodeList.add(plistNode1);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {19, SHIFT, 1}, {20, SHIFT, 2}, {21, SHIFT, 3}, {22, SHIFT, 4}, {23, SHIFT, 5}, {24, SHIFT, 6}, {25, SHIFT, 7}, {26, SHIFT, 8}, {27, SHIFT, 9}, {28, SHIFT, 10}, {29, SHIFT, 11}, {31, SHIFT, 12}, {32, SHIFT, 13}, {33, SHIFT, 14}, {35, SHIFT, 15}, {36, SHIFT, 16}, {37, SHIFT, 17}, {38, SHIFT, 18}, {39, SHIFT, 19}, {40, SHIFT, 20}, {41, SHIFT, 21}, {42, SHIFT, 22}, {43, SHIFT, 23}, {44, SHIFT, 24}, {45, SHIFT, 25}, {46, SHIFT, 26}, {47, SHIFT, 27}, {48, SHIFT, 28}, {49, SHIFT, 29}, {50, SHIFT, 30}, {56, SHIFT, 31}, {59, SHIFT, 32}, },
			{{-1, REDUCE, 13}, },
			{{-1, REDUCE, 14}, },
			{{-1, REDUCE, 15}, },
			{{-1, REDUCE, 17}, },
			{{-1, REDUCE, 16}, },
			{{-1, REDUCE, 20}, },
			{{-1, REDUCE, 21}, },
			{{-1, REDUCE, 18}, },
			{{-1, REDUCE, 22}, },
			{{-1, REDUCE, 19}, },
			{{-1, REDUCE, 25}, },
			{{-1, REDUCE, 23}, },
			{{-1, REDUCE, 24}, },
			{{-1, ERROR, 14}, {59, SHIFT, 39}, },
			{{-1, REDUCE, 37}, },
			{{-1, REDUCE, 33}, },
			{{-1, REDUCE, 34}, },
			{{-1, REDUCE, 38}, },
			{{-1, REDUCE, 35}, },
			{{-1, REDUCE, 36}, },
			{{-1, REDUCE, 39}, },
			{{-1, REDUCE, 40}, },
			{{-1, REDUCE, 41}, },
			{{-1, REDUCE, 27}, },
			{{-1, REDUCE, 28}, },
			{{-1, REDUCE, 29}, },
			{{-1, REDUCE, 30}, },
			{{-1, REDUCE, 31}, },
			{{-1, REDUCE, 32}, },
			{{-1, REDUCE, 26}, },
			{{-1, ERROR, 31}, {19, SHIFT, 1}, {20, SHIFT, 2}, {21, SHIFT, 3}, {22, SHIFT, 4}, {23, SHIFT, 5}, {24, SHIFT, 6}, {25, SHIFT, 7}, {26, SHIFT, 8}, {27, SHIFT, 9}, {28, SHIFT, 10}, {29, SHIFT, 11}, {31, SHIFT, 12}, {32, SHIFT, 13}, {35, SHIFT, 15}, {36, SHIFT, 16}, {37, SHIFT, 17}, {38, SHIFT, 18}, {39, SHIFT, 19}, {40, SHIFT, 20}, {41, SHIFT, 21}, {42, SHIFT, 22}, {43, SHIFT, 23}, {44, SHIFT, 24}, {45, SHIFT, 25}, {46, SHIFT, 26}, {47, SHIFT, 27}, {48, SHIFT, 28}, {49, SHIFT, 29}, {50, SHIFT, 30}, {56, SHIFT, 31}, {59, SHIFT, 32}, },
			{{-1, REDUCE, 12}, },
			{{-1, ERROR, 33}, {63, ACCEPT, -1}, },
			{{-1, ERROR, 34}, {19, SHIFT, 1}, {20, SHIFT, 2}, {21, SHIFT, 3}, {22, SHIFT, 4}, {23, SHIFT, 5}, {24, SHIFT, 6}, {25, SHIFT, 7}, {26, SHIFT, 8}, {27, SHIFT, 9}, {28, SHIFT, 10}, {29, SHIFT, 11}, {31, SHIFT, 12}, {32, SHIFT, 13}, {33, SHIFT, 14}, {35, SHIFT, 15}, {36, SHIFT, 16}, {37, SHIFT, 17}, {38, SHIFT, 18}, {39, SHIFT, 19}, {40, SHIFT, 20}, {41, SHIFT, 21}, {42, SHIFT, 22}, {43, SHIFT, 23}, {44, SHIFT, 24}, {45, SHIFT, 25}, {46, SHIFT, 26}, {47, SHIFT, 27}, {48, SHIFT, 28}, {49, SHIFT, 29}, {50, SHIFT, 30}, {56, SHIFT, 31}, {59, SHIFT, 32}, },
			{{-1, REDUCE, 3}, },
			{{-1, REDUCE, 1}, },
			{{-1, ERROR, 37}, {51, SHIFT, 44}, },
			{{-1, REDUCE, 11}, },
			{{-1, ERROR, 39}, {51, SHIFT, 46}, },
			{{-1, REDUCE, 76}, },
			{{-1, ERROR, 41}, {57, SHIFT, 48}, },
			{{-1, REDUCE, 2}, },
			{{-1, REDUCE, 0}, },
			{{-1, ERROR, 44}, {52, SHIFT, 49}, {59, SHIFT, 50}, },
			{{-1, REDUCE, 10}, },
			{{-1, ERROR, 46}, {52, SHIFT, 52}, {59, SHIFT, 53}, },
			{{-1, ERROR, 47}, {34, SHIFT, 55}, },
			{{-1, ERROR, 48}, {19, SHIFT, 1}, {20, SHIFT, 2}, {21, SHIFT, 3}, {22, SHIFT, 4}, {23, SHIFT, 5}, {24, SHIFT, 6}, {25, SHIFT, 7}, {26, SHIFT, 8}, {27, SHIFT, 9}, {28, SHIFT, 10}, {29, SHIFT, 11}, {31, SHIFT, 12}, {32, SHIFT, 13}, {35, SHIFT, 15}, {36, SHIFT, 16}, {37, SHIFT, 17}, {38, SHIFT, 18}, {39, SHIFT, 19}, {40, SHIFT, 20}, {41, SHIFT, 21}, {42, SHIFT, 22}, {43, SHIFT, 23}, {44, SHIFT, 24}, {45, SHIFT, 25}, {46, SHIFT, 26}, {47, SHIFT, 27}, {48, SHIFT, 28}, {49, SHIFT, 29}, {50, SHIFT, 30}, {56, SHIFT, 31}, {59, SHIFT, 32}, },
			{{-1, REDUCE, 42}, },
			{{-1, REDUCE, 44}, },
			{{-1, ERROR, 51}, {51, SHIFT, 44}, {52, SHIFT, 58}, },
			{{-1, REDUCE, 5}, },
			{{-1, REDUCE, 8}, },
			{{-1, ERROR, 54}, {52, SHIFT, 60}, {55, SHIFT, 61}, },
			{{-1, ERROR, 55}, {19, SHIFT, 1}, {20, SHIFT, 2}, {21, SHIFT, 3}, {22, SHIFT, 4}, {23, SHIFT, 5}, {24, SHIFT, 6}, {25, SHIFT, 7}, {26, SHIFT, 8}, {27, SHIFT, 9}, {28, SHIFT, 10}, {29, SHIFT, 11}, {31, SHIFT, 12}, {32, SHIFT, 13}, {35, SHIFT, 15}, {36, SHIFT, 16}, {37, SHIFT, 17}, {38, SHIFT, 18}, {39, SHIFT, 19}, {40, SHIFT, 20}, {41, SHIFT, 21}, {42, SHIFT, 22}, {43, SHIFT, 23}, {44, SHIFT, 24}, {45, SHIFT, 25}, {46, SHIFT, 26}, {47, SHIFT, 27}, {48, SHIFT, 28}, {49, SHIFT, 29}, {50, SHIFT, 30}, {56, SHIFT, 31}, {59, SHIFT, 32}, },
			{{-1, REDUCE, 77}, },
			{{-1, ERROR, 57}, {58, SHIFT, 64}, },
			{{-1, REDUCE, 43}, },
			{{-1, REDUCE, 45}, },
			{{-1, REDUCE, 6}, },
			{{-1, ERROR, 61}, {59, SHIFT, 65}, },
			{{-1, REDUCE, 7}, },
			{{-1, REDUCE, 4}, },
			{{-1, ERROR, 64}, {19, SHIFT, 1}, {20, SHIFT, 2}, {21, SHIFT, 3}, {22, SHIFT, 4}, {23, SHIFT, 5}, {24, SHIFT, 6}, {25, SHIFT, 7}, {26, SHIFT, 8}, {27, SHIFT, 9}, {28, SHIFT, 10}, {29, SHIFT, 11}, {31, SHIFT, 12}, {32, SHIFT, 13}, {35, SHIFT, 15}, {36, SHIFT, 16}, {37, SHIFT, 17}, {38, SHIFT, 18}, {39, SHIFT, 19}, {40, SHIFT, 20}, {41, SHIFT, 21}, {42, SHIFT, 22}, {43, SHIFT, 23}, {44, SHIFT, 24}, {45, SHIFT, 25}, {46, SHIFT, 26}, {47, SHIFT, 27}, {48, SHIFT, 28}, {49, SHIFT, 29}, {50, SHIFT, 30}, {56, SHIFT, 31}, {59, SHIFT, 32}, },
			{{-1, REDUCE, 9}, },
			{{-1, REDUCE, 78}, },
			{{-1, REDUCE, 75}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 33}, },
			{{-1, 34}, },
			{{-1, 35}, {34, 42}, },
			{{-1, 47}, },
			{{-1, 54}, },
			{{-1, 62}, },
			{{-1, 36}, {31, 40}, {34, 43}, {48, 56}, {55, 63}, {64, 66}, },
			{{-1, 37}, },
			{{-1, 45}, {51, 59}, },
			{{-1, 51}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, 38}, },
			{{-1, 41}, },
			{{-1, 57}, },
			{{-1, 67}, },
			{{-1, -1}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: 'h', 't', 'r', '$', '^', '{', '}', '.', flatten, '#', '\', '@', 'print', 'def', '=', '<', '>', '!=', '<=', '>=', '&', '|', 'x', '!', '+', '-', '*', '/', '%', '~', ';', identifier",
			"expecting: '('",
			"expecting: identifier",
			"expecting: 'h', 't', 'r', '$', '^', '{', '}', '.', flatten, '#', '\', '@', 'print', '=', '<', '>', '!=', '<=', '>=', '&', '|', 'x', '!', '+', '-', '*', '/', '%', '~', ';', identifier",
			"expecting: EOF",
			"expecting: 'h', 't', 'r', '$', '^', '{', '}', '.', flatten, '#', '\', '@', 'print', 'def', '=', '<', '>', '!=', '<=', '>=', '&', '|', 'x', '!', '+', '-', '*', '/', '%', '~', ';', ternary question mark, ':', identifier, EOF",
			"expecting: ternary question mark",
			"expecting: ')', identifier",
			"expecting: ':='",
			"expecting: 'h', 't', 'r', '$', '^', '{', '}', '.', flatten, '#', '\', '@', 'print', 'def', '=', '<', '>', '!=', '<=', '>=', '&', '|', 'x', '!', '+', '-', '*', '/', '%', '~', '(', ')', ';', ternary question mark, ':', identifier, EOF",
			"expecting: '(', ')'",
			"expecting: ')', ','",
			"expecting: ':'",
        };*/
    private static int[] errors;
/*      {
			0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 4, 0, 0, 4, 1, 5, 1, 6, 6, 0, 4, 7, 5, 7, 8, 3, 9, 10, 10, 8, 11, 11, 3, 12, 12, 9, 10, 8, 2, 11, 0, 3, 11, 5, 5, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}

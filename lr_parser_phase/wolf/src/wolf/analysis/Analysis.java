/* This file was generated by SableCC (http://www.sablecc.org/). */

package wolf.analysis;

import wolf.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object o);
    Object getOut(Node node);
    void setOut(Node node, Object o);

    void caseStart(Start node);
    void caseADefsProgram(ADefsProgram node);
    void caseANoDefsProgram(ANoDefsProgram node);
    void caseAMultiDefDefList(AMultiDefDefList node);
    void caseASingleDefDefList(ASingleDefDefList node);
    void caseADefHeader(ADefHeader node);
    void caseAEmptySig(AEmptySig node);
    void caseAFullSig(AFullSig node);
    void caseAMoreSigArgs(AMoreSigArgs node);
    void caseADoneSigArgs(ADoneSigArgs node);
    void caseASigArgRest(ASigArgRest node);
    void caseAFuncFunc(AFuncFunc node);
    void caseABranchFunc(ABranchFunc node);
    void caseAIdFuncName(AIdFuncName node);
    void caseAHeadFuncName(AHeadFuncName node);
    void caseATailFuncName(ATailFuncName node);
    void caseAReverseFuncName(AReverseFuncName node);
    void caseAPrependFuncName(APrependFuncName node);
    void caseAAppendFuncName(AAppendFuncName node);
    void caseAMapFuncName(AMapFuncName node);
    void caseALengthFuncName(ALengthFuncName node);
    void caseAFoldlFuncName(AFoldlFuncName node);
    void caseAFoldrFuncName(AFoldrFuncName node);
    void caseAFlattenFuncName(AFlattenFuncName node);
    void caseAIdentityFuncName(AIdentityFuncName node);
    void caseAPrintFuncName(APrintFuncName node);
    void caseALambdaFuncName(ALambdaFuncName node);
    void caseANegFuncName(ANegFuncName node);
    void caseANotFuncName(ANotFuncName node);
    void caseAPlusFuncName(APlusFuncName node);
    void caseAMinusFuncName(AMinusFuncName node);
    void caseAMultFuncName(AMultFuncName node);
    void caseADivFuncName(ADivFuncName node);
    void caseAModFuncName(AModFuncName node);
    void caseALtFuncName(ALtFuncName node);
    void caseAGtFuncName(AGtFuncName node);
    void caseALteFuncName(ALteFuncName node);
    void caseAGteFuncName(AGteFuncName node);
    void caseAEqualFuncName(AEqualFuncName node);
    void caseANotEqualFuncName(ANotEqualFuncName node);
    void caseAAndFuncName(AAndFuncName node);
    void caseAOrFuncName(AOrFuncName node);
    void caseAXorFuncName(AXorFuncName node);
    void caseAEmptyArgList(AEmptyArgList node);
    void caseAFullArgList(AFullArgList node);
    void caseADoneArgs(ADoneArgs node);
    void caseAMoreArgs(AMoreArgs node);
    void caseAArgRest(AArgRest node);
    void caseAFuncArg(AFuncArg node);
    void caseAListArg(AListArg node);
    void caseAFloatArg(AFloatArg node);
    void caseAIntArg(AIntArg node);
    void caseAIdentifierArg(AIdentifierArg node);
    void caseAStringArg(AStringArg node);
    void caseAEmptyString(AEmptyString node);
    void caseAFullString(AFullString node);
    void caseAMoreBodyStringMiddle(AMoreBodyStringMiddle node);
    void caseADoneBodyStringMiddle(ADoneBodyStringMiddle node);
    void caseAMoreEscapeStringMiddle(AMoreEscapeStringMiddle node);
    void caseADoneEscapeStringMiddle(ADoneEscapeStringMiddle node);
    void caseAStringEscapeSeq(AStringEscapeSeq node);
    void caseAAEscapeChar(AAEscapeChar node);
    void caseABEscapeChar(ABEscapeChar node);
    void caseAFEscapeChar(AFEscapeChar node);
    void caseAREscapeChar(AREscapeChar node);
    void caseANEscapeChar(ANEscapeChar node);
    void caseATEscapeChar(ATEscapeChar node);
    void caseAVEscapeChar(AVEscapeChar node);
    void caseASlashEscapeChar(ASlashEscapeChar node);
    void caseASingleEscapeChar(ASingleEscapeChar node);
    void caseADoubleEscapeChar(ADoubleEscapeChar node);
    void caseAQuestionEscapeChar(AQuestionEscapeChar node);
    void caseAOctalEscapeChar(AOctalEscapeChar node);
    void caseAHexEscapeChar(AHexEscapeChar node);
    void caseAUnicodeEscapeChar(AUnicodeEscapeChar node);
    void caseADefaultEscapeChar(ADefaultEscapeChar node);
    void caseABranch(ABranch node);
    void caseACond(ACond node);
    void caseAIf(AIf node);
    void caseAElse(AElse node);
    void caseAFullList(AFullList node);
    void caseAEmptyList(AEmptyList node);

    void caseTStringStart(TStringStart node);
    void caseTStringEscape(TStringEscape node);
    void caseTEscapeAlarm(TEscapeAlarm node);
    void caseTEscapeBackspace(TEscapeBackspace node);
    void caseTEscapeFormfeed(TEscapeFormfeed node);
    void caseTEscapeCarriageReturn(TEscapeCarriageReturn node);
    void caseTEscapeNewline(TEscapeNewline node);
    void caseTEscapeTab(TEscapeTab node);
    void caseTEscapeVerticalTab(TEscapeVerticalTab node);
    void caseTEscapeBackslash(TEscapeBackslash node);
    void caseTEscapeSingleQuote(TEscapeSingleQuote node);
    void caseTEscapeDoubleQuote(TEscapeDoubleQuote node);
    void caseTEscapeQuestionMark(TEscapeQuestionMark node);
    void caseTEscapeOctalChar(TEscapeOctalChar node);
    void caseTEscapeHexChar(TEscapeHexChar node);
    void caseTEscapeUnicodeChar(TEscapeUnicodeChar node);
    void caseTEscapeDefault(TEscapeDefault node);
    void caseTStringBody(TStringBody node);
    void caseTStringEnd(TStringEnd node);
    void caseTHead(THead node);
    void caseTTail(TTail node);
    void caseTReverse(TReverse node);
    void caseTAppend(TAppend node);
    void caseTPrepend(TPrepend node);
    void caseTFoldl(TFoldl node);
    void caseTFoldr(TFoldr node);
    void caseTMap(TMap node);
    void caseTFlatten(TFlatten node);
    void caseTLength(TLength node);
    void caseTLambdaStart(TLambdaStart node);
    void caseTLambdaArrow(TLambdaArrow node);
    void caseTIdentity(TIdentity node);
    void caseTPrint(TPrint node);
    void caseTDef(TDef node);
    void caseTComment(TComment node);
    void caseTSpace(TSpace node);
    void caseTAssign(TAssign node);
    void caseTEqual(TEqual node);
    void caseTLt(TLt node);
    void caseTGt(TGt node);
    void caseTNotEqual(TNotEqual node);
    void caseTLte(TLte node);
    void caseTGte(TGte node);
    void caseTAnd(TAnd node);
    void caseTOr(TOr node);
    void caseTXor(TXor node);
    void caseTLogicalNot(TLogicalNot node);
    void caseTPlus(TPlus node);
    void caseTMinus(TMinus node);
    void caseTMult(TMult node);
    void caseTDiv(TDiv node);
    void caseTMod(TMod node);
    void caseTNeg(TNeg node);
    void caseTLParen(TLParen node);
    void caseTRParen(TRParen node);
    void caseTStartList(TStartList node);
    void caseTEndList(TEndList node);
    void caseTComma(TComma node);
    void caseTSemi(TSemi node);
    void caseTTernaryQuestionMark(TTernaryQuestionMark node);
    void caseTTernaryColon(TTernaryColon node);
    void caseTIdentifier(TIdentifier node);
    void caseTIntNumber(TIntNumber node);
    void caseTFloatNumber(TFloatNumber node);
    void caseTMisc(TMisc node);
    void caseEOF(EOF node);
    void caseInvalidToken(InvalidToken node);
}

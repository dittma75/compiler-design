/* This file was generated by SableCC (http://www.sablecc.org/). */

package wolf.node;

import wolf.analysis.*;

@SuppressWarnings("nls")
public final class AMultipleDefsDefList extends PDefList
{
    private PDefList _defList_;
    private PDefHeader _defHeader_;

    public AMultipleDefsDefList()
    {
        // Constructor
    }

    public AMultipleDefsDefList(
        @SuppressWarnings("hiding") PDefList _defList_,
        @SuppressWarnings("hiding") PDefHeader _defHeader_)
    {
        // Constructor
        setDefList(_defList_);

        setDefHeader(_defHeader_);

    }

    @Override
    public Object clone()
    {
        return new AMultipleDefsDefList(
            cloneNode(this._defList_),
            cloneNode(this._defHeader_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAMultipleDefsDefList(this);
    }

    public PDefList getDefList()
    {
        return this._defList_;
    }

    public void setDefList(PDefList node)
    {
        if(this._defList_ != null)
        {
            this._defList_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._defList_ = node;
    }

    public PDefHeader getDefHeader()
    {
        return this._defHeader_;
    }

    public void setDefHeader(PDefHeader node)
    {
        if(this._defHeader_ != null)
        {
            this._defHeader_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._defHeader_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._defList_)
            + toString(this._defHeader_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._defList_ == child)
        {
            this._defList_ = null;
            return;
        }

        if(this._defHeader_ == child)
        {
            this._defHeader_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._defList_ == oldChild)
        {
            setDefList((PDefList) newChild);
            return;
        }

        if(this._defHeader_ == oldChild)
        {
            setDefHeader((PDefHeader) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}

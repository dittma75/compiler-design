/* This file was generated by SableCC (http://www.sablecc.org/). */

package wolf.node;

import wolf.analysis.*;

@SuppressWarnings("nls")
public final class ABranch extends PBranch
{
    private TTernarySemi _ternarySemi_;
    private PFunction _cond_;
    private TTernaryQuestionMark _ternaryQuestionMark_;
    private PFunction _if_;
    private TTernaryColon _ternaryColon_;
    private PFunction _else_;

    public ABranch()
    {
        // Constructor
    }

    public ABranch(
        @SuppressWarnings("hiding") TTernarySemi _ternarySemi_,
        @SuppressWarnings("hiding") PFunction _cond_,
        @SuppressWarnings("hiding") TTernaryQuestionMark _ternaryQuestionMark_,
        @SuppressWarnings("hiding") PFunction _if_,
        @SuppressWarnings("hiding") TTernaryColon _ternaryColon_,
        @SuppressWarnings("hiding") PFunction _else_)
    {
        // Constructor
        setTernarySemi(_ternarySemi_);

        setCond(_cond_);

        setTernaryQuestionMark(_ternaryQuestionMark_);

        setIf(_if_);

        setTernaryColon(_ternaryColon_);

        setElse(_else_);

    }

    @Override
    public Object clone()
    {
        return new ABranch(
            cloneNode(this._ternarySemi_),
            cloneNode(this._cond_),
            cloneNode(this._ternaryQuestionMark_),
            cloneNode(this._if_),
            cloneNode(this._ternaryColon_),
            cloneNode(this._else_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseABranch(this);
    }

    public TTernarySemi getTernarySemi()
    {
        return this._ternarySemi_;
    }

    public void setTernarySemi(TTernarySemi node)
    {
        if(this._ternarySemi_ != null)
        {
            this._ternarySemi_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._ternarySemi_ = node;
    }

    public PFunction getCond()
    {
        return this._cond_;
    }

    public void setCond(PFunction node)
    {
        if(this._cond_ != null)
        {
            this._cond_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._cond_ = node;
    }

    public TTernaryQuestionMark getTernaryQuestionMark()
    {
        return this._ternaryQuestionMark_;
    }

    public void setTernaryQuestionMark(TTernaryQuestionMark node)
    {
        if(this._ternaryQuestionMark_ != null)
        {
            this._ternaryQuestionMark_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._ternaryQuestionMark_ = node;
    }

    public PFunction getIf()
    {
        return this._if_;
    }

    public void setIf(PFunction node)
    {
        if(this._if_ != null)
        {
            this._if_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._if_ = node;
    }

    public TTernaryColon getTernaryColon()
    {
        return this._ternaryColon_;
    }

    public void setTernaryColon(TTernaryColon node)
    {
        if(this._ternaryColon_ != null)
        {
            this._ternaryColon_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._ternaryColon_ = node;
    }

    public PFunction getElse()
    {
        return this._else_;
    }

    public void setElse(PFunction node)
    {
        if(this._else_ != null)
        {
            this._else_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._else_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._ternarySemi_)
            + toString(this._cond_)
            + toString(this._ternaryQuestionMark_)
            + toString(this._if_)
            + toString(this._ternaryColon_)
            + toString(this._else_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._ternarySemi_ == child)
        {
            this._ternarySemi_ = null;
            return;
        }

        if(this._cond_ == child)
        {
            this._cond_ = null;
            return;
        }

        if(this._ternaryQuestionMark_ == child)
        {
            this._ternaryQuestionMark_ = null;
            return;
        }

        if(this._if_ == child)
        {
            this._if_ = null;
            return;
        }

        if(this._ternaryColon_ == child)
        {
            this._ternaryColon_ = null;
            return;
        }

        if(this._else_ == child)
        {
            this._else_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._ternarySemi_ == oldChild)
        {
            setTernarySemi((TTernarySemi) newChild);
            return;
        }

        if(this._cond_ == oldChild)
        {
            setCond((PFunction) newChild);
            return;
        }

        if(this._ternaryQuestionMark_ == oldChild)
        {
            setTernaryQuestionMark((TTernaryQuestionMark) newChild);
            return;
        }

        if(this._if_ == oldChild)
        {
            setIf((PFunction) newChild);
            return;
        }

        if(this._ternaryColon_ == oldChild)
        {
            setTernaryColon((TTernaryColon) newChild);
            return;
        }

        if(this._else_ == oldChild)
        {
            setElse((PFunction) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}

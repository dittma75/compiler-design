/* This file was generated by SableCC (http://www.sablecc.org/). */

package wolf.node;

import wolf.analysis.*;

@SuppressWarnings("nls")
public final class ABinNativeFunction extends PFunction
{
    private PNativeBinOp _nativeBinOp_;
    private TLParen _lParen_;
    private PArg _a_;
    private TComma _comma_;
    private PArg _b_;
    private TRParen _rParen_;

    public ABinNativeFunction()
    {
        // Constructor
    }

    public ABinNativeFunction(
        @SuppressWarnings("hiding") PNativeBinOp _nativeBinOp_,
        @SuppressWarnings("hiding") TLParen _lParen_,
        @SuppressWarnings("hiding") PArg _a_,
        @SuppressWarnings("hiding") TComma _comma_,
        @SuppressWarnings("hiding") PArg _b_,
        @SuppressWarnings("hiding") TRParen _rParen_)
    {
        // Constructor
        setNativeBinOp(_nativeBinOp_);

        setLParen(_lParen_);

        setA(_a_);

        setComma(_comma_);

        setB(_b_);

        setRParen(_rParen_);

    }

    @Override
    public Object clone()
    {
        return new ABinNativeFunction(
            cloneNode(this._nativeBinOp_),
            cloneNode(this._lParen_),
            cloneNode(this._a_),
            cloneNode(this._comma_),
            cloneNode(this._b_),
            cloneNode(this._rParen_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseABinNativeFunction(this);
    }

    public PNativeBinOp getNativeBinOp()
    {
        return this._nativeBinOp_;
    }

    public void setNativeBinOp(PNativeBinOp node)
    {
        if(this._nativeBinOp_ != null)
        {
            this._nativeBinOp_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._nativeBinOp_ = node;
    }

    public TLParen getLParen()
    {
        return this._lParen_;
    }

    public void setLParen(TLParen node)
    {
        if(this._lParen_ != null)
        {
            this._lParen_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lParen_ = node;
    }

    public PArg getA()
    {
        return this._a_;
    }

    public void setA(PArg node)
    {
        if(this._a_ != null)
        {
            this._a_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._a_ = node;
    }

    public TComma getComma()
    {
        return this._comma_;
    }

    public void setComma(TComma node)
    {
        if(this._comma_ != null)
        {
            this._comma_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._comma_ = node;
    }

    public PArg getB()
    {
        return this._b_;
    }

    public void setB(PArg node)
    {
        if(this._b_ != null)
        {
            this._b_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._b_ = node;
    }

    public TRParen getRParen()
    {
        return this._rParen_;
    }

    public void setRParen(TRParen node)
    {
        if(this._rParen_ != null)
        {
            this._rParen_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rParen_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._nativeBinOp_)
            + toString(this._lParen_)
            + toString(this._a_)
            + toString(this._comma_)
            + toString(this._b_)
            + toString(this._rParen_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._nativeBinOp_ == child)
        {
            this._nativeBinOp_ = null;
            return;
        }

        if(this._lParen_ == child)
        {
            this._lParen_ = null;
            return;
        }

        if(this._a_ == child)
        {
            this._a_ = null;
            return;
        }

        if(this._comma_ == child)
        {
            this._comma_ = null;
            return;
        }

        if(this._b_ == child)
        {
            this._b_ = null;
            return;
        }

        if(this._rParen_ == child)
        {
            this._rParen_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._nativeBinOp_ == oldChild)
        {
            setNativeBinOp((PNativeBinOp) newChild);
            return;
        }

        if(this._lParen_ == oldChild)
        {
            setLParen((TLParen) newChild);
            return;
        }

        if(this._a_ == oldChild)
        {
            setA((PArg) newChild);
            return;
        }

        if(this._comma_ == oldChild)
        {
            setComma((TComma) newChild);
            return;
        }

        if(this._b_ == oldChild)
        {
            setB((PArg) newChild);
            return;
        }

        if(this._rParen_ == oldChild)
        {
            setRParen((TRParen) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}

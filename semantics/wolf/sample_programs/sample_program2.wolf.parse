SigArgs parsed successfully: def factorial ( n 
Sig parsed successfully: def factorial ( n ) 
Arg parsed successfully: def factorial ( n ) := ; = ( n 
Arg parsed successfully: def factorial ( n ) := ; = ( n , 0 
NativeBinary parsed successfully: def factorial ( n ) := ; = ( n , 0 ) 
Arg parsed successfully: def factorial ( n ) := ; = ( n , 0 ) ? @ ( 1 
NativeUnary parsed successfully: def factorial ( n ) := ; = ( n , 0 ) ? @ ( 1 ) 
Arg parsed successfully: def factorial ( n ) := ; = ( n , 0 ) ? @ ( 1 ) : * ( n 
Arg parsed successfully: def factorial ( n ) := ; = ( n , 0 ) ? @ ( 1 ) : * ( n , factorial ( - ( n 
Arg parsed successfully: def factorial ( n ) := ; = ( n , 0 ) ? @ ( 1 ) : * ( n , factorial ( - ( n , 1 
NativeBinary parsed successfully: def factorial ( n ) := ; = ( n , 0 ) ? @ ( 1 ) : * ( n , factorial ( - ( n , 1 ) 
Arg parsed successfully: def factorial ( n ) := ; = ( n , 0 ) ? @ ( 1 ) : * ( n , factorial ( - ( n , 1 ) 
Args parsed successfully: def factorial ( n ) := ; = ( n , 0 ) ? @ ( 1 ) : * ( n , factorial ( - ( n , 1 ) 
ArgList parsed successfully: def factorial ( n ) := ; = ( n , 0 ) ? @ ( 1 ) : * ( n , factorial ( - ( n , 1 ) ) 
Arg parsed successfully: def factorial ( n ) := ; = ( n , 0 ) ? @ ( 1 ) : * ( n , factorial ( - ( n , 1 ) ) 
NativeBinary parsed successfully: def factorial ( n ) := ; = ( n , 0 ) ? @ ( 1 ) : * ( n , factorial ( - ( n , 1 ) ) ) 
Branch parsed successfully: def factorial ( n ) := ; = ( n , 0 ) ? @ ( 1 ) : * ( n , factorial ( - ( n , 1 ) ) ) 
Def parsed successfully: def factorial ( n ) := ; = ( n , 0 ) ? @ ( 1 ) : * ( n , factorial ( - ( n , 1 ) ) ) 
SigArgs parsed successfully: def factorial ( n ) := ; = ( n , 0 ) ? @ ( 1 ) : * ( n , factorial ( - ( n , 1 ) ) ) . ( \ ( ( element 
Sig parsed successfully: def factorial ( n ) := ; = ( n , 0 ) ? @ ( 1 ) : * ( n , factorial ( - ( n , 1 ) ) ) . ( \ ( ( element ) 
Arg parsed successfully: def factorial ( n ) := ; = ( n , 0 ) ? @ ( 1 ) : * ( n , factorial ( - ( n , 1 ) ) ) . ( \ ( ( element ) -> + ( factorial ( element 
Args parsed successfully: def factorial ( n ) := ; = ( n , 0 ) ? @ ( 1 ) : * ( n , factorial ( - ( n , 1 ) ) ) . ( \ ( ( element ) -> + ( factorial ( element 
ArgList parsed successfully: def factorial ( n ) := ; = ( n , 0 ) ? @ ( 1 ) : * ( n , factorial ( - ( n , 1 ) ) ) . ( \ ( ( element ) -> + ( factorial ( element ) 
Arg parsed successfully: def factorial ( n ) := ; = ( n , 0 ) ? @ ( 1 ) : * ( n , factorial ( - ( n , 1 ) ) ) . ( \ ( ( element ) -> + ( factorial ( element ) 
Arg parsed successfully: def factorial ( n ) := ; = ( n , 0 ) ? @ ( 1 ) : * ( n , factorial ( - ( n , 1 ) ) ) . ( \ ( ( element ) -> + ( factorial ( element ) , 1 
NativeBinary parsed successfully: def factorial ( n ) := ; = ( n , 0 ) ? @ ( 1 ) : * ( n , factorial ( - ( n , 1 ) ) ) . ( \ ( ( element ) -> + ( factorial ( element ) , 1 ) 
Lambda parsed successfully: def factorial ( n ) := ; = ( n , 0 ) ? @ ( 1 ) : * ( n , factorial ( - ( n , 1 ) ) ) . ( \ ( ( element ) -> + ( factorial ( element ) , 1 ) ) 
Map parsed successfully: def factorial ( n ) := ; = ( n , 0 ) ? @ ( 1 ) : * ( n , factorial ( - ( n , 1 ) ) ) . ( \ ( ( element ) -> + ( factorial ( element ) , 1 ) ) , list ) 
Program parsed successfully: def factorial ( n ) := ; = ( n , 0 ) ? @ ( 1 ) : * ( n , factorial ( - ( n , 1 ) ) ) . ( \ ( ( element ) -> + ( factorial ( element ) , 1 ) ) , list ) 

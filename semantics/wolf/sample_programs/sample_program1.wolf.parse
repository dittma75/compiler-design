SigArgs parsed successfully: def int sumList ( list l 
Sig parsed successfully: def int sumList ( list l ) 
Arg parsed successfully: def int sumList ( list l ) := ; = ( l 
List parsed successfully: def int sumList ( list l ) := ; = ( l , [ ] 
Arg parsed successfully: def int sumList ( list l ) := ; = ( l , [ ] 
NativeBinary parsed successfully: def int sumList ( list l ) := ; = ( l , [ ] ) 
Arg parsed successfully: def int sumList ( list l ) := ; = ( l , [ ] ) ? @ ( 0 
NativeUnary parsed successfully: def int sumList ( list l ) := ; = ( l , [ ] ) ? @ ( 0 ) 
NativeListUnary parsed successfully: def int sumList ( list l ) := ; = ( l , [ ] ) ? @ ( 0 ) : + ( h ( l ) 
Arg parsed successfully: def int sumList ( list l ) := ; = ( l , [ ] ) ? @ ( 0 ) : + ( h ( l ) 
NativeListUnary parsed successfully: def int sumList ( list l ) := ; = ( l , [ ] ) ? @ ( 0 ) : + ( h ( l ) , sumList ( t ( l ) 
Arg parsed successfully: def int sumList ( list l ) := ; = ( l , [ ] ) ? @ ( 0 ) : + ( h ( l ) , sumList ( t ( l ) 
Args parsed successfully: def int sumList ( list l ) := ; = ( l , [ ] ) ? @ ( 0 ) : + ( h ( l ) , sumList ( t ( l ) 
ArgList parsed successfully: def int sumList ( list l ) := ; = ( l , [ ] ) ? @ ( 0 ) : + ( h ( l ) , sumList ( t ( l ) ) 
Arg parsed successfully: def int sumList ( list l ) := ; = ( l , [ ] ) ? @ ( 0 ) : + ( h ( l ) , sumList ( t ( l ) ) 
NativeBinary parsed successfully: def int sumList ( list l ) := ; = ( l , [ ] ) ? @ ( 0 ) : + ( h ( l ) , sumList ( t ( l ) ) ) 
Branch parsed successfully: def int sumList ( list l ) := ; = ( l , [ ] ) ? @ ( 0 ) : + ( h ( l ) , sumList ( t ( l ) ) ) 
Def parsed successfully: def int sumList ( list l ) := ; = ( l , [ ] ) ? @ ( 0 ) : + ( h ( l ) , sumList ( t ( l ) ) ) 
SigArgs parsed successfully: def int sumList ( list l ) := ; = ( l , [ ] ) ? @ ( 0 ) : + ( h ( l ) , sumList ( t ( l ) ) ) def int prodList ( list l 
Sig parsed successfully: def int sumList ( list l ) := ; = ( l , [ ] ) ? @ ( 0 ) : + ( h ( l ) , sumList ( t ( l ) ) ) def int prodList ( list l ) 
Arg parsed successfully: def int sumList ( list l ) := ; = ( l , [ ] ) ? @ ( 0 ) : + ( h ( l ) , sumList ( t ( l ) ) ) def int prodList ( list l ) := ; = ( l 
List parsed successfully: def int sumList ( list l ) := ; = ( l , [ ] ) ? @ ( 0 ) : + ( h ( l ) , sumList ( t ( l ) ) ) def int prodList ( list l ) := ; = ( l , [ ] 
Arg parsed successfully: def int sumList ( list l ) := ; = ( l , [ ] ) ? @ ( 0 ) : + ( h ( l ) , sumList ( t ( l ) ) ) def int prodList ( list l ) := ; = ( l , [ ] 
NativeBinary parsed successfully: def int sumList ( list l ) := ; = ( l , [ ] ) ? @ ( 0 ) : + ( h ( l ) , sumList ( t ( l ) ) ) def int prodList ( list l ) := ; = ( l , [ ] ) 
Arg parsed successfully: def int sumList ( list l ) := ; = ( l , [ ] ) ? @ ( 0 ) : + ( h ( l ) , sumList ( t ( l ) ) ) def int prodList ( list l ) := ; = ( l , [ ] ) ? @ ( 1 
NativeUnary parsed successfully: def int sumList ( list l ) := ; = ( l , [ ] ) ? @ ( 0 ) : + ( h ( l ) , sumList ( t ( l ) ) ) def int prodList ( list l ) := ; = ( l , [ ] ) ? @ ( 1 ) 
NativeListUnary parsed successfully: def int sumList ( list l ) := ; = ( l , [ ] ) ? @ ( 0 ) : + ( h ( l ) , sumList ( t ( l ) ) ) def int prodList ( list l ) := ; = ( l , [ ] ) ? @ ( 1 ) : * ( h ( l ) 
Arg parsed successfully: def int sumList ( list l ) := ; = ( l , [ ] ) ? @ ( 0 ) : + ( h ( l ) , sumList ( t ( l ) ) ) def int prodList ( list l ) := ; = ( l , [ ] ) ? @ ( 1 ) : * ( h ( l ) 
NativeListUnary parsed successfully: def int sumList ( list l ) := ; = ( l , [ ] ) ? @ ( 0 ) : + ( h ( l ) , sumList ( t ( l ) ) ) def int prodList ( list l ) := ; = ( l , [ ] ) ? @ ( 1 ) : * ( h ( l ) , prodList ( t ( l ) 
Arg parsed successfully: def int sumList ( list l ) := ; = ( l , [ ] ) ? @ ( 0 ) : + ( h ( l ) , sumList ( t ( l ) ) ) def int prodList ( list l ) := ; = ( l , [ ] ) ? @ ( 1 ) : * ( h ( l ) , prodList ( t ( l ) 
Args parsed successfully: def int sumList ( list l ) := ; = ( l , [ ] ) ? @ ( 0 ) : + ( h ( l ) , sumList ( t ( l ) ) ) def int prodList ( list l ) := ; = ( l , [ ] ) ? @ ( 1 ) : * ( h ( l ) , prodList ( t ( l ) 
ArgList parsed successfully: def int sumList ( list l ) := ; = ( l , [ ] ) ? @ ( 0 ) : + ( h ( l ) , sumList ( t ( l ) ) ) def int prodList ( list l ) := ; = ( l , [ ] ) ? @ ( 1 ) : * ( h ( l ) , prodList ( t ( l ) ) 
Arg parsed successfully: def int sumList ( list l ) := ; = ( l , [ ] ) ? @ ( 0 ) : + ( h ( l ) , sumList ( t ( l ) ) ) def int prodList ( list l ) := ; = ( l , [ ] ) ? @ ( 1 ) : * ( h ( l ) , prodList ( t ( l ) ) 
NativeBinary parsed successfully: def int sumList ( list l ) := ; = ( l , [ ] ) ? @ ( 0 ) : + ( h ( l ) , sumList ( t ( l ) ) ) def int prodList ( list l ) := ; = ( l , [ ] ) ? @ ( 1 ) : * ( h ( l ) , prodList ( t ( l ) ) ) 
Branch parsed successfully: def int sumList ( list l ) := ; = ( l , [ ] ) ? @ ( 0 ) : + ( h ( l ) , sumList ( t ( l ) ) ) def int prodList ( list l ) := ; = ( l , [ ] ) ? @ ( 1 ) : * ( h ( l ) , prodList ( t ( l ) ) ) 
Def parsed successfully: def int sumList ( list l ) := ; = ( l , [ ] ) ? @ ( 0 ) : + ( h ( l ) , sumList ( t ( l ) ) ) def int prodList ( list l ) := ; = ( l , [ ] ) ? @ ( 1 ) : * ( h ( l ) , prodList ( t ( l ) ) ) 
UserFunc parsed successfully: def int sumList ( list l ) := ; = ( l , [ ] ) ? @ ( 0 ) : + ( h ( l ) , sumList ( t ( l ) ) ) def int prodList ( list l ) := ; = ( l , [ ] ) ? @ ( 1 ) : * ( h ( l ) , prodList ( t ( l ) ) ) sumList 
Arg parsed successfully: def int sumList ( list l ) := ; = ( l , [ ] ) ? @ ( 0 ) : + ( h ( l ) , sumList ( t ( l ) ) ) def int prodList ( list l ) := ; = ( l , [ ] ) ? @ ( 1 ) : * ( h ( l ) , prodList ( t ( l ) ) ) sumList ( [ prodList ( [ 1 
Arg parsed successfully: def int sumList ( list l ) := ; = ( l , [ ] ) ? @ ( 0 ) : + ( h ( l ) , sumList ( t ( l ) ) ) def int prodList ( list l ) := ; = ( l , [ ] ) ? @ ( 1 ) : * ( h ( l ) , prodList ( t ( l ) ) ) sumList ( [ prodList ( [ 1 , 2 
ArgRest parsed successfully: def int sumList ( list l ) := ; = ( l , [ ] ) ? @ ( 0 ) : + ( h ( l ) , sumList ( t ( l ) ) ) def int prodList ( list l ) := ; = ( l , [ ] ) ? @ ( 1 ) : * ( h ( l ) , prodList ( t ( l ) ) ) sumList ( [ prodList ( [ 1 , 2 
Arg parsed successfully: def int sumList ( list l ) := ; = ( l , [ ] ) ? @ ( 0 ) : + ( h ( l ) , sumList ( t ( l ) ) ) def int prodList ( list l ) := ; = ( l , [ ] ) ? @ ( 1 ) : * ( h ( l ) , prodList ( t ( l ) ) ) sumList ( [ prodList ( [ 1 , 2 , 3 
ArgRest parsed successfully: def int sumList ( list l ) := ; = ( l , [ ] ) ? @ ( 0 ) : + ( h ( l ) , sumList ( t ( l ) ) ) def int prodList ( list l ) := ; = ( l , [ ] ) ? @ ( 1 ) : * ( h ( l ) , prodList ( t ( l ) ) ) sumList ( [ prodList ( [ 1 , 2 , 3 
Args parsed successfully: def int sumList ( list l ) := ; = ( l , [ ] ) ? @ ( 0 ) : + ( h ( l ) , sumList ( t ( l ) ) ) def int prodList ( list l ) := ; = ( l , [ ] ) ? @ ( 1 ) : * ( h ( l ) , prodList ( t ( l ) ) ) sumList ( [ prodList ( [ 1 , 2 , 3 
List parsed successfully: def int sumList ( list l ) := ; = ( l , [ ] ) ? @ ( 0 ) : + ( h ( l ) , sumList ( t ( l ) ) ) def int prodList ( list l ) := ; = ( l , [ ] ) ? @ ( 1 ) : * ( h ( l ) , prodList ( t ( l ) ) ) sumList ( [ prodList ( [ 1 , 2 , 3 ] 
Arg parsed successfully: def int sumList ( list l ) := ; = ( l , [ ] ) ? @ ( 0 ) : + ( h ( l ) , sumList ( t ( l ) ) ) def int prodList ( list l ) := ; = ( l , [ ] ) ? @ ( 1 ) : * ( h ( l ) , prodList ( t ( l ) ) ) sumList ( [ prodList ( [ 1 , 2 , 3 ] 
Args parsed successfully: def int sumList ( list l ) := ; = ( l , [ ] ) ? @ ( 0 ) : + ( h ( l ) , sumList ( t ( l ) ) ) def int prodList ( list l ) := ; = ( l , [ ] ) ? @ ( 1 ) : * ( h ( l ) , prodList ( t ( l ) ) ) sumList ( [ prodList ( [ 1 , 2 , 3 ] 
ArgList parsed successfully: def int sumList ( list l ) := ; = ( l , [ ] ) ? @ ( 0 ) : + ( h ( l ) , sumList ( t ( l ) ) ) def int prodList ( list l ) := ; = ( l , [ ] ) ? @ ( 1 ) : * ( h ( l ) , prodList ( t ( l ) ) ) sumList ( [ prodList ( [ 1 , 2 , 3 ] ) 
Arg parsed successfully: def int sumList ( list l ) := ; = ( l , [ ] ) ? @ ( 0 ) : + ( h ( l ) , sumList ( t ( l ) ) ) def int prodList ( list l ) := ; = ( l , [ ] ) ? @ ( 1 ) : * ( h ( l ) , prodList ( t ( l ) ) ) sumList ( [ prodList ( [ 1 , 2 , 3 ] ) 
Arg parsed successfully: def int sumList ( list l ) := ; = ( l , [ ] ) ? @ ( 0 ) : + ( h ( l ) , sumList ( t ( l ) ) ) def int prodList ( list l ) := ; = ( l , [ ] ) ? @ ( 1 ) : * ( h ( l ) , prodList ( t ( l ) ) ) sumList ( [ prodList ( [ 1 , 2 , 3 ] ) , prodList ( [ 5 
Arg parsed successfully: def int sumList ( list l ) := ; = ( l , [ ] ) ? @ ( 0 ) : + ( h ( l ) , sumList ( t ( l ) ) ) def int prodList ( list l ) := ; = ( l , [ ] ) ? @ ( 1 ) : * ( h ( l ) , prodList ( t ( l ) ) ) sumList ( [ prodList ( [ 1 , 2 , 3 ] ) , prodList ( [ 5 , 7 
ArgRest parsed successfully: def int sumList ( list l ) := ; = ( l , [ ] ) ? @ ( 0 ) : + ( h ( l ) , sumList ( t ( l ) ) ) def int prodList ( list l ) := ; = ( l , [ ] ) ? @ ( 1 ) : * ( h ( l ) , prodList ( t ( l ) ) ) sumList ( [ prodList ( [ 1 , 2 , 3 ] ) , prodList ( [ 5 , 7 
Arg parsed successfully: def int sumList ( list l ) := ; = ( l , [ ] ) ? @ ( 0 ) : + ( h ( l ) , sumList ( t ( l ) ) ) def int prodList ( list l ) := ; = ( l , [ ] ) ? @ ( 1 ) : * ( h ( l ) , prodList ( t ( l ) ) ) sumList ( [ prodList ( [ 1 , 2 , 3 ] ) , prodList ( [ 5 , 7 , 2 
ArgRest parsed successfully: def int sumList ( list l ) := ; = ( l , [ ] ) ? @ ( 0 ) : + ( h ( l ) , sumList ( t ( l ) ) ) def int prodList ( list l ) := ; = ( l , [ ] ) ? @ ( 1 ) : * ( h ( l ) , prodList ( t ( l ) ) ) sumList ( [ prodList ( [ 1 , 2 , 3 ] ) , prodList ( [ 5 , 7 , 2 
Args parsed successfully: def int sumList ( list l ) := ; = ( l , [ ] ) ? @ ( 0 ) : + ( h ( l ) , sumList ( t ( l ) ) ) def int prodList ( list l ) := ; = ( l , [ ] ) ? @ ( 1 ) : * ( h ( l ) , prodList ( t ( l ) ) ) sumList ( [ prodList ( [ 1 , 2 , 3 ] ) , prodList ( [ 5 , 7 , 2 
List parsed successfully: def int sumList ( list l ) := ; = ( l , [ ] ) ? @ ( 0 ) : + ( h ( l ) , sumList ( t ( l ) ) ) def int prodList ( list l ) := ; = ( l , [ ] ) ? @ ( 1 ) : * ( h ( l ) , prodList ( t ( l ) ) ) sumList ( [ prodList ( [ 1 , 2 , 3 ] ) , prodList ( [ 5 , 7 , 2 ] 
Arg parsed successfully: def int sumList ( list l ) := ; = ( l , [ ] ) ? @ ( 0 ) : + ( h ( l ) , sumList ( t ( l ) ) ) def int prodList ( list l ) := ; = ( l , [ ] ) ? @ ( 1 ) : * ( h ( l ) , prodList ( t ( l ) ) ) sumList ( [ prodList ( [ 1 , 2 , 3 ] ) , prodList ( [ 5 , 7 , 2 ] 
Args parsed successfully: def int sumList ( list l ) := ; = ( l , [ ] ) ? @ ( 0 ) : + ( h ( l ) , sumList ( t ( l ) ) ) def int prodList ( list l ) := ; = ( l , [ ] ) ? @ ( 1 ) : * ( h ( l ) , prodList ( t ( l ) ) ) sumList ( [ prodList ( [ 1 , 2 , 3 ] ) , prodList ( [ 5 , 7 , 2 ] 
ArgList parsed successfully: def int sumList ( list l ) := ; = ( l , [ ] ) ? @ ( 0 ) : + ( h ( l ) , sumList ( t ( l ) ) ) def int prodList ( list l ) := ; = ( l , [ ] ) ? @ ( 1 ) : * ( h ( l ) , prodList ( t ( l ) ) ) sumList ( [ prodList ( [ 1 , 2 , 3 ] ) , prodList ( [ 5 , 7 , 2 ] ) 
Arg parsed successfully: def int sumList ( list l ) := ; = ( l , [ ] ) ? @ ( 0 ) : + ( h ( l ) , sumList ( t ( l ) ) ) def int prodList ( list l ) := ; = ( l , [ ] ) ? @ ( 1 ) : * ( h ( l ) , prodList ( t ( l ) ) ) sumList ( [ prodList ( [ 1 , 2 , 3 ] ) , prodList ( [ 5 , 7 , 2 ] ) 
ArgRest parsed successfully: def int sumList ( list l ) := ; = ( l , [ ] ) ? @ ( 0 ) : + ( h ( l ) , sumList ( t ( l ) ) ) def int prodList ( list l ) := ; = ( l , [ ] ) ? @ ( 1 ) : * ( h ( l ) , prodList ( t ( l ) ) ) sumList ( [ prodList ( [ 1 , 2 , 3 ] ) , prodList ( [ 5 , 7 , 2 ] ) 
Arg parsed successfully: def int sumList ( list l ) := ; = ( l , [ ] ) ? @ ( 0 ) : + ( h ( l ) , sumList ( t ( l ) ) ) def int prodList ( list l ) := ; = ( l , [ ] ) ? @ ( 1 ) : * ( h ( l ) , prodList ( t ( l ) ) ) sumList ( [ prodList ( [ 1 , 2 , 3 ] ) , prodList ( [ 5 , 7 , 2 ] ) , prodList ( [ 0.0 
Arg parsed successfully: def int sumList ( list l ) := ; = ( l , [ ] ) ? @ ( 0 ) : + ( h ( l ) , sumList ( t ( l ) ) ) def int prodList ( list l ) := ; = ( l , [ ] ) ? @ ( 1 ) : * ( h ( l ) , prodList ( t ( l ) ) ) sumList ( [ prodList ( [ 1 , 2 , 3 ] ) , prodList ( [ 5 , 7 , 2 ] ) , prodList ( [ 0.0 , 127 
ArgRest parsed successfully: def int sumList ( list l ) := ; = ( l , [ ] ) ? @ ( 0 ) : + ( h ( l ) , sumList ( t ( l ) ) ) def int prodList ( list l ) := ; = ( l , [ ] ) ? @ ( 1 ) : * ( h ( l ) , prodList ( t ( l ) ) ) sumList ( [ prodList ( [ 1 , 2 , 3 ] ) , prodList ( [ 5 , 7 , 2 ] ) , prodList ( [ 0.0 , 127 
Arg parsed successfully: def int sumList ( list l ) := ; = ( l , [ ] ) ? @ ( 0 ) : + ( h ( l ) , sumList ( t ( l ) ) ) def int prodList ( list l ) := ; = ( l , [ ] ) ? @ ( 1 ) : * ( h ( l ) , prodList ( t ( l ) ) ) sumList ( [ prodList ( [ 1 , 2 , 3 ] ) , prodList ( [ 5 , 7 , 2 ] ) , prodList ( [ 0.0 , 127 , 9 
ArgRest parsed successfully: def int sumList ( list l ) := ; = ( l , [ ] ) ? @ ( 0 ) : + ( h ( l ) , sumList ( t ( l ) ) ) def int prodList ( list l ) := ; = ( l , [ ] ) ? @ ( 1 ) : * ( h ( l ) , prodList ( t ( l ) ) ) sumList ( [ prodList ( [ 1 , 2 , 3 ] ) , prodList ( [ 5 , 7 , 2 ] ) , prodList ( [ 0.0 , 127 , 9 
Args parsed successfully: def int sumList ( list l ) := ; = ( l , [ ] ) ? @ ( 0 ) : + ( h ( l ) , sumList ( t ( l ) ) ) def int prodList ( list l ) := ; = ( l , [ ] ) ? @ ( 1 ) : * ( h ( l ) , prodList ( t ( l ) ) ) sumList ( [ prodList ( [ 1 , 2 , 3 ] ) , prodList ( [ 5 , 7 , 2 ] ) , prodList ( [ 0.0 , 127 , 9 
List parsed successfully: def int sumList ( list l ) := ; = ( l , [ ] ) ? @ ( 0 ) : + ( h ( l ) , sumList ( t ( l ) ) ) def int prodList ( list l ) := ; = ( l , [ ] ) ? @ ( 1 ) : * ( h ( l ) , prodList ( t ( l ) ) ) sumList ( [ prodList ( [ 1 , 2 , 3 ] ) , prodList ( [ 5 , 7 , 2 ] ) , prodList ( [ 0.0 , 127 , 9 ] 
Arg parsed successfully: def int sumList ( list l ) := ; = ( l , [ ] ) ? @ ( 0 ) : + ( h ( l ) , sumList ( t ( l ) ) ) def int prodList ( list l ) := ; = ( l , [ ] ) ? @ ( 1 ) : * ( h ( l ) , prodList ( t ( l ) ) ) sumList ( [ prodList ( [ 1 , 2 , 3 ] ) , prodList ( [ 5 , 7 , 2 ] ) , prodList ( [ 0.0 , 127 , 9 ] 
Args parsed successfully: def int sumList ( list l ) := ; = ( l , [ ] ) ? @ ( 0 ) : + ( h ( l ) , sumList ( t ( l ) ) ) def int prodList ( list l ) := ; = ( l , [ ] ) ? @ ( 1 ) : * ( h ( l ) , prodList ( t ( l ) ) ) sumList ( [ prodList ( [ 1 , 2 , 3 ] ) , prodList ( [ 5 , 7 , 2 ] ) , prodList ( [ 0.0 , 127 , 9 ] 
ArgList parsed successfully: def int sumList ( list l ) := ; = ( l , [ ] ) ? @ ( 0 ) : + ( h ( l ) , sumList ( t ( l ) ) ) def int prodList ( list l ) := ; = ( l , [ ] ) ? @ ( 1 ) : * ( h ( l ) , prodList ( t ( l ) ) ) sumList ( [ prodList ( [ 1 , 2 , 3 ] ) , prodList ( [ 5 , 7 , 2 ] ) , prodList ( [ 0.0 , 127 , 9 ] ) 
Arg parsed successfully: def int sumList ( list l ) := ; = ( l , [ ] ) ? @ ( 0 ) : + ( h ( l ) , sumList ( t ( l ) ) ) def int prodList ( list l ) := ; = ( l , [ ] ) ? @ ( 1 ) : * ( h ( l ) , prodList ( t ( l ) ) ) sumList ( [ prodList ( [ 1 , 2 , 3 ] ) , prodList ( [ 5 , 7 , 2 ] ) , prodList ( [ 0.0 , 127 , 9 ] ) 
ArgRest parsed successfully: def int sumList ( list l ) := ; = ( l , [ ] ) ? @ ( 0 ) : + ( h ( l ) , sumList ( t ( l ) ) ) def int prodList ( list l ) := ; = ( l , [ ] ) ? @ ( 1 ) : * ( h ( l ) , prodList ( t ( l ) ) ) sumList ( [ prodList ( [ 1 , 2 , 3 ] ) , prodList ( [ 5 , 7 , 2 ] ) , prodList ( [ 0.0 , 127 , 9 ] ) 
Args parsed successfully: def int sumList ( list l ) := ; = ( l , [ ] ) ? @ ( 0 ) : + ( h ( l ) , sumList ( t ( l ) ) ) def int prodList ( list l ) := ; = ( l , [ ] ) ? @ ( 1 ) : * ( h ( l ) , prodList ( t ( l ) ) ) sumList ( [ prodList ( [ 1 , 2 , 3 ] ) , prodList ( [ 5 , 7 , 2 ] ) , prodList ( [ 0.0 , 127 , 9 ] ) 
List parsed successfully: def int sumList ( list l ) := ; = ( l , [ ] ) ? @ ( 0 ) : + ( h ( l ) , sumList ( t ( l ) ) ) def int prodList ( list l ) := ; = ( l , [ ] ) ? @ ( 1 ) : * ( h ( l ) , prodList ( t ( l ) ) ) sumList ( [ prodList ( [ 1 , 2 , 3 ] ) , prodList ( [ 5 , 7 , 2 ] ) , prodList ( [ 0.0 , 127 , 9 ] ) ] 
Arg parsed successfully: def int sumList ( list l ) := ; = ( l , [ ] ) ? @ ( 0 ) : + ( h ( l ) , sumList ( t ( l ) ) ) def int prodList ( list l ) := ; = ( l , [ ] ) ? @ ( 1 ) : * ( h ( l ) , prodList ( t ( l ) ) ) sumList ( [ prodList ( [ 1 , 2 , 3 ] ) , prodList ( [ 5 , 7 , 2 ] ) , prodList ( [ 0.0 , 127 , 9 ] ) ] 
Args parsed successfully: def int sumList ( list l ) := ; = ( l , [ ] ) ? @ ( 0 ) : + ( h ( l ) , sumList ( t ( l ) ) ) def int prodList ( list l ) := ; = ( l , [ ] ) ? @ ( 1 ) : * ( h ( l ) , prodList ( t ( l ) ) ) sumList ( [ prodList ( [ 1 , 2 , 3 ] ) , prodList ( [ 5 , 7 , 2 ] ) , prodList ( [ 0.0 , 127 , 9 ] ) ] 
ArgList parsed successfully: def int sumList ( list l ) := ; = ( l , [ ] ) ? @ ( 0 ) : + ( h ( l ) , sumList ( t ( l ) ) ) def int prodList ( list l ) := ; = ( l , [ ] ) ? @ ( 1 ) : * ( h ( l ) , prodList ( t ( l ) ) ) sumList ( [ prodList ( [ 1 , 2 , 3 ] ) , prodList ( [ 5 , 7 , 2 ] ) , prodList ( [ 0.0 , 127 , 9 ] ) ] ) 
Program parsed successfully: def int sumList ( list l ) := ; = ( l , [ ] ) ? @ ( 0 ) : + ( h ( l ) , sumList ( t ( l ) ) ) def int prodList ( list l ) := ; = ( l , [ ] ) ? @ ( 1 ) : * ( h ( l ) , prodList ( t ( l ) ) ) sumList ( [ prodList ( [ 1 , 2 , 3 ] ) , prodList ( [ 5 , 7 , 2 ] ) , prodList ( [ 0.0 , 127 , 9 ] ) ] ) 

SigArgs parsed successfully: list Sig parsed successfully: ( list ) NativeBinOp parsed successfully: = Arg parsed successfully: list List parsed successfully: [ ] Arg parsed successfully: [ ] Function parsed successfully: = ( list , [ ] ) NativeUnaryOp parsed successfully: @ Arg parsed successfully: 0 Function parsed successfully: @ ( 0 ) NativeBinOp parsed successfully: + NativeUnaryOp parsed successfully: h Arg parsed successfully: list Function parsed successfully: h ( list ) Arg parsed successfully: h ( list ) NativeUnaryOp parsed successfully: t Arg parsed successfully: list Function parsed successfully: t ( list ) Arg parsed successfully: t ( list ) Args parsed successfully: t ( list ) ArgList parsed successfully: ( t ( list ) ) Arg parsed successfully: sumList ( t ( list ) ) Function parsed successfully: + ( h ( list ) , sumList ( t ( list ) ) ) Branch parsed successfully: ; = ( list , [ ] ) ? @ ( 0 ) : + ( h ( list ) , sumList ( t ( list ) ) ) Function parsed successfully: ; = ( list , [ ] ) ? @ ( 0 ) : + ( h ( list ) , sumList ( t ( list ) ) ) Def parsed successfully: def sumList ( list ) := ; = ( list , [ ] ) ? @ ( 0 ) : + ( h ( list ) , sumList ( t ( list ) ) ) SigArgs parsed successfully: list Sig parsed successfully: ( list ) NativeBinOp parsed successfully: = Arg parsed successfully: list List parsed successfully: [ ] Arg parsed successfully: [ ] Function parsed successfully: = ( list , [ ] ) NativeUnaryOp parsed successfully: @ Arg parsed successfully: 1 Function parsed successfully: @ ( 1 ) NativeBinOp parsed successfully: * NativeUnaryOp parsed successfully: h Arg parsed successfully: list Function parsed successfully: h ( list ) Arg parsed successfully: h ( list ) NativeUnaryOp parsed successfully: t Arg parsed successfully: list Function parsed successfully: t ( list ) Arg parsed successfully: t ( list ) Args parsed successfully: t ( list ) ArgList parsed successfully: ( t ( list ) ) Arg parsed successfully: prodList ( t ( list ) ) Function parsed successfully: * ( h ( list ) , prodList ( t ( list ) ) ) Branch parsed successfully: ; = ( list , [ ] ) ? @ ( 1 ) : * ( h ( list ) , prodList ( t ( list ) ) ) Function parsed successfully: ; = ( list , [ ] ) ? @ ( 1 ) : * ( h ( list ) , prodList ( t ( list ) ) ) Def parsed successfully: def prodList ( list ) := ; = ( list , [ ] ) ? @ ( 1 ) : * ( h ( list ) , prodList ( t ( list ) ) ) UserFunc parsed successfully: sumList Function parsed successfully: sumList Program parsed successfully: def sumList ( list ) := ; = ( list , [ ] ) ? @ ( 0 ) : + ( h ( list ) , sumList ( t ( list ) ) ) def prodList ( list ) := ; = ( list , [ ] ) ? @ ( 1 ) : * ( h ( list ) , prodList ( t ( list ) ) ) sumList 
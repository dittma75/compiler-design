Foldl parsed successfully: { 
SigArgRest parsed successfully: { ( \ ( ( a , b 
SigArgs parsed successfully: { ( \ ( ( a , b 
Sig parsed successfully: { ( \ ( ( a , b ) 
Arg parsed successfully: { ( \ ( ( a , b ) -> / ( - ( a 
Arg parsed successfully: { ( \ ( ( a , b ) -> / ( - ( a , b 
NativeBinary parsed successfully: { ( \ ( ( a , b ) -> / ( - ( a , b ) 
Arg parsed successfully: { ( \ ( ( a , b ) -> / ( - ( a , b ) 
Arg parsed successfully: { ( \ ( ( a , b ) -> / ( - ( a , b ) , 2 
NativeBinary parsed successfully: { ( \ ( ( a , b ) -> / ( - ( a , b ) , 2 ) 
Lambda parsed successfully: { ( \ ( ( a , b ) -> / ( - ( a , b ) , 2 ) ) 
Arg parsed successfully: { ( \ ( ( a , b ) -> / ( - ( a , b ) , 2 ) ) , . ( ~ , [ 1 
Arg parsed successfully: { ( \ ( ( a , b ) -> / ( - ( a , b ) , 2 ) ) , . ( ~ , [ 1 , 2 
ArgRest parsed successfully: { ( \ ( ( a , b ) -> / ( - ( a , b ) , 2 ) ) , . ( ~ , [ 1 , 2 
Arg parsed successfully: { ( \ ( ( a , b ) -> / ( - ( a , b ) , 2 ) ) , . ( ~ , [ 1 , 2 , ~ ( 3 
NativeUnary parsed successfully: { ( \ ( ( a , b ) -> / ( - ( a , b ) , 2 ) ) , . ( ~ , [ 1 , 2 , ~ ( 3 ) 
Arg parsed successfully: { ( \ ( ( a , b ) -> / ( - ( a , b ) , 2 ) ) , . ( ~ , [ 1 , 2 , ~ ( 3 ) 
ArgRest parsed successfully: { ( \ ( ( a , b ) -> / ( - ( a , b ) , 2 ) ) , . ( ~ , [ 1 , 2 , ~ ( 3 ) 
Arg parsed successfully: { ( \ ( ( a , b ) -> / ( - ( a , b ) , 2 ) ) , . ( ~ , [ 1 , 2 , ~ ( 3 ) , 5 
ArgRest parsed successfully: { ( \ ( ( a , b ) -> / ( - ( a , b ) , 2 ) ) , . ( ~ , [ 1 , 2 , ~ ( 3 ) , 5 
Args parsed successfully: { ( \ ( ( a , b ) -> / ( - ( a , b ) , 2 ) ) , . ( ~ , [ 1 , 2 , ~ ( 3 ) , 5 
List parsed successfully: { ( \ ( ( a , b ) -> / ( - ( a , b ) , 2 ) ) , . ( ~ , [ 1 , 2 , ~ ( 3 ) , 5 ] 
Map parsed successfully: { ( \ ( ( a , b ) -> / ( - ( a , b ) , 2 ) ) , . ( ~ , [ 1 , 2 , ~ ( 3 ) , 5 ] ) 
FoldBody parsed successfully: { ( \ ( ( a , b ) -> / ( - ( a , b ) , 2 ) ) , . ( ~ , [ 1 , 2 , ~ ( 3 ) , 5 ] ) ) 
Program parsed successfully: { ( \ ( ( a , b ) -> / ( - ( a , b ) , 2 ) ) , . ( ~ , [ 1 , 2 , ~ ( 3 ) , 5 ] ) ) 

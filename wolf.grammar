// Lexer for WOL(F) - Write-Only Language (Functional)
Package wolf;

Helpers
letter = ['a'..'z'] | ['A'..'Z'];
digit = ['0'..'9'];
// one or more digits
digits = digit+;
exp = ['e'+'E'] ['+'+'-']? digits;
newline = [10 + 13];
single_quote = ''';
back_tick = '`';
underscore = '_';

Tokens
// list operators
head = 'h';
tail = 't';
reverse = 'r';
append = '$';
prepend = '^';
foldl = '{';
foldr = '}';
map = '.';
lambda = '\';

print = 'print';

true = 'T';
false = 'F';

def = 'def' | '?';
return = 'return' | '@';

comment = back_tick [[0..0xffff] - back_tick]* back_tick;
space = ' ' | 9 | newline;

assign = ':=';

// relational operators
equal = '=';
lt = '<';
gt = '>';
not_equal = '!=';
lte = '<=';
gte = '>=';
and = '&';
or = '|';
xor = 'x';
logical_not  = '!';

// arithmetic operators
plus = '+';
minus = '-';
mult = '*';
div = '/';
mod = '%';
neg = '~';

// delimiter characters
l_paren = '(';
r_paren = ')';
start_list = '[';
end_list = ']';
comma = ',';
colon = ':';
semi = ';';

// constants
string = single_quote [[[0..0xffff] - single_quote] - newline]* single_quote;
identifier = (letter|underscore)+;
int_number = digits;
float_number = (digits '.'? digits? | '.' digits)exp?;

misc = [0..0xffff]; // catch all for any garbage.

Ignored Tokens
comment, space;
Program = Def* Func

// Signatures (Sig) differ from Arguments (Args) in that
// they only allow ids, not expressions or constants.
Def = def id Sig := Func
Sig = ()
    = SigArgs
SigArgs = id SigArgRest*
SigArgRest = , id

Func = FuncName ArgList

FuncName = id       // user-defined function
         = Branch   // branching and recursive structure
         = h        // head - get the first element of a list
         = t        // tail - get a list excluding first element of the list
         = r        // reverse - reverse the input list and return it
         = ^        // prepend - add an element to the beginning of the list
         = $        // append - add an element to the end of the list
         = .        // map - apply function to list elements to make new list
         = #        // length - get size of list
         = {        // foldl - apply binary op to list elements left associative
         = }        // foldr - apply binary op to list elements right associative
         = _        // flatten - turn a list with nested lists into one flat list
         = @        // identity - return the argument provided
         = print    // print - print the argument to stdout and return the argument
         = \        // anonymous function
         = op       // operators like +, ~, >=, =, !, |, and x

ArgList = ()
        = (Args)        
Args = Arg ArgRest*
ArgRest = , Arg

Arg = Func
    = List
    = float_literal
    = string_literal
    = int_literal
    = id

// Ternary if/else condition
Branch = If : Else
If = BoolExpr ? Func
Else = Func

List = [ Args ]
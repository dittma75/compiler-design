// Kevin Dittmar
// William Ezekiel
// Joe Alacqua

Program = Def* Func

// Signatures (Sig) differ from Arguments (Args) in that
// they only allow ids, not expressions or constants.
Def = def id Sig := Func
Sig = ()
    = (SigArgs)
SigArgs = id SigArgRest*
SigArgRest = , id

Func = FuncName ArgList
     = Branch
     
FuncName = id       // user-defined function identifier
         = h        // head - get the first element of a list
         = t        // tail - get a list excluding first element of the list
         = r        // reverse - reverse the input list and return it
         = ^        // prepend - add an element to the start of the given list
         = $        // append - add an element to the end of the given list
         = .        // map - apply unary op to list elements to make new list
         = #        // length - get size of list
         = {        // foldl - apply binary op to list left associatively
         = }        // foldr - apply binary op to list right associatively
         = _        // flatten - turn list with nested lists into a flat list
         = @        // identity - return the argument provided
         = print    // print - print the argument to stdout and return it
         = \        // anonymous function
         = ~        // unary operator for arithmetic negation; Ex: ~(5) = -5
         = !        // unary operator for logical negation
         = op       // binary operators like +, >=, =, |, and x

ArgList = ()
        = (Args)        
Args = Arg ArgRest*
ArgRest = , Arg

Arg = Func
    = List
    = float_literal
    = string_literal
    = int_literal
    = id

// Ternary if/else condition
Branch = ; If : Else
If = BoolExpr ? Func
Else = Func

List = [ Args ]

// Branches and recursion
Branch = Base ";" Rec
Base = BoolExpr ":" Func
Rec = Func

// Function stuff
Func = (id ArgList) // user-defined function
        |Branch     // branching and recursive structure
        |Head       // get the first element of a list
        |Tail       // get a list excluding the first element of the list
        |Reverse    // reverse the input list and return it
        |Prepend    // add an element to the beginning of the list
        |Append     // add an element to the end of the list
        |Map        // apply function to elements of list and return new list
        |Length     // return size of list
        |Foldl      // apply binary op to list elements left associative
        |Foldr      // apply binary op to list elements right associative
        |Flatten    // turn a list with nested lists into one flat list
        |Identity   // return the argument provided
        |Print      // print the argument to stdout and return the argument

// Signatures (Sig) differ from Arguments (Args) in that
// they only allow ids, not expressions or constants.
Def = ("def" | "?") id Sig ":=" Func
Sig = "(" SigArgs ")"
SigArgs = (id SigArgEnd)?
SigArgEnd = ("," id)*

ArgList = "(" Args ")"
Args = (Arg ArgEnd)?
ArgEnd = ("," Arg)*
Arg = Func
        |List
        |ArithExpr
        |BoolExpr
        |float
        |string
        |int
        |id

// ArithExpr stuff
ArithExpr = Add
          |Sub
          |Mul
          |Div
          |Mod
          |Neg

Add = "+" ArgList
Sub = "-" ArgList
Mul = "*" ArgList
Div = "/" ArgList
Mod = "%" ArgList
Neg = "~" ArgList

// BoolExpr stuff
BoolExpr = Relational | Logic

// Relational operators
Relational = LessThan
        |GreaterThan
        |Equals
        |NotEquals
        |LessThanEquals
        |GreaterThanEquals
        
LessThan = "<" ArgList
GreaterThan = ">" ArgList
Equals = "=" ArgList
NotEquals = "!=" ArgList
LessThanEquals = "<=" ArgList
GreaterThanEquals = ">=" ArgList

// Logical operators
Logic =  And
        |Or
        |Not
        |Xor  
        
And = "&" ArgList
Or = "|" ArgList
Not = "!" ArgList
Xor = "x" ArgList

// List helpers
List = "[" Args "]"
FoldBody = "(" (id | Lambda | BinaryOperator) "," (List | id) ")"

// List functions that return an atomic value
Head = "h(" (List | id) ")"
Length = "#(" (List | id) ")"
Foldl = "{" FoldBody
Foldr = "}" FoldBody

// List functions that return a list
Tail = "t(" (List | id) ")"
Append = "$(" Arg "," (List | id) ")"
Prepend = "^(" Arg "," (List | id) ")"
Map = ".(" (id | Lambda | UnaryOperator) "," (List | id) ")"
Flatten = "_(" (List | id) ")"

// Unary Operators
UnaryOperator = "!"
                 |"~"
                 |"h"
                 |"t"
                 |"r"
                 |"#"
                 |"@"
                 |"_"

// Binary Operators
Binary Operators = "+"
                    |"-"
                    |"*"
                    |"/"
                    |"%"
                    |"&"
                    |"|"
                    |"x"

// Other stuff
Print = "print(" Arg ")"
Identity = "@(" Arg ")"
Lambda = "\(" Sig "->" Func ")"
Program = Def* Func
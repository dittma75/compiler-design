// Primitive Recursion
Pr -> <Base>, ";", <Rec>
Base -> <BoolExpr>, ":", <Func>
Rec -> <Func>

// Function stuff
Func -> <Pr>|<Id>, <Call>|<Head>|<Tail>|<Prepend>|<Append>
Def -> <Id>, <Sig>, "=", <Func>
Sig -> "(", [{<Id>}], ")"
Call -> "(", <Args>, ")"
Args -> "ε"|<Arg>, <ArgEnd>
ArgEnd -> {",", <Arg>}
Arg -> <Func>|<Id>|<List>|<Const>|<OpExpr>

// OpExpr stuff
OpExpr -> Add|Sub|Mul|Div|Mod|Neg
Add -> "+", <Call>
Sub -> "-", <Call>
Mul -> "*", <Call>
Div -> "/", <Call>
Mod -> "%", <Call>
Neg -> "~", <Call>

// BoolExpr stuff
BoolExpr -> Comp|And|Or|Not
Comp -> LessThan | GreaterThan | Equals | NotEquals | LessThanEquals | GreaterThanEquals
LessThan -> "<", <Call>
GreaterThan -> ">", <Call>
Equals -> "=", <Call>
NotEquals -> "!=", <Call>
LessThanEquals -> "<=", <Call>
GreaterThanEquals -> ">=", <Call>
And -> "&", <Call>
Or -> "|", <Call>
Not -> "!", <Call>



// List stuff
List -> "[", <Args> "]"
Head -> "h", <List>
Tail -> "t", <List>
Append -> "$(", <Args>, ",", <List>, ")"
Prepend -> "^(", <Args>, ",", <List>, ")"

// Const stuff
Id -> {"_" | "a" | "b" | "c" | ... | "z" | "A" | "B" | "C" | ... | "Z"}
Const -> "T"|"F"|<Number>|<String>
String -> "'", {<Chars>}, "'"
Chars -> any letter or digit
Number -> {<Digit>}, [".", <Digit>], ["e"|"E, +|-|"ε", {<Digit>}]
Digit -> "0"|"1"|"2"|...|"9"

// Other stuff
Print -> "print(", <Func>, ")"
Prog -> [{<Def>}], <Func>

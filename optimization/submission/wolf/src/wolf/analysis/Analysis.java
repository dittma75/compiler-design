/* This file was generated by SableCC (http://www.sablecc.org/). */

package wolf.analysis;

import wolf.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object o);
    Object getOut(Node node);
    void setOut(Node node, Object o);

    void caseTStringStart(TStringStart node);
    void caseTStringEscape(TStringEscape node);
    void caseTEscapeAlarm(TEscapeAlarm node);
    void caseTEscapeBackspace(TEscapeBackspace node);
    void caseTEscapeFormfeed(TEscapeFormfeed node);
    void caseTEscapeCarriageReturn(TEscapeCarriageReturn node);
    void caseTEscapeNewline(TEscapeNewline node);
    void caseTEscapeTab(TEscapeTab node);
    void caseTEscapeVerticalTab(TEscapeVerticalTab node);
    void caseTEscapeBackslash(TEscapeBackslash node);
    void caseTEscapeSingleQuote(TEscapeSingleQuote node);
    void caseTEscapeDoubleQuote(TEscapeDoubleQuote node);
    void caseTEscapeQuestionMark(TEscapeQuestionMark node);
    void caseTEscapeOctalChar(TEscapeOctalChar node);
    void caseTEscapeHexChar(TEscapeHexChar node);
    void caseTEscapeUnicodeChar(TEscapeUnicodeChar node);
    void caseTEscapeDefault(TEscapeDefault node);
    void caseTStringBody(TStringBody node);
    void caseTStringEnd(TStringEnd node);
    void caseTInputStart(TInputStart node);
    void caseTInputInt(TInputInt node);
    void caseTInputFloat(TInputFloat node);
    void caseTInputString(TInputString node);
    void caseTInputArgNumber(TInputArgNumber node);
    void caseTInputEnd(TInputEnd node);
    void caseTIntType(TIntType node);
    void caseTFloatType(TFloatType node);
    void caseTListType(TListType node);
    void caseTStringType(TStringType node);
    void caseTHead(THead node);
    void caseTTail(TTail node);
    void caseTReverse(TReverse node);
    void caseTAppend(TAppend node);
    void caseTPrepend(TPrepend node);
    void caseTFoldl(TFoldl node);
    void caseTFoldr(TFoldr node);
    void caseTMap(TMap node);
    void caseTLast(TLast node);
    void caseTLength(TLength node);
    void caseTLambdaStart(TLambdaStart node);
    void caseTLambdaArrow(TLambdaArrow node);
    void caseTIdentity(TIdentity node);
    void caseTPrint(TPrint node);
    void caseTDef(TDef node);
    void caseTComment(TComment node);
    void caseTSpace(TSpace node);
    void caseTNewline(TNewline node);
    void caseTAssign(TAssign node);
    void caseTEqual(TEqual node);
    void caseTLt(TLt node);
    void caseTGt(TGt node);
    void caseTNotEqual(TNotEqual node);
    void caseTLte(TLte node);
    void caseTGte(TGte node);
    void caseTAnd(TAnd node);
    void caseTOr(TOr node);
    void caseTXor(TXor node);
    void caseTLogicalNot(TLogicalNot node);
    void caseTPlus(TPlus node);
    void caseTMinus(TMinus node);
    void caseTMult(TMult node);
    void caseTDiv(TDiv node);
    void caseTMod(TMod node);
    void caseTNeg(TNeg node);
    void caseTLParen(TLParen node);
    void caseTRParen(TRParen node);
    void caseTStartList(TStartList node);
    void caseTEndList(TEndList node);
    void caseTComma(TComma node);
    void caseTTernarySemi(TTernarySemi node);
    void caseTTernaryQuestionMark(TTernaryQuestionMark node);
    void caseTTernaryColon(TTernaryColon node);
    void caseTIdentifier(TIdentifier node);
    void caseTIntNumber(TIntNumber node);
    void caseTFloatNumber(TFloatNumber node);
    void caseTMisc(TMisc node);
    void caseEOF(EOF node);
    void caseInvalidToken(InvalidToken node);
}

William Ezekiel
Kevin Dittmar
Joseph Alacqua

Program 9 Description

All optimizations are done through the Equal, Optimizer, and IdentifierUsage
classes. Optimizer and IdentifierUsage implement the Visitor pattern, but
the visitor pattern proved useless to the Equal class since all of the equality
checks could be done through the visit(obj1,obj2) method.

The Optimizer is used in the Parser class. The program is continuously
optimizes the program until the Program abstract syntax tree is unchanged after
optimization.

WOL(F) received the following optimizations:
Format: Optimization Definition {WOL(F) Example (Arithmetic Only)}
  - Comments are removed from optimized programs

  - Arithmetic Optimizations
    - 0 + a or a + 0 = a  {+(0,a) -> a}
    - a - a = 0  {-(a,a) -> @(0)}
    - a * 0 or 0 * a = 0 {*(0,a) -> @(0)}
    - 0/a = 0 {/(0,a) -> @(0)}
    - 1*a or a*1 = a {*(10,1) -> @(10)}
    - a/a = 1 {/(a,a) -> @(1)}
    - a/1 = a {/(+(2,3),1) -> +(2,3)}
    - a%1 or a%a or 0%a = 0 -> {%(a,1) -> @(0)}

  - Boolean Optimizations
    - Less Than & Greater Than - if both sides are same, return @(0) (false)
    - Less Than Equal & Greater Than Equal - if both sides are same, return
        @(1) (a value for true)
    - AND, OR, XOR (t = true, f = false)
      - AND
        - t && t = @(1) (true)
        - f && a  or a && f or f && f = @(0) (false)
      - OR
        - f && f = @(0) (false)
        - t && a  or a && t or t && t = @(1) (a value for true)
      - XOR
        - 1 xor a or a xor 1 = !a
        - 0 xor a or a xor 0  = a
      - EQUAL - if left and right are same, turn into @(1)
      - NOT EQUAL - if left and right are same, turn into @(0)

  - Double Negation/Identity Optimizations
    - !!a -> a (Logical)
    - !(!(!(a))) -> !(a)
    - ~(~(a)) -> @(a) (Numeric)
    - ~(~(~(a))) -> ~(a)
    - @(@(a)) -> @(a)

  - Branch Optimizations
    - If the branch condition always evaluates to true, return the true part.
    - If the branch condition always evaluates to false, return the false part.
    - If the true and false part are equal, return the true part.

  - Unused Definition Optimizations
    - Remove unused definitions from the file

SigArgs parsed successfully: def int myNumber ( int num 
Sig parsed successfully: def int myNumber ( int num ) 
Arg parsed successfully: def int myNumber ( int num ) := ; = ( 0 
Arg parsed successfully: def int myNumber ( int num ) := ; = ( 0 , 0 
NativeBinary parsed successfully: def int myNumber ( int num ) := ; = ( 0 , 0 ) 
Arg parsed successfully: def int myNumber ( int num ) := ; = ( 0 , 0 ) ? @ ( num 
NativeUnary parsed successfully: def int myNumber ( int num ) := ; = ( 0 , 0 ) ? @ ( num ) 
Arg parsed successfully: def int myNumber ( int num ) := ; = ( 0 , 0 ) ? @ ( num ) : ~ ( num 
NativeUnary parsed successfully: def int myNumber ( int num ) := ; = ( 0 , 0 ) ? @ ( num ) : ~ ( num ) 
Branch parsed successfully: def int myNumber ( int num ) := ; = ( 0 , 0 ) ? @ ( num ) : ~ ( num ) 
Def parsed successfully: def int myNumber ( int num ) := ; = ( 0 , 0 ) ? @ ( num ) : ~ ( num ) 
SigArgs parsed successfully: def int myNumber ( int num ) := ; = ( 0 , 0 ) ? @ ( num ) : ~ ( num ) def int myNegativeNumber ( int num 
Sig parsed successfully: def int myNumber ( int num ) := ; = ( 0 , 0 ) ? @ ( num ) : ~ ( num ) def int myNegativeNumber ( int num ) 
Arg parsed successfully: def int myNumber ( int num ) := ; = ( 0 , 0 ) ? @ ( num ) : ~ ( num ) def int myNegativeNumber ( int num ) := ; = ( 0 
Arg parsed successfully: def int myNumber ( int num ) := ; = ( 0 , 0 ) ? @ ( num ) : ~ ( num ) def int myNegativeNumber ( int num ) := ; = ( 0 , 1 
NativeBinary parsed successfully: def int myNumber ( int num ) := ; = ( 0 , 0 ) ? @ ( num ) : ~ ( num ) def int myNegativeNumber ( int num ) := ; = ( 0 , 1 ) 
Arg parsed successfully: def int myNumber ( int num ) := ; = ( 0 , 0 ) ? @ ( num ) : ~ ( num ) def int myNegativeNumber ( int num ) := ; = ( 0 , 1 ) ? @ ( num 
NativeUnary parsed successfully: def int myNumber ( int num ) := ; = ( 0 , 0 ) ? @ ( num ) : ~ ( num ) def int myNegativeNumber ( int num ) := ; = ( 0 , 1 ) ? @ ( num ) 
Arg parsed successfully: def int myNumber ( int num ) := ; = ( 0 , 0 ) ? @ ( num ) : ~ ( num ) def int myNegativeNumber ( int num ) := ; = ( 0 , 1 ) ? @ ( num ) : ~ ( num 
NativeUnary parsed successfully: def int myNumber ( int num ) := ; = ( 0 , 0 ) ? @ ( num ) : ~ ( num ) def int myNegativeNumber ( int num ) := ; = ( 0 , 1 ) ? @ ( num ) : ~ ( num ) 
Branch parsed successfully: def int myNumber ( int num ) := ; = ( 0 , 0 ) ? @ ( num ) : ~ ( num ) def int myNegativeNumber ( int num ) := ; = ( 0 , 1 ) ? @ ( num ) : ~ ( num ) 
Def parsed successfully: def int myNumber ( int num ) := ; = ( 0 , 0 ) ? @ ( num ) : ~ ( num ) def int myNegativeNumber ( int num ) := ; = ( 0 , 1 ) ? @ ( num ) : ~ ( num ) 
UserFunc parsed successfully: def int myNumber ( int num ) := ; = ( 0 , 0 ) ? @ ( num ) : ~ ( num ) def int myNegativeNumber ( int num ) := ; = ( 0 , 1 ) ? @ ( num ) : ~ ( num ) myNumber 
Arg parsed successfully: def int myNumber ( int num ) := ; = ( 0 , 0 ) ? @ ( num ) : ~ ( num ) def int myNegativeNumber ( int num ) := ; = ( 0 , 1 ) ? @ ( num ) : ~ ( num ) myNumber ( 2 
Args parsed successfully: def int myNumber ( int num ) := ; = ( 0 , 0 ) ? @ ( num ) : ~ ( num ) def int myNegativeNumber ( int num ) := ; = ( 0 , 1 ) ? @ ( num ) : ~ ( num ) myNumber ( 2 
ArgList parsed successfully: def int myNumber ( int num ) := ; = ( 0 , 0 ) ? @ ( num ) : ~ ( num ) def int myNegativeNumber ( int num ) := ; = ( 0 , 1 ) ? @ ( num ) : ~ ( num ) myNumber ( 2 ) 
Program parsed successfully: def int myNumber ( int num ) := ; = ( 0 , 0 ) ? @ ( num ) : ~ ( num ) def int myNegativeNumber ( int num ) := ; = ( 0 , 1 ) ? @ ( num ) : ~ ( num ) myNumber ( 2 ) 

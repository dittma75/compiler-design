SigArgs parsed successfully: def int absValue ( int num 
Sig parsed successfully: def int absValue ( int num ) 
Arg parsed successfully: def int absValue ( int num ) := ; ! ( ! ( < ( num 
Arg parsed successfully: def int absValue ( int num ) := ; ! ( ! ( < ( num , 0 
NativeBinary parsed successfully: def int absValue ( int num ) := ; ! ( ! ( < ( num , 0 ) 
Arg parsed successfully: def int absValue ( int num ) := ; ! ( ! ( < ( num , 0 ) 
NativeUnary parsed successfully: def int absValue ( int num ) := ; ! ( ! ( < ( num , 0 ) ) 
Arg parsed successfully: def int absValue ( int num ) := ; ! ( ! ( < ( num , 0 ) ) 
NativeUnary parsed successfully: def int absValue ( int num ) := ; ! ( ! ( < ( num , 0 ) ) ) 
Arg parsed successfully: def int absValue ( int num ) := ; ! ( ! ( < ( num , 0 ) ) ) ? * ( ~ ( 1 
NativeUnary parsed successfully: def int absValue ( int num ) := ; ! ( ! ( < ( num , 0 ) ) ) ? * ( ~ ( 1 ) 
Arg parsed successfully: def int absValue ( int num ) := ; ! ( ! ( < ( num , 0 ) ) ) ? * ( ~ ( 1 ) 
Arg parsed successfully: def int absValue ( int num ) := ; ! ( ! ( < ( num , 0 ) ) ) ? * ( ~ ( 1 ) , num 
NativeBinary parsed successfully: def int absValue ( int num ) := ; ! ( ! ( < ( num , 0 ) ) ) ? * ( ~ ( 1 ) , num ) 
Arg parsed successfully: def int absValue ( int num ) := ; ! ( ! ( < ( num , 0 ) ) ) ? * ( ~ ( 1 ) , num ) : @ ( num 
NativeUnary parsed successfully: def int absValue ( int num ) := ; ! ( ! ( < ( num , 0 ) ) ) ? * ( ~ ( 1 ) , num ) : @ ( num ) 
Branch parsed successfully: def int absValue ( int num ) := ; ! ( ! ( < ( num , 0 ) ) ) ? * ( ~ ( 1 ) , num ) : @ ( num ) 
Def parsed successfully: def int absValue ( int num ) := ; ! ( ! ( < ( num , 0 ) ) ) ? * ( ~ ( 1 ) , num ) : @ ( num ) 
UserFunc parsed successfully: def int absValue ( int num ) := ; ! ( ! ( < ( num , 0 ) ) ) ? * ( ~ ( 1 ) , num ) : @ ( num ) absValue 
Arg parsed successfully: def int absValue ( int num ) := ; ! ( ! ( < ( num , 0 ) ) ) ? * ( ~ ( 1 ) , num ) : @ ( num ) absValue ( ~ ( ~ ( 5 
NativeUnary parsed successfully: def int absValue ( int num ) := ; ! ( ! ( < ( num , 0 ) ) ) ? * ( ~ ( 1 ) , num ) : @ ( num ) absValue ( ~ ( ~ ( 5 ) 
Arg parsed successfully: def int absValue ( int num ) := ; ! ( ! ( < ( num , 0 ) ) ) ? * ( ~ ( 1 ) , num ) : @ ( num ) absValue ( ~ ( ~ ( 5 ) 
NativeUnary parsed successfully: def int absValue ( int num ) := ; ! ( ! ( < ( num , 0 ) ) ) ? * ( ~ ( 1 ) , num ) : @ ( num ) absValue ( ~ ( ~ ( 5 ) ) 
Arg parsed successfully: def int absValue ( int num ) := ; ! ( ! ( < ( num , 0 ) ) ) ? * ( ~ ( 1 ) , num ) : @ ( num ) absValue ( ~ ( ~ ( 5 ) ) 
Args parsed successfully: def int absValue ( int num ) := ; ! ( ! ( < ( num , 0 ) ) ) ? * ( ~ ( 1 ) , num ) : @ ( num ) absValue ( ~ ( ~ ( 5 ) ) 
ArgList parsed successfully: def int absValue ( int num ) := ; ! ( ! ( < ( num , 0 ) ) ) ? * ( ~ ( 1 ) , num ) : @ ( num ) absValue ( ~ ( ~ ( 5 ) ) ) 
Program parsed successfully: def int absValue ( int num ) := ; ! ( ! ( < ( num , 0 ) ) ) ? * ( ~ ( 1 ) , num ) : @ ( num ) absValue ( ~ ( ~ ( 5 ) ) ) 
